{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { restoreAuthState, initializeAuthComplete } from '../store/slices/authSlice';\nimport { tokenStorage } from '../utils/tokenStorage';\nexport const useAuthInitialization = () => {\n  const dispatch = useDispatch();\n  const [isInitialized, setIsInitialized] = useState(false);\n  useEffect(() => {\n    let mounted = true;\n    const initializeAuth = async () => {\n      try {\n        console.log('Starting database-only auth initialization...');\n        const storedUser = await tokenStorage.getUser();\n        const storedToken = await tokenStorage.getToken();\n        if (storedUser && storedToken) {\n          console.log('Restoring stored auth state from database...');\n          const tokenParts = storedToken.split('.');\n          if (tokenParts.length === 3 && !storedToken.startsWith('fallback_token')) {\n            dispatch(restoreAuthState({\n              user: storedUser,\n              token: storedToken\n            }));\n            console.log('✅ Valid auth state restored');\n          } else {\n            console.log('❌ Invalid token format, clearing auth data');\n            await tokenStorage.clearAuthData();\n          }\n        } else {\n          console.log('No stored auth state found');\n        }\n        setIsInitialized(true);\n        dispatch(initializeAuthComplete());\n        console.log('✅ Database auth initialization complete');\n      } catch (error) {\n        console.error('❌ Error during auth initialization:', error);\n        dispatch(initializeAuthComplete());\n      }\n    };\n    if (!isInitialized) {\n      console.log('Starting auth initialization...');\n      initializeAuth();\n    }\n    return () => {\n      console.log('Cleaning up auth initialization...');\n      mounted = false;\n    };\n  }, [dispatch, isInitialized]);\n};","map":{"version":3,"names":["useEffect","useState","useDispatch","restoreAuthState","initializeAuthComplete","tokenStorage","useAuthInitialization","dispatch","isInitialized","setIsInitialized","mounted","initializeAuth","console","log","storedUser","getUser","storedToken","getToken","tokenParts","split","length","startsWith","user","token","clearAuthData","error"],"sources":["C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/src/hooks/useAuthInitialization.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { restoreAuthState, initializeAuthComplete } from '../store/slices/authSlice';\r\nimport { tokenStorage } from '../utils/tokenStorage';\r\n// Firebase disabled - using database auth only\r\n// import { subscribeAuth, subscribeIdToken } from '../services/firebaseAuth';\r\n// import { firebaseAuth } from '../services/firebase';\r\n\r\nexport const useAuthInitialization = () => {\r\n  const dispatch = useDispatch();\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    const initializeAuth = async () => {\r\n      try {\r\n        console.log('Starting database-only auth initialization...');\r\n        \r\n        // Only restore auth state from AsyncStorage (no Firebase)\r\n        const storedUser = await tokenStorage.getUser();\r\n        const storedToken = await tokenStorage.getToken();\r\n        \r\n        if (storedUser && storedToken) {\r\n          console.log('Restoring stored auth state from database...');\r\n          \r\n          // Validate token format before restoring\r\n          const tokenParts = storedToken.split('.');\r\n          if (tokenParts.length === 3 && !storedToken.startsWith('fallback_token')) {\r\n            dispatch(restoreAuthState({ user: storedUser, token: storedToken }));\r\n            console.log('✅ Valid auth state restored');\r\n          } else {\r\n            console.log('❌ Invalid token format, clearing auth data');\r\n            await tokenStorage.clearAuthData();\r\n          }\r\n        } else {\r\n          console.log('No stored auth state found');\r\n        }\r\n\r\n        setIsInitialized(true);\r\n        dispatch(initializeAuthComplete());\r\n        console.log('✅ Database auth initialization complete');\r\n      } catch (error) {\r\n        console.error('❌ Error during auth initialization:', error);\r\n        dispatch(initializeAuthComplete());\r\n      }\r\n    };\r\n\r\n    if (!isInitialized) {\r\n      console.log('Starting auth initialization...');\r\n      initializeAuth();\r\n    }\r\n\r\n    // Cleanup (no subscriptions for database-only auth)\r\n    return () => {\r\n      console.log('Cleaning up auth initialization...');\r\n      mounted = false;\r\n    };\r\n  }, [dispatch, isInitialized]);\r\n};\r\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,gBAAgB,EAAEC,sBAAsB,QAAQ,2BAA2B;AACpF,SAASC,YAAY,QAAQ,uBAAuB;AAKpD,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KAAM;EACzC,MAAMC,QAAQ,GAAGL,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEzDD,SAAS,CAAC,MAAM;IACd,IAAIU,OAAO,GAAG,IAAI;IAElB,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,+CAA+C,CAAC;QAG5D,MAAMC,UAAU,GAAG,MAAMT,YAAY,CAACU,OAAO,CAAC,CAAC;QAC/C,MAAMC,WAAW,GAAG,MAAMX,YAAY,CAACY,QAAQ,CAAC,CAAC;QAEjD,IAAIH,UAAU,IAAIE,WAAW,EAAE;UAC7BJ,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;UAG3D,MAAMK,UAAU,GAAGF,WAAW,CAACG,KAAK,CAAC,GAAG,CAAC;UACzC,IAAID,UAAU,CAACE,MAAM,KAAK,CAAC,IAAI,CAACJ,WAAW,CAACK,UAAU,CAAC,gBAAgB,CAAC,EAAE;YACxEd,QAAQ,CAACJ,gBAAgB,CAAC;cAAEmB,IAAI,EAAER,UAAU;cAAES,KAAK,EAAEP;YAAY,CAAC,CAAC,CAAC;YACpEJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;UAC5C,CAAC,MAAM;YACLD,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;YACzD,MAAMR,YAAY,CAACmB,aAAa,CAAC,CAAC;UACpC;QACF,CAAC,MAAM;UACLZ,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;QAC3C;QAEAJ,gBAAgB,CAAC,IAAI,CAAC;QACtBF,QAAQ,CAACH,sBAAsB,CAAC,CAAC,CAAC;QAClCQ,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;MACxD,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdb,OAAO,CAACa,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC3DlB,QAAQ,CAACH,sBAAsB,CAAC,CAAC,CAAC;MACpC;IACF,CAAC;IAED,IAAI,CAACI,aAAa,EAAE;MAClBI,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9CF,cAAc,CAAC,CAAC;IAClB;IAGA,OAAO,MAAM;MACXC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjDH,OAAO,GAAG,KAAK;IACjB,CAAC;EACH,CAAC,EAAE,CAACH,QAAQ,EAAEC,aAAa,CAAC,CAAC;AAC/B,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}