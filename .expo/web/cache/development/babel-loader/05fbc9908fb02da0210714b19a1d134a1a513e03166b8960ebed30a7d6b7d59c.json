{"ast":null,"code":"'use strict';\n\nimport { useEffect, useRef } from 'react';\nimport { isWorkletFunction, makeShareable } from 'react-native-worklets';\nimport { IS_JEST, IS_WEB, ReanimatedError } from \"../common/index.js\";\nimport { areDependenciesEqual, buildDependencies } from \"./utils.js\";\nexport function useHandler(handlers, dependencies) {\n  const initRef = useRef(null);\n  if (initRef.current === null) {\n    const context = makeShareable({});\n    initRef.current = {\n      context,\n      savedDependencies: []\n    };\n  }\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n  const {\n    context,\n    savedDependencies\n  } = initRef.current;\n  for (const handlerName in handlers) {\n    if (!isWorkletFunction(handlers[handlerName])) {\n      throw new ReanimatedError('Passed a function that is not a worklet. Please provide a worklet function.');\n    }\n  }\n  dependencies = buildDependencies(dependencies, handlers);\n  const doDependenciesDiffer = !areDependenciesEqual(dependencies, savedDependencies);\n  initRef.current.savedDependencies = dependencies;\n  const useWeb = IS_WEB || IS_JEST;\n  return {\n    context,\n    doDependenciesDiffer,\n    useWeb\n  };\n}","map":{"version":3,"names":["useEffect","useRef","isWorkletFunction","makeShareable","IS_JEST","IS_WEB","ReanimatedError","areDependenciesEqual","buildDependencies","useHandler","handlers","dependencies","initRef","current","context","savedDependencies","handlerName","doDependenciesDiffer","useWeb"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\hook\\useHandler.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport type { WorkletFunction } from 'react-native-worklets';\nimport { isWorkletFunction, makeShareable } from 'react-native-worklets';\n\nimport { IS_JEST, IS_WEB, ReanimatedError } from '../common';\nimport type { DependencyList, ReanimatedEvent } from './commonTypes';\nimport { areDependenciesEqual, buildDependencies } from './utils';\n\ninterface GeneralHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> {\n  (event: ReanimatedEvent<Event>, context: Context): void;\n}\n\ntype GeneralWorkletHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> = WorkletFunction<[event: ReanimatedEvent<Event>, context: Context]>;\n\ntype GeneralHandlers<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> = Record<string, GeneralHandler<Event, Context> | undefined>;\n\ntype GeneralWorkletHandlers<\n  Event extends object,\n  Context extends Record<string, unknown>,\n> = Record<string, GeneralWorkletHandler<Event, Context>>;\n\ninterface ContextWithDependencies<Context extends Record<string, unknown>> {\n  context: Context;\n  savedDependencies: DependencyList;\n}\n\nexport interface UseHandlerContext<Context extends Record<string, unknown>> {\n  context: Context;\n  doDependenciesDiffer: boolean;\n  useWeb: boolean;\n}\n\n/**\n * Lets you find out whether the event handler dependencies have changed.\n *\n * @param handlers - An object of event handlers.\n * @param dependencies - An optional array of dependencies.\n * @returns An object containing a boolean indicating whether the dependencies\n *   have changed, and a boolean indicating whether the code is running on the\n *   web.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/useHandler\n */\n// @ts-expect-error This overload is required by our API.\nexport function useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(\n  handlers: GeneralHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context>;\n\nexport function useHandler<\n  Event extends object,\n  Context extends Record<string, unknown>,\n>(\n  handlers: GeneralWorkletHandlers<Event, Context>,\n  dependencies?: DependencyList\n): UseHandlerContext<Context> {\n  const initRef = useRef<ContextWithDependencies<Context> | null>(null);\n  if (initRef.current === null) {\n    const context = makeShareable({} as Context);\n    initRef.current = {\n      context,\n      savedDependencies: [],\n    };\n  }\n\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n\n  const { context, savedDependencies } = initRef.current;\n\n  for (const handlerName in handlers) {\n    if (!isWorkletFunction(handlers[handlerName])) {\n      throw new ReanimatedError(\n        'Passed a function that is not a worklet. Please provide a worklet function.'\n      );\n    }\n  }\n\n  dependencies = buildDependencies(\n    dependencies,\n    handlers as Record<string, WorkletFunction>\n  );\n\n  const doDependenciesDiffer = !areDependenciesEqual(\n    dependencies,\n    savedDependencies\n  );\n  initRef.current.savedDependencies = dependencies;\n  const useWeb = IS_WEB || IS_JEST;\n\n  return { context, doDependenciesDiffer, useWeb };\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,SAASC,iBAAiB,EAAEC,aAAa,QAAQ,uBAAuB;AAExE,SAASC,OAAO,EAAEC,MAAM,EAAEC,eAAe,QAAQ,oBAAW;AAE5D,SAASC,oBAAoB,EAAEC,iBAAiB,QAAQ,YAAS;AAsDjE,OAAO,SAASC,UAAUA,CAIxBC,QAAgD,EAChDC,YAA6B,EACD;EAC5B,MAAMC,OAAO,GAAGX,MAAM,CAA0C,IAAI,CAAC;EACrE,IAAIW,OAAO,CAACC,OAAO,KAAK,IAAI,EAAE;IAC5B,MAAMC,OAAO,GAAGX,aAAa,CAAC,CAAC,CAAY,CAAC;IAC5CS,OAAO,CAACC,OAAO,GAAG;MAChBC,OAAO;MACPC,iBAAiB,EAAE;IACrB,CAAC;EACH;EAEAf,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACXY,OAAO,CAACC,OAAO,GAAG,IAAI;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM;IAAEC,OAAO;IAAEC;EAAkB,CAAC,GAAGH,OAAO,CAACC,OAAO;EAEtD,KAAK,MAAMG,WAAW,IAAIN,QAAQ,EAAE;IAClC,IAAI,CAACR,iBAAiB,CAACQ,QAAQ,CAACM,WAAW,CAAC,CAAC,EAAE;MAC7C,MAAM,IAAIV,eAAe,CACvB,6EACF,CAAC;IACH;EACF;EAEAK,YAAY,GAAGH,iBAAiB,CAC9BG,YAAY,EACZD,QACF,CAAC;EAED,MAAMO,oBAAoB,GAAG,CAACV,oBAAoB,CAChDI,YAAY,EACZI,iBACF,CAAC;EACDH,OAAO,CAACC,OAAO,CAACE,iBAAiB,GAAGJ,YAAY;EAChD,MAAMO,MAAM,GAAGb,MAAM,IAAID,OAAO;EAEhC,OAAO;IAAEU,OAAO;IAAEG,oBAAoB;IAAEC;EAAO,CAAC;AAClD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}