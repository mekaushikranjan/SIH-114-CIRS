{"ast":null,"code":"'use strict';\n\nimport { WorkletsModule } from 'react-native-worklets';\nimport { IS_JEST, IS_WEB, IS_WINDOW_AVAILABLE, logger, ReanimatedError } from \"../../common/index.js\";\nimport { SensorType } from \"../../commonTypes.js\";\nimport { assertWorkletsVersion } from \"../../platform-specific/workletsVersion.js\";\nexport function createJSReanimatedModule() {\n  return new JSReanimated();\n}\nclass JSReanimated {\n  #workletsModule = WorkletsModule;\n  nextSensorId = 0;\n  sensors = new Map();\n  platform = undefined;\n  constructor() {\n    if (__DEV__) {\n      assertWorkletsVersion();\n    }\n  }\n  registerEventHandler(_eventHandler, _eventName, _emitterReactTag) {\n    throw new ReanimatedError('registerEventHandler is not available in JSReanimated.');\n  }\n  unregisterEventHandler(_) {\n    throw new ReanimatedError('unregisterEventHandler is not available in JSReanimated.');\n  }\n  configureLayoutAnimationBatch() {}\n  setShouldAnimateExitingForTag() {}\n  registerSensor(sensorType, interval, _iosReferenceFrame, eventHandler) {\n    if (!IS_WINDOW_AVAILABLE) {\n      return -1;\n    }\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n    if (!(this.getSensorName(sensorType) in window)) {\n      logger.warn('Sensor is not available.' + (IS_WEB && location.protocol !== 'https:' ? ' Make sure you use secure origin with `npx expo start --web --https`.' : '') + (this.platform === Platform.WEB_IOS ? ' For iOS web, you will also have to also grant permission in the browser: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2.' : ''));\n      return -1;\n    }\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n    const sensor = this.initializeSensor(sensorType, interval);\n    sensor.addEventListener('reading', this.getSensorCallback(sensor, sensorType, eventHandler));\n    sensor.start();\n    this.sensors.set(this.nextSensorId, sensor);\n    return this.nextSensorId++;\n  }\n  getSensorCallback = (sensor, sensorType, eventHandler) => {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n      case SensorType.GRAVITY:\n        return () => {\n          let {\n            x,\n            y,\n            z\n          } = sensor;\n          if (this.platform === Platform.WEB_ANDROID) {\n            [x, y, z] = [-x, -y, -z];\n          }\n          eventHandler({\n            x,\n            y,\n            z,\n            interfaceOrientation: 0\n          });\n        };\n      case SensorType.GYROSCOPE:\n      case SensorType.MAGNETIC_FIELD:\n        return () => {\n          const {\n            x,\n            y,\n            z\n          } = sensor;\n          eventHandler({\n            x,\n            y,\n            z,\n            interfaceOrientation: 0\n          });\n        };\n      case SensorType.ROTATION:\n        return () => {\n          const [qw, qx] = sensor.quaternion;\n          let [,, qy, qz] = sensor.quaternion;\n          if (this.platform === Platform.WEB_ANDROID) {\n            [qy, qz] = [qz, -qy];\n          }\n          const yaw = -Math.atan2(2.0 * (qy * qz + qw * qx), qw * qw - qx * qx - qy * qy + qz * qz);\n          const pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n          const roll = -Math.atan2(2.0 * (qx * qy + qw * qz), qw * qw + qx * qx - qy * qy - qz * qz);\n          eventHandler({\n            qw,\n            qx,\n            qy,\n            qz,\n            yaw,\n            pitch,\n            roll,\n            interfaceOrientation: 0\n          });\n        };\n    }\n  };\n  unregisterSensor(id) {\n    const sensor = this.sensors.get(id);\n    if (sensor !== undefined) {\n      sensor.stop();\n      this.sensors.delete(id);\n    }\n  }\n  subscribeForKeyboardEvents(_) {\n    if (IS_WEB) {\n      logger.warn('useAnimatedKeyboard is not available on web yet.');\n    } else if (IS_JEST) {\n      logger.warn('useAnimatedKeyboard is not available when using Jest.');\n    } else {\n      logger.warn('useAnimatedKeyboard is not available on this configuration.');\n    }\n    return -1;\n  }\n  unsubscribeFromKeyboardEvents(_) {}\n  initializeSensor(sensorType, interval) {\n    const config = interval <= 0 ? {\n      referenceFrame: 'device'\n    } : {\n      frequency: 1000 / interval\n    };\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return new window.Accelerometer(config);\n      case SensorType.GYROSCOPE:\n        return new window.Gyroscope(config);\n      case SensorType.GRAVITY:\n        return new window.GravitySensor(config);\n      case SensorType.MAGNETIC_FIELD:\n        return new window.Magnetometer(config);\n      case SensorType.ROTATION:\n        return new window.AbsoluteOrientationSensor(config);\n    }\n  }\n  getSensorName(sensorType) {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return 'Accelerometer';\n      case SensorType.GRAVITY:\n        return 'GravitySensor';\n      case SensorType.GYROSCOPE:\n        return 'Gyroscope';\n      case SensorType.MAGNETIC_FIELD:\n        return 'Magnetometer';\n      case SensorType.ROTATION:\n        return 'AbsoluteOrientationSensor';\n    }\n  }\n  detectPlatform() {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    if (userAgent === undefined) {\n      this.platform = Platform.UNKNOWN;\n    } else if (/iPad|iPhone|iPod/.test(userAgent)) {\n      this.platform = Platform.WEB_IOS;\n    } else if (/android/i.test(userAgent)) {\n      this.platform = Platform.WEB_ANDROID;\n    } else {\n      this.platform = Platform.WEB;\n    }\n  }\n  getViewProp(_viewTag, _propName, _component, _callback) {\n    throw new ReanimatedError('getViewProp is not available in JSReanimated.');\n  }\n  getStaticFeatureFlag() {\n    return false;\n  }\n  setDynamicFeatureFlag() {}\n  setViewStyle(_viewTag, _style) {\n    throw new ReanimatedError('setViewStyle is not available in JSReanimated.');\n  }\n  markNodeAsRemovable(_shadowNodeWrapper) {\n    throw new ReanimatedError('markNodeAsRemovable is not available in JSReanimated.');\n  }\n  unmarkNodeAsRemovable(_viewTag) {\n    throw new ReanimatedError('unmarkNodeAsRemovable is not available in JSReanimated.');\n  }\n  registerCSSKeyframes(_animationName, _viewName, _keyframesConfig) {\n    throw new ReanimatedError('`registerCSSKeyframes` is not available in JSReanimated.');\n  }\n  unregisterCSSKeyframes(_animationName, _viewName) {\n    throw new ReanimatedError('`unregisterCSSKeyframes` is not available in JSReanimated.');\n  }\n  applyCSSAnimations(_shadowNodeWrapper, _animationUpdates) {\n    throw new ReanimatedError('`applyCSSAnimations` is not available in JSReanimated.');\n  }\n  unregisterCSSAnimations(_viewTag) {\n    throw new ReanimatedError('`unregisterCSSAnimations` is not available in JSReanimated.');\n  }\n  registerCSSTransition(_shadowNodeWrapper, _transitionConfig) {\n    throw new ReanimatedError('`registerCSSTransition` is not available in JSReanimated.');\n  }\n  updateCSSTransition(_viewTag, _settingsUpdates) {\n    throw new ReanimatedError('`updateCSSTransition` is not available in JSReanimated.');\n  }\n  unregisterCSSTransition(_viewTag) {\n    throw new ReanimatedError('`unregisterCSSTransition` is not available in JSReanimated.');\n  }\n}\nexport let Platform = function (Platform) {\n  Platform[\"WEB_IOS\"] = \"web iOS\";\n  Platform[\"WEB_ANDROID\"] = \"web Android\";\n  Platform[\"WEB\"] = \"web\";\n  Platform[\"UNKNOWN\"] = \"unknown\";\n  return Platform;\n}({});","map":{"version":3,"names":["WorkletsModule","IS_JEST","IS_WEB","IS_WINDOW_AVAILABLE","logger","ReanimatedError","SensorType","assertWorkletsVersion","createJSReanimatedModule","JSReanimated","workletsModule","nextSensorId","sensors","Map","platform","undefined","constructor","__DEV__","registerEventHandler","_eventHandler","_eventName","_emitterReactTag","unregisterEventHandler","_","configureLayoutAnimationBatch","setShouldAnimateExitingForTag","registerSensor","sensorType","interval","_iosReferenceFrame","eventHandler","detectPlatform","getSensorName","window","warn","location","protocol","Platform","WEB_IOS","sensor","initializeSensor","addEventListener","getSensorCallback","start","set","ACCELEROMETER","GRAVITY","x","y","z","WEB_ANDROID","interfaceOrientation","GYROSCOPE","MAGNETIC_FIELD","ROTATION","qw","qx","quaternion","qy","qz","yaw","Math","atan2","pitch","sin","roll","unregisterSensor","id","get","stop","delete","subscribeForKeyboardEvents","unsubscribeFromKeyboardEvents","config","referenceFrame","frequency","Accelerometer","Gyroscope","GravitySensor","Magnetometer","AbsoluteOrientationSensor","userAgent","navigator","vendor","opera","UNKNOWN","test","WEB","getViewProp","_viewTag","_propName","_component","_callback","getStaticFeatureFlag","setDynamicFeatureFlag","setViewStyle","_style","markNodeAsRemovable","_shadowNodeWrapper","unmarkNodeAsRemovable","registerCSSKeyframes","_animationName","_viewName","_keyframesConfig","unregisterCSSKeyframes","applyCSSAnimations","_animationUpdates","unregisterCSSAnimations","registerCSSTransition","_transitionConfig","updateCSSTransition","_settingsUpdates","unregisterCSSTransition"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\ReanimatedModule\\js-reanimated\\JSReanimated.ts"],"sourcesContent":["'use strict';\nimport type {\n  IWorkletsModule,\n  SerializableRef,\n  WorkletFunction,\n} from 'react-native-worklets';\nimport { WorkletsModule } from 'react-native-worklets';\n\nimport {\n  IS_JEST,\n  IS_WEB,\n  IS_WINDOW_AVAILABLE,\n  logger,\n  ReanimatedError,\n} from '../../common';\nimport type {\n  ShadowNodeWrapper,\n  StyleProps,\n  Value3D,\n  ValueRotation,\n  WrapperRef,\n} from '../../commonTypes';\nimport { SensorType } from '../../commonTypes';\nimport type {\n  CSSAnimationUpdates,\n  NormalizedCSSAnimationKeyframesConfig,\n  NormalizedCSSTransitionConfig,\n} from '../../css/native';\nimport { assertWorkletsVersion } from '../../platform-specific/workletsVersion';\nimport type { IReanimatedModule } from '../reanimatedModuleProxy';\nimport type { WebSensor } from './WebSensor';\n\nexport function createJSReanimatedModule(): IReanimatedModule {\n  return new JSReanimated();\n}\n\nclass JSReanimated implements IReanimatedModule {\n  /**\n   * We keep the instance of `WorkletsModule` here to keep correct coupling of\n   * the modules and initialization order.\n   */\n  // eslint-disable-next-line no-unused-private-class-members\n  #workletsModule: IWorkletsModule = WorkletsModule;\n  nextSensorId = 0;\n  sensors = new Map<number, WebSensor>();\n  platform?: Platform = undefined;\n\n  constructor() {\n    if (__DEV__) {\n      assertWorkletsVersion();\n    }\n  }\n\n  registerEventHandler<T>(\n    _eventHandler: SerializableRef<T>,\n    _eventName: string,\n    _emitterReactTag: number\n  ): number {\n    throw new ReanimatedError(\n      'registerEventHandler is not available in JSReanimated.'\n    );\n  }\n\n  unregisterEventHandler(_: number): void {\n    throw new ReanimatedError(\n      'unregisterEventHandler is not available in JSReanimated.'\n    );\n  }\n\n  configureLayoutAnimationBatch() {\n    // no-op\n  }\n\n  setShouldAnimateExitingForTag() {\n    // no-op\n  }\n\n  registerSensor(\n    sensorType: SensorType,\n    interval: number,\n    _iosReferenceFrame: number,\n    eventHandler: SerializableRef<(data: Value3D | ValueRotation) => void>\n  ): number {\n    if (!IS_WINDOW_AVAILABLE) {\n      // the window object is unavailable when building the server portion of a site that uses SSG\n      // this check is here to ensure that the server build won't fail\n      return -1;\n    }\n\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n\n    if (!(this.getSensorName(sensorType) in window)) {\n      // https://w3c.github.io/sensors/#secure-context\n      logger.warn(\n        'Sensor is not available.' +\n          (IS_WEB && location.protocol !== 'https:'\n            ? ' Make sure you use secure origin with `npx expo start --web --https`.'\n            : '') +\n          (this.platform === Platform.WEB_IOS\n            ? ' For iOS web, you will also have to also grant permission in the browser: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2.'\n            : '')\n      );\n      return -1;\n    }\n\n    if (this.platform === undefined) {\n      this.detectPlatform();\n    }\n\n    const sensor: WebSensor = this.initializeSensor(sensorType, interval);\n    sensor.addEventListener(\n      'reading',\n      this.getSensorCallback(sensor, sensorType, eventHandler)\n    );\n    sensor.start();\n\n    this.sensors.set(this.nextSensorId, sensor);\n    return this.nextSensorId++;\n  }\n\n  getSensorCallback = (\n    sensor: WebSensor,\n    sensorType: SensorType,\n    eventHandler: SerializableRef<(data: Value3D | ValueRotation) => void>\n  ) => {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n      case SensorType.GRAVITY:\n        return () => {\n          let { x, y, z } = sensor;\n\n          // Web Android sensors have a different coordinate system than iOS\n          if (this.platform === Platform.WEB_ANDROID) {\n            [x, y, z] = [-x, -y, -z];\n          }\n          // TODO TYPESCRIPT on web SerializableRef is the value itself so we call it directly\n          (eventHandler as any)({ x, y, z, interfaceOrientation: 0 });\n        };\n      case SensorType.GYROSCOPE:\n      case SensorType.MAGNETIC_FIELD:\n        return () => {\n          const { x, y, z } = sensor;\n          // TODO TYPESCRIPT on web SerializableRef is the value itself so we call it directly\n          (eventHandler as any)({ x, y, z, interfaceOrientation: 0 });\n        };\n      case SensorType.ROTATION:\n        return () => {\n          const [qw, qx] = sensor.quaternion;\n          let [, , qy, qz] = sensor.quaternion;\n\n          // Android sensors have a different coordinate system than iOS\n          if (this.platform === Platform.WEB_ANDROID) {\n            [qy, qz] = [qz, -qy];\n          }\n\n          // reference: https://stackoverflow.com/questions/5782658/extracting-yaw-from-a-quaternion\n          const yaw = -Math.atan2(\n            2.0 * (qy * qz + qw * qx),\n            qw * qw - qx * qx - qy * qy + qz * qz\n          );\n          const pitch = Math.sin(-2.0 * (qx * qz - qw * qy));\n          const roll = -Math.atan2(\n            2.0 * (qx * qy + qw * qz),\n            qw * qw + qx * qx - qy * qy - qz * qz\n          );\n          // TODO TYPESCRIPT on web SerializableRef is the value itself so we call it directly\n          (eventHandler as any)({\n            qw,\n            qx,\n            qy,\n            qz,\n            yaw,\n            pitch,\n            roll,\n            interfaceOrientation: 0,\n          });\n        };\n    }\n  };\n\n  unregisterSensor(id: number): void {\n    const sensor: WebSensor | undefined = this.sensors.get(id);\n    if (sensor !== undefined) {\n      sensor.stop();\n      this.sensors.delete(id);\n    }\n  }\n\n  subscribeForKeyboardEvents(_: SerializableRef<WorkletFunction>): number {\n    if (IS_WEB) {\n      logger.warn('useAnimatedKeyboard is not available on web yet.');\n    } else if (IS_JEST) {\n      logger.warn('useAnimatedKeyboard is not available when using Jest.');\n    } else {\n      logger.warn(\n        'useAnimatedKeyboard is not available on this configuration.'\n      );\n    }\n    return -1;\n  }\n\n  unsubscribeFromKeyboardEvents(_: number): void {\n    // noop\n  }\n\n  initializeSensor(sensorType: SensorType, interval: number): WebSensor {\n    const config =\n      interval <= 0\n        ? { referenceFrame: 'device' }\n        : { frequency: 1000 / interval };\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return new window.Accelerometer(config);\n      case SensorType.GYROSCOPE:\n        return new window.Gyroscope(config);\n      case SensorType.GRAVITY:\n        return new window.GravitySensor(config);\n      case SensorType.MAGNETIC_FIELD:\n        return new window.Magnetometer(config);\n      case SensorType.ROTATION:\n        return new window.AbsoluteOrientationSensor(config);\n    }\n  }\n\n  getSensorName(sensorType: SensorType): string {\n    switch (sensorType) {\n      case SensorType.ACCELEROMETER:\n        return 'Accelerometer';\n      case SensorType.GRAVITY:\n        return 'GravitySensor';\n      case SensorType.GYROSCOPE:\n        return 'Gyroscope';\n      case SensorType.MAGNETIC_FIELD:\n        return 'Magnetometer';\n      case SensorType.ROTATION:\n        return 'AbsoluteOrientationSensor';\n    }\n  }\n\n  detectPlatform() {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    if (userAgent === undefined) {\n      this.platform = Platform.UNKNOWN;\n    } else if (/iPad|iPhone|iPod/.test(userAgent)) {\n      this.platform = Platform.WEB_IOS;\n    } else if (/android/i.test(userAgent)) {\n      this.platform = Platform.WEB_ANDROID;\n    } else {\n      this.platform = Platform.WEB;\n    }\n  }\n\n  getViewProp<T>(\n    _viewTag: number,\n    _propName: string,\n    _component?: WrapperRef | null,\n    _callback?: (result: T) => void\n  ): Promise<T> {\n    throw new ReanimatedError('getViewProp is not available in JSReanimated.');\n  }\n\n  getStaticFeatureFlag(): boolean {\n    // mock implementation\n    return false;\n  }\n\n  setDynamicFeatureFlag(): void {\n    // noop\n  }\n\n  setViewStyle(_viewTag: number, _style: StyleProps): void {\n    throw new ReanimatedError('setViewStyle is not available in JSReanimated.');\n  }\n\n  markNodeAsRemovable(_shadowNodeWrapper: ShadowNodeWrapper): void {\n    throw new ReanimatedError(\n      'markNodeAsRemovable is not available in JSReanimated.'\n    );\n  }\n\n  unmarkNodeAsRemovable(_viewTag: number): void {\n    throw new ReanimatedError(\n      'unmarkNodeAsRemovable is not available in JSReanimated.'\n    );\n  }\n\n  registerCSSKeyframes(\n    _animationName: string,\n    _viewName: string,\n    _keyframesConfig: NormalizedCSSAnimationKeyframesConfig\n  ): void {\n    throw new ReanimatedError(\n      '`registerCSSKeyframes` is not available in JSReanimated.'\n    );\n  }\n\n  unregisterCSSKeyframes(_animationName: string, _viewName: string): void {\n    throw new ReanimatedError(\n      '`unregisterCSSKeyframes` is not available in JSReanimated.'\n    );\n  }\n\n  applyCSSAnimations(\n    _shadowNodeWrapper: ShadowNodeWrapper,\n    _animationUpdates: CSSAnimationUpdates\n  ) {\n    throw new ReanimatedError(\n      '`applyCSSAnimations` is not available in JSReanimated.'\n    );\n  }\n\n  unregisterCSSAnimations(_viewTag: number): void {\n    throw new ReanimatedError(\n      '`unregisterCSSAnimations` is not available in JSReanimated.'\n    );\n  }\n\n  registerCSSTransition(\n    _shadowNodeWrapper: ShadowNodeWrapper,\n    _transitionConfig: NormalizedCSSTransitionConfig\n  ): void {\n    throw new ReanimatedError(\n      '`registerCSSTransition` is not available in JSReanimated.'\n    );\n  }\n\n  updateCSSTransition(\n    _viewTag: number,\n    _settingsUpdates: Partial<NormalizedCSSTransitionConfig>\n  ): void {\n    throw new ReanimatedError(\n      '`updateCSSTransition` is not available in JSReanimated.'\n    );\n  }\n\n  unregisterCSSTransition(_viewTag: number): void {\n    throw new ReanimatedError(\n      '`unregisterCSSTransition` is not available in JSReanimated.'\n    );\n  }\n}\n\n// Lack of this export breaks TypeScript generation since\n// an enum transpiles into JavaScript code.\n/** @knipIgnore */\nexport enum Platform {\n  WEB_IOS = 'web iOS',\n  WEB_ANDROID = 'web Android',\n  WEB = 'web',\n  UNKNOWN = 'unknown',\n}\n\ndeclare global {\n  interface Navigator {\n    userAgent: string;\n    vendor: string;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}