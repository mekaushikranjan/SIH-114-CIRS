{"ast":null,"code":"import { firebaseAuth } from './firebase';\nimport { onAuthStateChanged, onIdTokenChanged, signOut, signInWithEmailAndPassword, createUserWithEmailAndPassword, signInWithPhoneNumber, RecaptchaVerifier, sendEmailVerification, applyActionCode, reload } from 'firebase/auth';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nexport function subscribeAuth(callback) {\n  return onAuthStateChanged(firebaseAuth, callback);\n}\nexport function subscribeIdToken(callback) {\n  return onIdTokenChanged(firebaseAuth, user => {\n    if (user) {\n      user.getIdToken().then(callback);\n    } else {\n      callback(null);\n    }\n  });\n}\nexport async function logout() {\n  return signOut(firebaseAuth);\n}\nexport async function login(email, password) {\n  const userCredential = await signInWithEmailAndPassword(firebaseAuth, email, password);\n  return userCredential.user;\n}\nexport async function register(email, password) {\n  const userCredential = await createUserWithEmailAndPassword(firebaseAuth, email, password);\n  return userCredential.user;\n}\nexport async function signInWithPhone(phoneNumber) {\n  const recaptchaVerifier = new RecaptchaVerifier('recaptcha-container', {\n    size: 'invisible',\n    callback: response => {\n      console.log('reCAPTCHA resolved');\n    }\n  }, firebaseAuth);\n  const confirmationResult = await signInWithPhoneNumber(firebaseAuth, phoneNumber, recaptchaVerifier);\n  return confirmationResult;\n}\nexport async function phoneConfirmCode(confirmation, code) {\n  const cred = await confirmation.confirm(code);\n  return cred.user;\n}\nexport async function signInWithGoogle() {\n  try {\n    console.log('[Firebase Google Auth] Starting Firebase Web SDK Google Sign-In...');\n    Alert.alert('Google Sign-In', 'Google Sign-In requires additional configuration for Expo managed workflow.\\n\\n' + 'For now, please use:\\n' + '• Email/Password authentication\\n' + '• Phone number authentication\\n\\n' + 'To enable Google Sign-In, you would need to:\\n' + '1. Eject to bare React Native workflow, OR\\n' + '2. Use Expo Development Build, OR\\n' + '3. Configure Google OAuth in Google Console', [{\n      text: 'OK'\n    }]);\n    throw new Error('Google Sign-In requires additional configuration. Please use email/password or phone authentication.');\n  } catch (error) {\n    console.error('Firebase Google Sign-In error:', error);\n    throw error;\n  }\n}\nexport async function sendEmailVerificationLink(user) {\n  await sendEmailVerification(user);\n}\nexport async function verifyEmailWithCode(oobCode) {\n  await applyActionCode(firebaseAuth, oobCode);\n}\nexport async function checkEmailVerified(user) {\n  await reload(user);\n  return user.emailVerified;\n}\nexport async function signInAnonymously() {\n  const {\n    signInAnonymously\n  } = await import('firebase/auth');\n  const userCredential = await signInAnonymously(firebaseAuth);\n  return userCredential.user;\n}\nexport async function resetPassword(email) {\n  const {\n    sendPasswordResetEmail\n  } = await import('firebase/auth');\n  await sendPasswordResetEmail(firebaseAuth, email);\n}\nexport async function updateUserProfile(user, profile) {\n  const {\n    updateProfile\n  } = await import('firebase/auth');\n  await updateProfile(user, profile);\n}\nexport async function phoneSendCode(phoneNumber, recaptchaVerifier) {\n  return signInWithPhoneNumber(firebaseAuth, phoneNumber, recaptchaVerifier);\n}\nexport function useEmailVerificationHandler() {\n  return {\n    handleEmailVerification: async actionCode => {\n      try {\n        await verifyEmailWithCode(actionCode);\n        return {\n          success: true\n        };\n      } catch (error) {\n        console.error('Email verification error:', error);\n        return {\n          success: false,\n          error\n        };\n      }\n    }\n  };\n}","map":{"version":3,"names":["firebaseAuth","onAuthStateChanged","onIdTokenChanged","signOut","signInWithEmailAndPassword","createUserWithEmailAndPassword","signInWithPhoneNumber","RecaptchaVerifier","sendEmailVerification","applyActionCode","reload","Alert","subscribeAuth","callback","subscribeIdToken","user","getIdToken","then","logout","login","email","password","userCredential","register","signInWithPhone","phoneNumber","recaptchaVerifier","size","response","console","log","confirmationResult","phoneConfirmCode","confirmation","code","cred","confirm","signInWithGoogle","alert","text","Error","error","sendEmailVerificationLink","verifyEmailWithCode","oobCode","checkEmailVerified","emailVerified","signInAnonymously","resetPassword","sendPasswordResetEmail","updateUserProfile","profile","updateProfile","phoneSendCode","useEmailVerificationHandler","handleEmailVerification","actionCode","success"],"sources":["C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/src/services/firebaseAuth.ts"],"sourcesContent":["import { firebaseAuth } from './firebase';\nimport {\n\tonAuthStateChanged,\n\tonIdTokenChanged,\n\tsignOut,\n\tsignInWithEmailAndPassword,\n\tcreateUserWithEmailAndPassword,\n\tsignInWithPhoneNumber,\n\tsignInWithCredential,\n\tGoogleAuthProvider,\n\tRecaptchaVerifier,\n\tConfirmationResult,\n\tsendEmailVerification,\n\tapplyActionCode,\n\treload,\n} from 'firebase/auth';\nimport { Platform, Alert } from 'react-native';\nimport type { User } from 'firebase/auth';\n\nexport function subscribeAuth(callback: (user: any) => void) {\n\treturn onAuthStateChanged(firebaseAuth, callback);\n}\n\nexport function subscribeIdToken(callback: (token: string | null) => void) {\n\treturn onIdTokenChanged(firebaseAuth, (user) => {\n\t\tif (user) {\n\t\t\tuser.getIdToken().then(callback);\n\t\t} else {\n\t\t\tcallback(null);\n\t\t}\n\t});\n}\n\nexport async function logout() {\n\treturn signOut(firebaseAuth);\n}\n\nexport async function login(email: string, password: string) {\n\tconst userCredential = await signInWithEmailAndPassword(firebaseAuth, email, password);\n\treturn userCredential.user;\n}\n\nexport async function register(email: string, password: string) {\n\tconst userCredential = await createUserWithEmailAndPassword(firebaseAuth, email, password);\n\treturn userCredential.user;\n}\n\n// Phone Authentication with Invisible reCAPTCHA\nexport async function signInWithPhone(phoneNumber: string): Promise<ConfirmationResult> {\n\t// Create a reCAPTCHA verifier\n\tconst recaptchaVerifier = new RecaptchaVerifier('recaptcha-container', {\n\t\tsize: 'invisible',\n\t\tcallback: (response: any) => {\n\t\t\tconsole.log('reCAPTCHA resolved');\n\t\t}\n\t}, firebaseAuth);\n\n\tconst confirmationResult = await signInWithPhoneNumber(firebaseAuth, phoneNumber, recaptchaVerifier);\n\treturn confirmationResult;\n}\n\nexport async function phoneConfirmCode(confirmation: ConfirmationResult, code: string) {\n\tconst cred = await confirmation.confirm(code);\n\treturn cred.user;\n}\n\n// Google Sign-In using Firebase Web SDK (Expo Compatible)\nexport async function signInWithGoogle(): Promise<User> {\n\ttry {\n\t\tconsole.log('[Firebase Google Auth] Starting Firebase Web SDK Google Sign-In...');\n\t\t\n\t\t// For Expo managed workflow, we'll use a simple approach\n\t\t// This will show an alert explaining the limitation\n\t\tAlert.alert(\n\t\t\t'Google Sign-In',\n\t\t\t'Google Sign-In requires additional configuration for Expo managed workflow.\\n\\n' +\n\t\t\t'For now, please use:\\n' +\n\t\t\t'• Email/Password authentication\\n' +\n\t\t\t'• Phone number authentication\\n\\n' +\n\t\t\t'To enable Google Sign-In, you would need to:\\n' +\n\t\t\t'1. Eject to bare React Native workflow, OR\\n' +\n\t\t\t'2. Use Expo Development Build, OR\\n' +\n\t\t\t'3. Configure Google OAuth in Google Console',\n\t\t\t[{ text: 'OK' }]\n\t\t);\n\t\t\n\t\tthrow new Error('Google Sign-In requires additional configuration. Please use email/password or phone authentication.');\n\t\t\n\t} catch (error: any) {\n\t\tconsole.error('Firebase Google Sign-In error:', error);\n\t\tthrow error;\n\t}\n}\n\n// Email verification functions\nexport async function sendEmailVerificationLink(user: any) {\n\tawait sendEmailVerification(user);\n}\n\nexport async function verifyEmailWithCode(oobCode: string) {\n\tawait applyActionCode(firebaseAuth, oobCode);\n}\n\nexport async function checkEmailVerified(user: any) {\n\tawait reload(user);\n\treturn user.emailVerified;\n}\n\n// Anonymous authentication (optional)\nexport async function signInAnonymously() {\n\tconst { signInAnonymously } = await import('firebase/auth');\n\tconst userCredential = await signInAnonymously(firebaseAuth);\n\treturn userCredential.user;\n}\n\n// Password reset\nexport async function resetPassword(email: string) {\n\tconst { sendPasswordResetEmail } = await import('firebase/auth');\n\tawait sendPasswordResetEmail(firebaseAuth, email);\n}\n\n// Update user profile\nexport async function updateUserProfile(user: User, profile: { displayName?: string; photoURL?: string }) {\n\tconst { updateProfile } = await import('firebase/auth');\n\tawait updateProfile(user, profile);\n}\n\n// Missing exports for OTP verification\nexport async function phoneSendCode(phoneNumber: string, recaptchaVerifier: any): Promise<ConfirmationResult> {\n\treturn signInWithPhoneNumber(firebaseAuth, phoneNumber, recaptchaVerifier);\n}\n\nexport function useEmailVerificationHandler() {\n\treturn {\n\t\thandleEmailVerification: async (actionCode: string) => {\n\t\t\ttry {\n\t\t\t\tawait verifyEmailWithCode(actionCode);\n\t\t\t\treturn { success: true };\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Email verification error:', error);\n\t\t\t\treturn { success: false, error };\n\t\t\t}\n\t\t}\n\t};\n}"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}