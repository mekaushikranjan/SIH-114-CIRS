{"ast":null,"code":"\"use strict\";\n\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { GestureStateManager } from './gestureStateManager';\nlet gestureHandlerEventSubscription = null;\nlet gestureHandlerStateChangeEventSubscription = null;\nconst gestureStateManagers = new Map();\nconst lastUpdateEvent = [];\nfunction isStateChangeEvent(event) {\n  return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n  return event.eventType != null;\n}\nexport function onGestureHandlerEvent(event) {\n  const handler = findHandler(event.handlerTag);\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n        handler.handlers.onBegin?.(event);\n      } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.oldState !== event.state) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(event.handlerTag, GestureStateManager.create(event.handlerTag));\n      }\n      const manager = gestureStateManagers.get(event.handlerTag);\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, manager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(handler.handlers.changeEventCalculator?.(event, lastUpdateEvent[handler.handlers.handlerTag]));\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = {\n        nativeEvent: event\n      };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\nexport function startListening() {\n  stopListening();\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerEvent', onGestureHandlerEvent);\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerStateChange', onGestureHandlerEvent);\n}\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}","map":{"version":3,"names":["State","TouchEventType","findHandler","findOldGestureHandler","GestureStateManager","gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","gestureStateManagers","Map","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","handler","handlerTag","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","undefined","FAILED","CANCELLED","delete","has","set","create","manager","get","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","onChange","changeEventCalculator","oldHandler","nativeEvent","onGestureStateChange","onGestureEvent","startListening","stopListening","DeviceEventEmitter","addListener","remove"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\eventReceiver.ts"],"sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null =\n  null;\n\nconst gestureStateManagers: Map<number, GestureStateManagerType> = new Map<\n  number,\n  GestureStateManagerType\n>();\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(\n          event.handlerTag,\n          GestureStateManager.create(event.handlerTag)\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const manager = gestureStateManagers.get(event.handlerTag)!;\n\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, manager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}