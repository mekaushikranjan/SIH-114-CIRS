{"ast":null,"code":"\"use strict\";\n\nimport { EventTypes } from '../interfaces';\nimport EventManager from './EventManager';\nimport { PointerType } from '../../PointerType';\nexport default class KeyboardEventManager extends EventManager {\n  static activationKeys = ['Enter', ' '];\n  static cancelationKeys = ['Tab'];\n  isPressed = false;\n  static registeredStaticListeners = false;\n  static instances = new Set();\n  static keyUpStaticCallback = event => {\n    if (this.activationKeys.indexOf(event.key) === -1) {\n      return;\n    }\n    this.instances.forEach(item => {\n      item.onKeyUp(event);\n    });\n  };\n  keyDownCallback = event => {\n    if (KeyboardEventManager.cancelationKeys.indexOf(event.key) !== -1 && this.isPressed) {\n      this.dispatchEvent(event, EventTypes.CANCEL);\n      return;\n    }\n    if (KeyboardEventManager.activationKeys.indexOf(event.key) === -1) {\n      return;\n    }\n    this.dispatchEvent(event, EventTypes.DOWN);\n  };\n  onKeyUp = event => {\n    if (KeyboardEventManager.activationKeys.indexOf(event.key) === -1 || !this.isPressed) {\n      return;\n    }\n    this.dispatchEvent(event, EventTypes.UP);\n  };\n  dispatchEvent(event, eventType) {\n    if (!(event.target instanceof HTMLElement)) {\n      return;\n    }\n    const adaptedEvent = this.mapEvent(event, eventType);\n    switch (eventType) {\n      case EventTypes.UP:\n        this.isPressed = false;\n        this.onPointerUp(adaptedEvent);\n        break;\n      case EventTypes.DOWN:\n        this.isPressed = true;\n        this.onPointerDown(adaptedEvent);\n        break;\n      case EventTypes.CANCEL:\n        this.isPressed = false;\n        this.onPointerCancel(adaptedEvent);\n        break;\n    }\n  }\n  registerListeners() {\n    this.view.addEventListener('keydown', this.keyDownCallback);\n    KeyboardEventManager.instances.add(this);\n    if (!KeyboardEventManager.registeredStaticListeners) {\n      KeyboardEventManager.registeredStaticListeners = true;\n      document.addEventListener('keyup', KeyboardEventManager.keyUpStaticCallback, {\n        capture: true\n      });\n    }\n  }\n  unregisterListeners() {\n    this.view.removeEventListener('keydown', this.keyDownCallback);\n    KeyboardEventManager.instances.delete(this);\n    if (KeyboardEventManager.instances.size === 0) {\n      document.removeEventListener('keyup', KeyboardEventManager.keyUpStaticCallback, {\n        capture: true\n      });\n      KeyboardEventManager.registeredStaticListeners = false;\n    }\n  }\n  mapEvent(event, eventType) {\n    const viewRect = event.target.getBoundingClientRect();\n    const viewportPosition = {\n      x: viewRect?.x + viewRect?.width / 2,\n      y: viewRect?.y + viewRect?.height / 2\n    };\n    const relativePosition = {\n      x: viewRect?.width / 2,\n      y: viewRect?.height / 2\n    };\n    return {\n      x: viewportPosition.x,\n      y: viewportPosition.y,\n      offsetX: relativePosition.x,\n      offsetY: relativePosition.y,\n      pointerId: 0,\n      eventType: eventType,\n      pointerType: PointerType.KEY,\n      time: event.timeStamp\n    };\n  }\n}","map":{"version":3,"names":["EventTypes","EventManager","PointerType","KeyboardEventManager","activationKeys","cancelationKeys","isPressed","registeredStaticListeners","instances","Set","keyUpStaticCallback","event","indexOf","key","forEach","item","onKeyUp","keyDownCallback","dispatchEvent","CANCEL","DOWN","UP","eventType","target","HTMLElement","adaptedEvent","mapEvent","onPointerUp","onPointerDown","onPointerCancel","registerListeners","view","addEventListener","add","document","capture","unregisterListeners","removeEventListener","delete","size","viewRect","getBoundingClientRect","viewportPosition","x","width","y","height","relativePosition","offsetX","offsetY","pointerId","pointerType","KEY","time","timeStamp"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\web\\tools\\KeyboardEventManager.ts"],"sourcesContent":["import { AdaptedEvent, EventTypes } from '../interfaces';\nimport EventManager from './EventManager';\nimport { PointerType } from '../../PointerType';\n\nexport default class KeyboardEventManager extends EventManager<HTMLElement> {\n  private static activationKeys = ['Enter', ' '];\n  private static cancelationKeys = ['Tab'];\n  private isPressed = false;\n  private static registeredStaticListeners = false;\n  private static instances: Set<KeyboardEventManager> = new Set();\n\n  private static keyUpStaticCallback = (event: KeyboardEvent): void => {\n    // We need a global listener, as in some cases, keyUp event gets stop-propagated.\n    // Then, if we used only component-level listeners the gesture would never end,\n    // causing other gestues to fail.\n\n    if (this.activationKeys.indexOf(event.key) === -1) {\n      return;\n    }\n\n    this.instances.forEach((item) => {\n      item.onKeyUp(event);\n    });\n  };\n\n  private keyDownCallback = (event: KeyboardEvent): void => {\n    if (\n      KeyboardEventManager.cancelationKeys.indexOf(event.key) !== -1 &&\n      this.isPressed\n    ) {\n      this.dispatchEvent(event, EventTypes.CANCEL);\n      return;\n    }\n\n    if (KeyboardEventManager.activationKeys.indexOf(event.key) === -1) {\n      return;\n    }\n\n    this.dispatchEvent(event, EventTypes.DOWN);\n  };\n\n  private onKeyUp = (event: KeyboardEvent): void => {\n    if (\n      KeyboardEventManager.activationKeys.indexOf(event.key) === -1 ||\n      !this.isPressed\n    ) {\n      return;\n    }\n\n    this.dispatchEvent(event, EventTypes.UP);\n  };\n\n  private dispatchEvent(event: KeyboardEvent, eventType: EventTypes) {\n    if (!(event.target instanceof HTMLElement)) {\n      return;\n    }\n\n    const adaptedEvent = this.mapEvent(event, eventType);\n\n    switch (eventType) {\n      case EventTypes.UP:\n        this.isPressed = false;\n        this.onPointerUp(adaptedEvent);\n        break;\n      case EventTypes.DOWN:\n        this.isPressed = true;\n        this.onPointerDown(adaptedEvent);\n        break;\n      case EventTypes.CANCEL:\n        this.isPressed = false;\n        this.onPointerCancel(adaptedEvent);\n        break;\n    }\n  }\n\n  public registerListeners(): void {\n    this.view.addEventListener('keydown', this.keyDownCallback);\n\n    KeyboardEventManager.instances.add(this);\n\n    if (!KeyboardEventManager.registeredStaticListeners) {\n      KeyboardEventManager.registeredStaticListeners = true;\n      document.addEventListener(\n        'keyup',\n        KeyboardEventManager.keyUpStaticCallback,\n        { capture: true }\n      );\n    }\n  }\n\n  public unregisterListeners(): void {\n    this.view.removeEventListener('keydown', this.keyDownCallback);\n\n    KeyboardEventManager.instances.delete(this);\n\n    if (KeyboardEventManager.instances.size === 0) {\n      document.removeEventListener(\n        'keyup',\n        KeyboardEventManager.keyUpStaticCallback,\n        { capture: true }\n      );\n      KeyboardEventManager.registeredStaticListeners = false;\n    }\n  }\n\n  protected mapEvent(\n    event: KeyboardEvent,\n    eventType: EventTypes\n  ): AdaptedEvent {\n    const viewRect = (event.target as HTMLElement).getBoundingClientRect();\n\n    const viewportPosition = {\n      x: viewRect?.x + viewRect?.width / 2,\n      y: viewRect?.y + viewRect?.height / 2,\n    };\n\n    const relativePosition = {\n      x: viewRect?.width / 2,\n      y: viewRect?.height / 2,\n    };\n\n    return {\n      x: viewportPosition.x,\n      y: viewportPosition.y,\n      offsetX: relativePosition.x,\n      offsetY: relativePosition.y,\n      pointerId: 0,\n      eventType: eventType,\n      pointerType: PointerType.KEY,\n      time: event.timeStamp,\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}