{"ast":null,"code":"\"use strict\";\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler } from '../handlers/PanGestureHandler';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DRAG_TOSS = 0.05;\nconst IDLE = 'Idle';\nconst DRAGGING = 'Dragging';\nconst SETTLING = 'Settling';\nexport default class DrawerLayout extends Component {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false\n  };\n  constructor(props) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false\n    };\n    this.updateAnimatedEvent(props, this.state);\n  }\n  shouldComponentUpdate(props, state) {\n    if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n      this.updateAnimatedEvent(props, state);\n    }\n    return true;\n  }\n  accessibilityIsModalView = React.createRef();\n  pointerEventsView = React.createRef();\n  panGestureHandler = React.createRef();\n  drawerShown = false;\n  static positions = {\n    Left: 'left',\n    Right: 'right'\n  };\n  updateAnimatedEvent = (props, state) => {\n    const {\n      drawerPosition,\n      drawerWidth,\n      drawerType\n    } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth\n    } = state;\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n    if (drawerPosition !== 'left') {\n      dragX = Animated.multiply(new Animated.Value(-1), dragXValue);\n      touchX = Animated.add(new Animated.Value(containerWidth), Animated.multiply(new Animated.Value(-1), touchXValue));\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(touchX, Animated.multiply(new Animated.Value(-1), dragX));\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth - 1, drawerWidth, drawerWidth + 1],\n        outputRange: [0, 0, 1]\n      });\n      translationX = Animated.add(dragX, dragOffsetFromOnStartPosition);\n    }\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth],\n      outputRange: [0, 1],\n      extrapolate: 'clamp'\n    });\n    const gestureOptions = {\n      useNativeDriver: props.useNativeAnimations\n    };\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = ev => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n    this.onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: dragXValue,\n        x: touchXValue\n      }\n    }], gestureOptions);\n  };\n  handleContainerLayout = ({\n    nativeEvent\n  }) => {\n    this.setState({\n      containerWidth: nativeEvent.layout.width\n    });\n  };\n  emitStateChanged = (newState, drawerWillShow) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n  openingHandlerStateChange = ({\n    nativeEvent\n  }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({\n        nativeEvent\n      });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({\n        drawerState: DRAGGING\n      });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n  onTapHandlerStateChange = ({\n    nativeEvent\n  }) => {\n    if (this.drawerShown && nativeEvent.oldState === State.ACTIVE && this.props.drawerLockMode !== 'locked-open') {\n      this.closeDrawer();\n    }\n  };\n  handleRelease = ({\n    nativeEvent\n  }) => {\n    const {\n      drawerWidth,\n      drawerPosition,\n      drawerType\n    } = this.props;\n    const {\n      containerWidth\n    } = this.state;\n    let {\n      translationX: dragX,\n      velocityX,\n      x: touchX\n    } = nativeEvent;\n    if (drawerPosition !== 'left') {\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n    }\n    const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n    const shouldOpen = projOffsetX > drawerWidth / 2;\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n  updateShowing = showing => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none'\n    });\n    const {\n      drawerPosition,\n      minSwipeDistance,\n      edgeWidth\n    } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    const hitSlop = fromLeft ? {\n      left: 0,\n      width: showing ? undefined : edgeWidth\n    } : {\n      right: 0,\n      width: showing ? undefined : edgeWidth\n    };\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance\n    });\n  };\n  animateDrawer = (fromValue, toValue, velocity, speed) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth);\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({\n      drawerState: SETTLING\n    });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations,\n      speed: speed ?? undefined\n    }).start(({\n      finished\n    }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({\n          drawerOpened: willShow\n        });\n        if (this.state.drawerState !== DRAGGING) {\n          this.setState({\n            drawerState: IDLE\n          });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n  openDrawer = (options = {}) => {\n    this.animateDrawer(undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed);\n    this.forceUpdate();\n  };\n  closeDrawer = (options = {}) => {\n    this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed);\n    this.forceUpdate();\n  };\n  renderOverlay = () => {\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor\n    };\n    return _jsx(TapGestureHandler, {\n      onHandlerStateChange: this.onTapHandlerStateChange,\n      children: _jsx(Animated.View, {\n        pointerEvents: this.drawerShown ? 'auto' : 'none',\n        ref: this.pointerEventsView,\n        style: [styles.overlay, dynamicOverlayStyles]\n      })\n    });\n  };\n  renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle\n    } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth] : [0, -drawerWidth],\n        extrapolate: 'clamp'\n      });\n      containerStyles = {\n        transform: [{\n          translateX: containerTranslateX\n        }]\n      };\n    }\n    let drawerTranslateX = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp'\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles = {\n      transform: [{\n        translateX: drawerTranslateX\n      }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row'\n    };\n    return _jsxs(Animated.View, {\n      style: styles.main,\n      onLayout: this.handleContainerLayout,\n      children: [_jsxs(Animated.View, {\n        style: [drawerType === 'front' ? styles.containerOnBack : styles.containerInFront, containerStyles, contentContainerStyle],\n        importantForAccessibility: this.drawerShown ? 'no-hide-descendants' : 'yes',\n        children: [typeof this.props.children === 'function' ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()]\n      }), _jsx(Animated.View, {\n        pointerEvents: \"box-none\",\n        ref: this.accessibilityIsModalView,\n        accessibilityViewIsModal: this.drawerShown,\n        style: [styles.drawerContainer, drawerStyles, drawerContainerStyle],\n        children: _jsx(View, {\n          style: dynamicDrawerStyles,\n          children: this.props.renderNavigationView(this.openValue)\n        })\n      })]\n    });\n  };\n  setPanGestureRef = ref => {\n    this.panGestureHandler.current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance\n    } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    const hitSlop = fromLeft ? {\n      left: 0,\n      width: this.drawerShown ? undefined : edgeWidth\n    } : {\n      right: 0,\n      width: this.drawerShown ? undefined : edgeWidth\n    };\n    return _jsx(PanGestureHandler, {\n      userSelect: this.props.userSelect,\n      activeCursor: this.props.activeCursor,\n      mouseButton: this.props.mouseButton,\n      enableContextMenu: this.props.enableContextMenu,\n      ref: this.setPanGestureRef,\n      hitSlop: hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance,\n      failOffsetY: [-15, 15],\n      onGestureEvent: this.onGestureEvent,\n      onHandlerStateChange: this.openingHandlerStateChange,\n      enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n      enabled: drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open',\n      children: this.renderDrawer()\n    });\n  }\n}\nconst styles = StyleSheet.create({\n  drawerContainer: Object.assign({}, StyleSheet.absoluteFillObject, {\n    zIndex: 1001,\n    flexDirection: 'row'\n  }),\n  containerInFront: Object.assign({}, StyleSheet.absoluteFillObject, {\n    zIndex: 1002\n  }),\n  containerOnBack: Object.assign({}, StyleSheet.absoluteFillObject),\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden'\n  },\n  overlay: Object.assign({}, StyleSheet.absoluteFillObject, {\n    zIndex: 1000\n  })\n});","map":{"version":3,"names":["React","Component","invariant","Animated","StyleSheet","View","Keyboard","StatusBar","I18nManager","PanGestureHandler","TapGestureHandler","State","jsx","_jsx","jsxs","_jsxs","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","defaultProps","drawerWidth","drawerPosition","useNativeAnimations","drawerType","edgeWidth","minSwipeDistance","overlayColor","drawerLockMode","enableTrackpadTwoFingerGesture","constructor","props","dragX","Value","touchX","drawerTranslation","state","containerWidth","drawerState","drawerOpened","updateAnimatedEvent","shouldComponentUpdate","accessibilityIsModalView","createRef","pointerEventsView","panGestureHandler","drawerShown","positions","Left","Right","dragXValue","touchXValue","multiply","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","onDrawerSlide","listener","ev","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","handleContainerLayout","setState","layout","width","emitStateChanged","newState","drawerWillShow","onDrawerStateChanged","openingHandlerStateChange","oldState","ACTIVE","handleRelease","keyboardDismissMode","dismiss","hideStatusBar","setHidden","statusBarAnimation","onTapHandlerStateChange","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","updateShowing","showing","current","setNativeProps","accessibilityViewIsModal","pointerEvents","fromLeft","gestureOrientation","hitSlop","left","undefined","right","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","spring","bounciness","start","finished","onDrawerOpen","onDrawerClose","openDrawer","options","forceUpdate","renderOverlay","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","onHandlerStateChange","children","ref","style","styles","overlay","renderDrawer","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","containerOnBack","containerInFront","importantForAccessibility","drawerContainer","renderNavigationView","setPanGestureRef","onGestureRef","render","userSelect","activeCursor","mouseButton","enableContextMenu","failOffsetY","enabled","create","Object","assign","absoluteFillObject","zIndex","flex","overflow"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\components\\DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n  UserSelect,\n  ActiveCursor,\n  MouseButton,\n} from '../handlers/gestureHandlerCommon';\nimport { PanGestureHandler } from '../handlers/PanGestureHandler';\nimport type {\n  PanGestureHandlerEventPayload,\n  TapGestureHandlerEventPayload,\n} from '../handlers/GestureHandlerEventPayload';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerPosition = 'left' | 'right';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerType = 'front' | 'back' | 'slide';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native`\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n\n  // Implicit `children` prop has been removed in @types/react^18.0.0\n  children?:\n    | React.ReactNode\n    | ((openValue?: AnimatedInterpolation) => React.ReactNode);\n\n  /**\n   * @default 'none'\n   * Defines which userSelect property should be used.\n   * Values: 'none'|'text'|'auto'\n   */\n  userSelect?: UserSelect;\n\n  /**\n   * @default 'auto'\n   * Defines which cursor property should be used when gesture activates.\n   * Values: see CSS cursor values\n   */\n  activeCursor?: ActiveCursor;\n\n  /**\n   * @default 'MouseButton.LEFT'\n   * Allows to choose which mouse button should underlying pan handler react to.\n   */\n  mouseButton?: MouseButton;\n\n  /**\n   * @default 'false if MouseButton.RIGHT is specified'\n   * Allows to enable/disable context menu.\n   */\n  enableContextMenu?: boolean;\n}\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n  drawerState: DrawerState;\n  drawerOpened: boolean;\n};\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\n\n/**\n * @deprecated use Reanimated version of DrawerLayout instead\n */\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  shouldComponentUpdate(props: DrawerLayoutProps, state: DrawerLayoutState) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private openValue?: AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView =\n    React.createRef<React.ComponentRef<typeof View>>();\n  private pointerEventsView =\n    React.createRef<React.ComponentRef<typeof View>>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({ drawerState: DRAGGING });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({ drawerState: SETTLING });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({ drawerOpened: willShow });\n        if (this.state.drawerState !== DRAGGING) {\n          // It's possilbe that user started drag while the drawer\n          // was settling, don't override state in this case\n          this.setState({ drawerState: IDLE });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // We rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp',\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles: {\n      transform: { translateX: number | AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (\n      this.panGestureHandler as React.MutableRefObject<PanGestureHandler>\n    ).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } =\n      this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        userSelect={this.props.userSelect}\n        activeCursor={this.props.activeCursor}\n        mouseButton={this.props.mouseButton}\n        enableContextMenu={this.props.enableContextMenu}\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}