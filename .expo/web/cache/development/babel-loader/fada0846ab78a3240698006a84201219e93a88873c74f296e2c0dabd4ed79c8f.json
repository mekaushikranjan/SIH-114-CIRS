{"ast":null,"code":"\"use strict\";\n\nimport { PointerType } from '../../PointerType';\nimport { State } from '../../State';\nimport PointerTracker from './PointerTracker';\nexport default class GestureHandlerOrchestrator {\n  gestureHandlers = [];\n  awaitingHandlers = [];\n  awaitingHandlersTags = new Set();\n  handlingChangeSemaphore = 0;\n  activationIndex = 0;\n  constructor() {}\n  scheduleFinishedHandlersCleanup() {\n    if (this.handlingChangeSemaphore === 0) {\n      this.cleanupFinishedHandlers();\n    }\n  }\n  cleanHandler(handler) {\n    handler.reset();\n    handler.active = false;\n    handler.awaiting = false;\n    handler.activationIndex = Number.MAX_VALUE;\n  }\n  removeHandlerFromOrchestrator(handler) {\n    const indexInGestureHandlers = this.gestureHandlers.indexOf(handler);\n    const indexInAwaitingHandlers = this.awaitingHandlers.indexOf(handler);\n    if (indexInGestureHandlers >= 0) {\n      this.gestureHandlers.splice(indexInGestureHandlers, 1);\n    }\n    if (indexInAwaitingHandlers >= 0) {\n      this.awaitingHandlers.splice(indexInAwaitingHandlers, 1);\n      this.awaitingHandlersTags.delete(handler.handlerTag);\n    }\n  }\n  cleanupFinishedHandlers() {\n    const handlersToRemove = new Set();\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      const handler = this.gestureHandlers[i];\n      if (this.isFinished(handler.state) && !handler.awaiting) {\n        this.cleanHandler(handler);\n        handlersToRemove.add(handler);\n      }\n    }\n    this.gestureHandlers = this.gestureHandlers.filter(handler => !handlersToRemove.has(handler));\n  }\n  hasOtherHandlerToWaitFor(handler) {\n    const hasToWaitFor = otherHandler => {\n      return !this.isFinished(otherHandler.state) && this.shouldHandlerWaitForOther(handler, otherHandler);\n    };\n    return this.gestureHandlers.some(hasToWaitFor);\n  }\n  shouldBeCancelledByFinishedHandler(handler) {\n    const shouldBeCancelled = otherHandler => {\n      return this.shouldHandlerWaitForOther(handler, otherHandler) && otherHandler.state === State.END;\n    };\n    return this.gestureHandlers.some(shouldBeCancelled);\n  }\n  tryActivate(handler) {\n    if (this.shouldBeCancelledByFinishedHandler(handler)) {\n      handler.cancel();\n      return;\n    }\n    if (this.hasOtherHandlerToWaitFor(handler)) {\n      this.addAwaitingHandler(handler);\n      return;\n    }\n    const handlerState = handler.state;\n    if (handlerState === State.CANCELLED || handlerState === State.FAILED) {\n      return;\n    }\n    if (this.shouldActivate(handler)) {\n      this.makeActive(handler);\n      return;\n    }\n    if (handlerState === State.ACTIVE) {\n      handler.fail();\n      return;\n    }\n    if (handlerState === State.BEGAN) {\n      handler.cancel();\n    }\n  }\n  shouldActivate(handler) {\n    const shouldBeCancelledBy = otherHandler => {\n      return this.shouldHandlerBeCancelledBy(handler, otherHandler);\n    };\n    return !this.gestureHandlers.some(shouldBeCancelledBy);\n  }\n  cleanupAwaitingHandlers(handler) {\n    const shouldWait = otherHandler => {\n      return !otherHandler.awaiting && this.shouldHandlerWaitForOther(otherHandler, handler);\n    };\n    for (const otherHandler of this.awaitingHandlers) {\n      if (shouldWait(otherHandler)) {\n        this.cleanHandler(otherHandler);\n        this.awaitingHandlersTags.delete(otherHandler.handlerTag);\n      }\n    }\n    this.awaitingHandlers = this.awaitingHandlers.filter(otherHandler => this.awaitingHandlersTags.has(otherHandler.handlerTag));\n  }\n  onHandlerStateChange(handler, newState, oldState, sendIfDisabled) {\n    if (!handler.enabled && !sendIfDisabled) {\n      return;\n    }\n    this.handlingChangeSemaphore += 1;\n    if (this.isFinished(newState)) {\n      for (const otherHandler of this.awaitingHandlers) {\n        if (!this.shouldHandlerWaitForOther(otherHandler, handler) || !this.awaitingHandlersTags.has(otherHandler.handlerTag)) {\n          continue;\n        }\n        if (newState !== State.END) {\n          this.tryActivate(otherHandler);\n          continue;\n        }\n        otherHandler.cancel();\n        if (otherHandler.state === State.END) {\n          otherHandler.sendEvent(State.CANCELLED, State.BEGAN);\n        }\n        otherHandler.awaiting = false;\n      }\n    }\n    if (newState === State.ACTIVE) {\n      this.tryActivate(handler);\n    } else if (oldState === State.ACTIVE || oldState === State.END) {\n      if (handler.active) {\n        handler.sendEvent(newState, oldState);\n      } else if (oldState === State.ACTIVE && (newState === State.CANCELLED || newState === State.FAILED)) {\n        handler.sendEvent(newState, State.BEGAN);\n      }\n    } else if (oldState !== State.UNDETERMINED || newState !== State.CANCELLED) {\n      handler.sendEvent(newState, oldState);\n    }\n    this.handlingChangeSemaphore -= 1;\n    this.scheduleFinishedHandlersCleanup();\n    if (!this.awaitingHandlers.includes(handler)) {\n      this.cleanupAwaitingHandlers(handler);\n    }\n  }\n  makeActive(handler) {\n    const currentState = handler.state;\n    handler.active = true;\n    handler.shouldResetProgress = true;\n    handler.activationIndex = this.activationIndex++;\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      if (this.shouldHandlerBeCancelledBy(this.gestureHandlers[i], handler)) {\n        this.gestureHandlers[i].cancel();\n      }\n    }\n    for (const otherHandler of this.awaitingHandlers) {\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        otherHandler.awaiting = false;\n      }\n    }\n    handler.sendEvent(State.ACTIVE, State.BEGAN);\n    if (currentState !== State.ACTIVE) {\n      handler.sendEvent(State.END, State.ACTIVE);\n      if (currentState !== State.END) {\n        handler.sendEvent(State.UNDETERMINED, State.END);\n      }\n    }\n    if (!handler.awaiting) {\n      return;\n    }\n    handler.awaiting = false;\n    this.awaitingHandlers = this.awaitingHandlers.filter(otherHandler => otherHandler !== handler);\n  }\n  addAwaitingHandler(handler) {\n    if (this.awaitingHandlers.includes(handler)) {\n      return;\n    }\n    this.awaitingHandlers.push(handler);\n    this.awaitingHandlersTags.add(handler.handlerTag);\n    handler.awaiting = true;\n    handler.activationIndex = this.activationIndex++;\n  }\n  recordHandlerIfNotPresent(handler) {\n    if (this.gestureHandlers.includes(handler)) {\n      return;\n    }\n    this.gestureHandlers.push(handler);\n    handler.active = false;\n    handler.awaiting = false;\n    handler.activationIndex = Number.MAX_SAFE_INTEGER;\n  }\n  shouldHandlerWaitForOther(handler, otherHandler) {\n    return handler !== otherHandler && (handler.shouldWaitForHandlerFailure(otherHandler) || otherHandler.shouldRequireToWaitForFailure(handler));\n  }\n  canRunSimultaneously(gh1, gh2) {\n    return gh1 === gh2 || gh1.shouldRecognizeSimultaneously(gh2) || gh2.shouldRecognizeSimultaneously(gh1);\n  }\n  shouldHandlerBeCancelledBy(handler, otherHandler) {\n    if (this.canRunSimultaneously(handler, otherHandler)) {\n      return false;\n    }\n    if (handler.awaiting || handler.state === State.ACTIVE) {\n      return handler.shouldBeCancelledByOther(otherHandler);\n    }\n    const handlerPointers = handler.getTrackedPointersID();\n    const otherPointers = otherHandler.getTrackedPointersID();\n    if (!PointerTracker.shareCommonPointers(handlerPointers, otherPointers) && handler.delegate.view !== otherHandler.delegate.view) {\n      return this.checkOverlap(handler, otherHandler);\n    }\n    return true;\n  }\n  checkOverlap(handler, otherHandler) {\n    const isPointerWithinBothBounds = pointer => {\n      const point = handler.tracker.getLastAbsoluteCoords(pointer);\n      return point && handler.delegate.isPointerInBounds(point) && otherHandler.delegate.isPointerInBounds(point);\n    };\n    return handler.getTrackedPointersID().some(isPointerWithinBothBounds);\n  }\n  isFinished(state) {\n    return state === State.END || state === State.FAILED || state === State.CANCELLED;\n  }\n  cancelMouseAndPenGestures(currentHandler) {\n    this.gestureHandlers.forEach(handler => {\n      if (handler.pointerType !== PointerType.MOUSE && handler.pointerType !== PointerType.STYLUS) {\n        return;\n      }\n      if (handler !== currentHandler) {\n        handler.cancel();\n      } else {\n        handler.tracker.resetTracker();\n      }\n    });\n  }\n  static get instance() {\n    if (!GestureHandlerOrchestrator._instance) {\n      GestureHandlerOrchestrator._instance = new GestureHandlerOrchestrator();\n    }\n    return GestureHandlerOrchestrator._instance;\n  }\n}","map":{"version":3,"names":["PointerType","State","PointerTracker","GestureHandlerOrchestrator","gestureHandlers","awaitingHandlers","awaitingHandlersTags","Set","handlingChangeSemaphore","activationIndex","constructor","scheduleFinishedHandlersCleanup","cleanupFinishedHandlers","cleanHandler","handler","reset","active","awaiting","Number","MAX_VALUE","removeHandlerFromOrchestrator","indexInGestureHandlers","indexOf","indexInAwaitingHandlers","splice","delete","handlerTag","handlersToRemove","i","length","isFinished","state","add","filter","has","hasOtherHandlerToWaitFor","hasToWaitFor","otherHandler","shouldHandlerWaitForOther","some","shouldBeCancelledByFinishedHandler","shouldBeCancelled","END","tryActivate","cancel","addAwaitingHandler","handlerState","CANCELLED","FAILED","shouldActivate","makeActive","ACTIVE","fail","BEGAN","shouldBeCancelledBy","shouldHandlerBeCancelledBy","cleanupAwaitingHandlers","shouldWait","onHandlerStateChange","newState","oldState","sendIfDisabled","enabled","sendEvent","UNDETERMINED","includes","currentState","shouldResetProgress","push","recordHandlerIfNotPresent","MAX_SAFE_INTEGER","shouldWaitForHandlerFailure","shouldRequireToWaitForFailure","canRunSimultaneously","gh1","gh2","shouldRecognizeSimultaneously","shouldBeCancelledByOther","handlerPointers","getTrackedPointersID","otherPointers","shareCommonPointers","delegate","view","checkOverlap","isPointerWithinBothBounds","pointer","point","tracker","getLastAbsoluteCoords","isPointerInBounds","cancelMouseAndPenGestures","currentHandler","forEach","pointerType","MOUSE","STYLUS","resetTracker","instance","_instance"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\web\\tools\\GestureHandlerOrchestrator.ts"],"sourcesContent":["import { PointerType } from '../../PointerType';\nimport { State } from '../../State';\n\nimport type IGestureHandler from '../handlers/IGestureHandler';\nimport PointerTracker from './PointerTracker';\n\nexport default class GestureHandlerOrchestrator {\n  private static _instance: GestureHandlerOrchestrator;\n\n  private gestureHandlers: IGestureHandler[] = [];\n  private awaitingHandlers: IGestureHandler[] = [];\n  private awaitingHandlersTags: Set<number> = new Set();\n\n  private handlingChangeSemaphore = 0;\n  private activationIndex = 0;\n\n  // Private beacuse of Singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  private scheduleFinishedHandlersCleanup(): void {\n    if (this.handlingChangeSemaphore === 0) {\n      this.cleanupFinishedHandlers();\n    }\n  }\n\n  private cleanHandler(handler: IGestureHandler): void {\n    handler.reset();\n    handler.active = false;\n    handler.awaiting = false;\n    handler.activationIndex = Number.MAX_VALUE;\n  }\n\n  public removeHandlerFromOrchestrator(handler: IGestureHandler): void {\n    const indexInGestureHandlers = this.gestureHandlers.indexOf(handler);\n    const indexInAwaitingHandlers = this.awaitingHandlers.indexOf(handler);\n\n    if (indexInGestureHandlers >= 0) {\n      this.gestureHandlers.splice(indexInGestureHandlers, 1);\n    }\n\n    if (indexInAwaitingHandlers >= 0) {\n      this.awaitingHandlers.splice(indexInAwaitingHandlers, 1);\n      this.awaitingHandlersTags.delete(handler.handlerTag);\n    }\n  }\n\n  private cleanupFinishedHandlers(): void {\n    const handlersToRemove = new Set<IGestureHandler>();\n\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      const handler = this.gestureHandlers[i];\n\n      if (this.isFinished(handler.state) && !handler.awaiting) {\n        this.cleanHandler(handler);\n        handlersToRemove.add(handler);\n      }\n    }\n\n    this.gestureHandlers = this.gestureHandlers.filter(\n      (handler) => !handlersToRemove.has(handler)\n    );\n  }\n\n  private hasOtherHandlerToWaitFor(handler: IGestureHandler): boolean {\n    const hasToWaitFor = (otherHandler: IGestureHandler) => {\n      return (\n        !this.isFinished(otherHandler.state) &&\n        this.shouldHandlerWaitForOther(handler, otherHandler)\n      );\n    };\n\n    return this.gestureHandlers.some(hasToWaitFor);\n  }\n\n  private shouldBeCancelledByFinishedHandler(\n    handler: IGestureHandler\n  ): boolean {\n    const shouldBeCancelled = (otherHandler: IGestureHandler) => {\n      return (\n        this.shouldHandlerWaitForOther(handler, otherHandler) &&\n        otherHandler.state === State.END\n      );\n    };\n\n    return this.gestureHandlers.some(shouldBeCancelled);\n  }\n\n  private tryActivate(handler: IGestureHandler): void {\n    if (this.shouldBeCancelledByFinishedHandler(handler)) {\n      handler.cancel();\n      return;\n    }\n\n    if (this.hasOtherHandlerToWaitFor(handler)) {\n      this.addAwaitingHandler(handler);\n      return;\n    }\n\n    const handlerState = handler.state;\n\n    if (handlerState === State.CANCELLED || handlerState === State.FAILED) {\n      return;\n    }\n\n    if (this.shouldActivate(handler)) {\n      this.makeActive(handler);\n      return;\n    }\n\n    if (handlerState === State.ACTIVE) {\n      handler.fail();\n      return;\n    }\n\n    if (handlerState === State.BEGAN) {\n      handler.cancel();\n    }\n  }\n\n  private shouldActivate(handler: IGestureHandler): boolean {\n    const shouldBeCancelledBy = (otherHandler: IGestureHandler) => {\n      return this.shouldHandlerBeCancelledBy(handler, otherHandler);\n    };\n\n    return !this.gestureHandlers.some(shouldBeCancelledBy);\n  }\n\n  private cleanupAwaitingHandlers(handler: IGestureHandler): void {\n    const shouldWait = (otherHandler: IGestureHandler) => {\n      return (\n        !otherHandler.awaiting &&\n        this.shouldHandlerWaitForOther(otherHandler, handler)\n      );\n    };\n\n    for (const otherHandler of this.awaitingHandlers) {\n      if (shouldWait(otherHandler)) {\n        this.cleanHandler(otherHandler);\n        this.awaitingHandlersTags.delete(otherHandler.handlerTag);\n      }\n    }\n\n    this.awaitingHandlers = this.awaitingHandlers.filter((otherHandler) =>\n      this.awaitingHandlersTags.has(otherHandler.handlerTag)\n    );\n  }\n\n  public onHandlerStateChange(\n    handler: IGestureHandler,\n    newState: State,\n    oldState: State,\n    sendIfDisabled?: boolean\n  ): void {\n    if (!handler.enabled && !sendIfDisabled) {\n      return;\n    }\n\n    this.handlingChangeSemaphore += 1;\n\n    if (this.isFinished(newState)) {\n      for (const otherHandler of this.awaitingHandlers) {\n        if (\n          !this.shouldHandlerWaitForOther(otherHandler, handler) ||\n          !this.awaitingHandlersTags.has(otherHandler.handlerTag)\n        ) {\n          continue;\n        }\n\n        if (newState !== State.END) {\n          this.tryActivate(otherHandler);\n          continue;\n        }\n\n        otherHandler.cancel();\n\n        if (otherHandler.state === State.END) {\n          // Handle edge case, where discrete gestures end immediately after activation thus\n          // their state is set to END and when the gesture they are waiting for activates they\n          // should be cancelled, however `cancel` was never sent as gestures were already in the END state.\n          // Send synthetic BEGAN -> CANCELLED to properly handle JS logic\n          otherHandler.sendEvent(State.CANCELLED, State.BEGAN);\n        }\n\n        otherHandler.awaiting = false;\n      }\n    }\n\n    if (newState === State.ACTIVE) {\n      this.tryActivate(handler);\n    } else if (oldState === State.ACTIVE || oldState === State.END) {\n      if (handler.active) {\n        handler.sendEvent(newState, oldState);\n      } else if (\n        oldState === State.ACTIVE &&\n        (newState === State.CANCELLED || newState === State.FAILED)\n      ) {\n        handler.sendEvent(newState, State.BEGAN);\n      }\n    } else if (\n      oldState !== State.UNDETERMINED ||\n      newState !== State.CANCELLED\n    ) {\n      handler.sendEvent(newState, oldState);\n    }\n\n    this.handlingChangeSemaphore -= 1;\n\n    this.scheduleFinishedHandlersCleanup();\n\n    if (!this.awaitingHandlers.includes(handler)) {\n      this.cleanupAwaitingHandlers(handler);\n    }\n  }\n\n  private makeActive(handler: IGestureHandler): void {\n    const currentState = handler.state;\n\n    handler.active = true;\n    handler.shouldResetProgress = true;\n    handler.activationIndex = this.activationIndex++;\n\n    for (let i = this.gestureHandlers.length - 1; i >= 0; --i) {\n      if (this.shouldHandlerBeCancelledBy(this.gestureHandlers[i], handler)) {\n        this.gestureHandlers[i].cancel();\n      }\n    }\n\n    for (const otherHandler of this.awaitingHandlers) {\n      if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n        otherHandler.awaiting = false;\n      }\n    }\n\n    handler.sendEvent(State.ACTIVE, State.BEGAN);\n\n    if (currentState !== State.ACTIVE) {\n      handler.sendEvent(State.END, State.ACTIVE);\n      if (currentState !== State.END) {\n        handler.sendEvent(State.UNDETERMINED, State.END);\n      }\n    }\n\n    if (!handler.awaiting) {\n      return;\n    }\n\n    handler.awaiting = false;\n\n    this.awaitingHandlers = this.awaitingHandlers.filter(\n      (otherHandler) => otherHandler !== handler\n    );\n  }\n\n  private addAwaitingHandler(handler: IGestureHandler): void {\n    if (this.awaitingHandlers.includes(handler)) {\n      return;\n    }\n\n    this.awaitingHandlers.push(handler);\n    this.awaitingHandlersTags.add(handler.handlerTag);\n\n    handler.awaiting = true;\n    handler.activationIndex = this.activationIndex++;\n  }\n\n  public recordHandlerIfNotPresent(handler: IGestureHandler): void {\n    if (this.gestureHandlers.includes(handler)) {\n      return;\n    }\n\n    this.gestureHandlers.push(handler);\n\n    handler.active = false;\n    handler.awaiting = false;\n    handler.activationIndex = Number.MAX_SAFE_INTEGER;\n  }\n\n  private shouldHandlerWaitForOther(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    return (\n      handler !== otherHandler &&\n      (handler.shouldWaitForHandlerFailure(otherHandler) ||\n        otherHandler.shouldRequireToWaitForFailure(handler))\n    );\n  }\n\n  private canRunSimultaneously(\n    gh1: IGestureHandler,\n    gh2: IGestureHandler\n  ): boolean {\n    return (\n      gh1 === gh2 ||\n      gh1.shouldRecognizeSimultaneously(gh2) ||\n      gh2.shouldRecognizeSimultaneously(gh1)\n    );\n  }\n\n  private shouldHandlerBeCancelledBy(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    if (this.canRunSimultaneously(handler, otherHandler)) {\n      return false;\n    }\n\n    if (handler.awaiting || handler.state === State.ACTIVE) {\n      return handler.shouldBeCancelledByOther(otherHandler);\n    }\n\n    const handlerPointers: number[] = handler.getTrackedPointersID();\n    const otherPointers: number[] = otherHandler.getTrackedPointersID();\n\n    if (\n      !PointerTracker.shareCommonPointers(handlerPointers, otherPointers) &&\n      handler.delegate.view !== otherHandler.delegate.view\n    ) {\n      return this.checkOverlap(handler, otherHandler);\n    }\n\n    return true;\n  }\n\n  private checkOverlap(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    // If handlers don't have common pointers, default return value is false.\n    // However, if at least on pointer overlaps with both handlers, we return true\n    // This solves issue in overlapping parents example\n\n    // TODO: Find better way to handle that issue, for example by activation order and handler cancelling\n\n    const isPointerWithinBothBounds = (pointer: number) => {\n      const point = handler.tracker.getLastAbsoluteCoords(pointer);\n\n      return (\n        point &&\n        handler.delegate.isPointerInBounds(point) &&\n        otherHandler.delegate.isPointerInBounds(point)\n      );\n    };\n\n    return handler.getTrackedPointersID().some(isPointerWithinBothBounds);\n  }\n\n  private isFinished(state: State): boolean {\n    return (\n      state === State.END || state === State.FAILED || state === State.CANCELLED\n    );\n  }\n\n  // This function is called when handler receives touchdown event\n  // If handler is using mouse or pen as a pointer and any handler receives touch event,\n  // mouse/pen event dissappears - it doesn't send onPointerCancel nor onPointerUp (and others)\n  // This became a problem because handler was left at active state without any signal to end or fail\n  // To handle this, when new touch event is received, we loop through active handlers and check which type of\n  // pointer they're using. If there are any handler with mouse/pen as a pointer, we cancel them\n  public cancelMouseAndPenGestures(currentHandler: IGestureHandler): void {\n    this.gestureHandlers.forEach((handler: IGestureHandler) => {\n      if (\n        handler.pointerType !== PointerType.MOUSE &&\n        handler.pointerType !== PointerType.STYLUS\n      ) {\n        return;\n      }\n\n      if (handler !== currentHandler) {\n        handler.cancel();\n      } else {\n        // Handler that received touch event should have its pointer tracker reset\n        // This allows handler to smoothly change from mouse/pen to touch\n        // The drawback is, that when we try to use mouse/pen one more time, it doesn't send onPointerDown at the first time\n        // so it is required to click two times to get handler to work\n        //\n        // However, handler will receive manually created onPointerEnter that is triggered in EventManager in onPointerMove method.\n        // There may be possibility to use that fact to make handler respond properly to first mouse click\n        handler.tracker.resetTracker();\n      }\n    });\n  }\n\n  public static get instance(): GestureHandlerOrchestrator {\n    if (!GestureHandlerOrchestrator._instance) {\n      GestureHandlerOrchestrator._instance = new GestureHandlerOrchestrator();\n    }\n\n    return GestureHandlerOrchestrator._instance;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}