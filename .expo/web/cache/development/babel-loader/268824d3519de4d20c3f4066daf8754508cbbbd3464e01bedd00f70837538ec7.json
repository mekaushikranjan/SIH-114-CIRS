{"ast":null,"code":"import AsyncStorage from '@react-native-async-storage/async-storage';\nconst TOKEN_KEY = 'auth_token';\nconst USER_KEY = 'auth_user';\nexport const tokenStorage = {\n  async storeAuthData(token, user) {\n    try {\n      await AsyncStorage.multiSet([[TOKEN_KEY, token], [USER_KEY, JSON.stringify(user)]]);\n      console.log('Auth data stored successfully');\n    } catch (error) {\n      console.error('Error storing auth data:', error);\n      throw error;\n    }\n  },\n  async getToken() {\n    try {\n      const token = await AsyncStorage.getItem(TOKEN_KEY);\n      return token;\n    } catch (error) {\n      console.error('Error getting token:', error);\n      return null;\n    }\n  },\n  async getUser() {\n    try {\n      const userStr = await AsyncStorage.getItem(USER_KEY);\n      if (userStr) {\n        return JSON.parse(userStr);\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting user data:', error);\n      return null;\n    }\n  },\n  async getAuthData() {\n    try {\n      const [token, userStr] = await AsyncStorage.multiGet([TOKEN_KEY, USER_KEY]);\n      return {\n        token: token[1],\n        user: userStr[1] ? JSON.parse(userStr[1]) : null\n      };\n    } catch (error) {\n      console.error('Error getting auth data:', error);\n      return {\n        token: null,\n        user: null\n      };\n    }\n  },\n  async clearAuthData() {\n    try {\n      await AsyncStorage.multiRemove([TOKEN_KEY, USER_KEY]);\n      console.log('Auth data cleared successfully');\n    } catch (error) {\n      console.error('Error clearing auth data:', error);\n      throw error;\n    }\n  },\n  async isLoggedIn() {\n    try {\n      const token = await AsyncStorage.getItem(TOKEN_KEY);\n      return token !== null;\n    } catch (error) {\n      console.error('Error checking login status:', error);\n      return false;\n    }\n  },\n  async forceAuthReset() {\n    try {\n      console.log('ðŸ”„ Forcing complete authentication reset...');\n      const keysToRemove = [TOKEN_KEY, USER_KEY, 'firebase_user', 'auth_state', 'user_preferences', 'worker_data', 'fallback_token', 'mock_token'];\n      await AsyncStorage.multiRemove(keysToRemove);\n      console.log('âœ… Complete auth reset successful');\n    } catch (error) {\n      console.error('Error during force auth reset:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["AsyncStorage","TOKEN_KEY","USER_KEY","tokenStorage","storeAuthData","token","user","multiSet","JSON","stringify","console","log","error","getToken","getItem","getUser","userStr","parse","getAuthData","multiGet","clearAuthData","multiRemove","isLoggedIn","forceAuthReset","keysToRemove"],"sources":["C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/src/utils/tokenStorage.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\n\nconst TOKEN_KEY = 'auth_token';\nconst USER_KEY = 'auth_user';\n\nexport interface StoredUser {\n  id: string;\n  name: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  role: 'citizen' | 'admin' | 'worker';\n}\n\nexport const tokenStorage = {\n  // Store token and user data\n  async storeAuthData(token: string, user: StoredUser): Promise<void> {\n    try {\n      await AsyncStorage.multiSet([\n        [TOKEN_KEY, token],\n        [USER_KEY, JSON.stringify(user)]\n      ]);\n      console.log('Auth data stored successfully');\n    } catch (error) {\n      console.error('Error storing auth data:', error);\n      throw error;\n    }\n  },\n\n  // Get stored token\n  async getToken(): Promise<string | null> {\n    try {\n      const token = await AsyncStorage.getItem(TOKEN_KEY);\n      return token;\n    } catch (error) {\n      console.error('Error getting token:', error);\n      return null;\n    }\n  },\n\n  // Get stored user data\n  async getUser(): Promise<StoredUser | null> {\n    try {\n      const userStr = await AsyncStorage.getItem(USER_KEY);\n      if (userStr) {\n        return JSON.parse(userStr);\n      }\n      return null;\n    } catch (error) {\n      console.error('Error getting user data:', error);\n      return null;\n    }\n  },\n\n  // Get both token and user data\n  async getAuthData(): Promise<{ token: string | null; user: StoredUser | null }> {\n    try {\n      const [token, userStr] = await AsyncStorage.multiGet([TOKEN_KEY, USER_KEY]);\n      \n      return {\n        token: token[1],\n        user: userStr[1] ? JSON.parse(userStr[1]) : null\n      };\n    } catch (error) {\n      console.error('Error getting auth data:', error);\n      return { token: null, user: null };\n    }\n  },\n\n  // Clear all auth data (for logout)\n  async clearAuthData(): Promise<void> {\n    try {\n      await AsyncStorage.multiRemove([TOKEN_KEY, USER_KEY]);\n      console.log('Auth data cleared successfully');\n    } catch (error) {\n      console.error('Error clearing auth data:', error);\n      throw error;\n    }\n  },\n\n  // Check if user is logged in\n  async isLoggedIn(): Promise<boolean> {\n    try {\n      const token = await AsyncStorage.getItem(TOKEN_KEY);\n      return token !== null;\n    } catch (error) {\n      console.error('Error checking login status:', error);\n      return false;\n    }\n  },\n\n  // Force complete auth reset (for debugging/fixing auth issues)\n  async forceAuthReset(): Promise<void> {\n    try {\n      console.log('ðŸ”„ Forcing complete authentication reset...');\n      \n      // Clear all possible auth-related keys\n      const keysToRemove = [\n        TOKEN_KEY,\n        USER_KEY,\n        'firebase_user',\n        'auth_state',\n        'user_preferences',\n        'worker_data',\n        'fallback_token',\n        'mock_token'\n      ];\n      \n      await AsyncStorage.multiRemove(keysToRemove);\n      console.log('âœ… Complete auth reset successful');\n    } catch (error) {\n      console.error('Error during force auth reset:', error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}