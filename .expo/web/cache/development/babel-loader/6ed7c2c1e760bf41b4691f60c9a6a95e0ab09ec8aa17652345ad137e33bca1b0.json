{"ast":null,"code":"\"use strict\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"enabled\"];\nimport Hammer from '@egjs/hammerjs';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\nlet gestureInstances = 0;\nclass GestureHandler {\n  isGestureRunning = false;\n  view = null;\n  hasGestureFailed = false;\n  hammer = null;\n  initialRotation = null;\n  config = {};\n  previousState = State.UNDETERMINED;\n  pendingGestures = {};\n  oldState = State.UNDETERMINED;\n  lastSentState = null;\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n  get isNative() {\n    return false;\n  }\n  get isDiscrete() {\n    return false;\n  }\n  get shouldEnableGestureOnSetup() {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n  getConfig() {\n    return this.config;\n  }\n  onWaitingEnded(_gesture) {}\n  removePendingGesture(id) {\n    delete this.pendingGestures[id];\n  }\n  addPendingGesture(gesture) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n  isGestureEnabledForEvent(_config, _recognizer, _event) {\n    return {\n      success: true\n    };\n  }\n  get NativeGestureClass() {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n  updateHasCustomActivationCriteria(_config) {\n    return true;\n  }\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n  updateGestureConfig(_ref) {\n    let {\n        enabled = true\n      } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    this.clearSelfAsPending();\n    this.config = this.ensureConfig(Object.assign({\n      enabled\n    }, props));\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n  destroy = () => {\n    this.clearSelfAsPending();\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n  isPointInView = ({\n    x,\n    y\n  }) => {\n    const rect = this.view.getBoundingClientRect();\n    const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n  getState(type) {\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n  transformEventData(event) {\n    const {\n      eventType,\n      maxPointers: numberOfPointers\n    } = event;\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY\n    });\n    const state = this.getState(eventType);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n    return {\n      nativeEvent: Object.assign({\n        numberOfPointers,\n        state,\n        pointerInside\n      }, this.transformNativeEvent(event), {\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n      }),\n      timeStamp: Date.now()\n    };\n  }\n  transformNativeEvent(_event) {\n    return {};\n  }\n  sendEvent = nativeEvent => {\n    const {\n      onGestureHandlerEvent,\n      onGestureHandlerStateChange\n    } = this.propsRef.current;\n    const event = this.transformEventData(nativeEvent);\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n  cancelPendingGestures(event) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n  onGestureEnded(event) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n  forceInvalidate(event) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n  cancelEvent(event) {\n    this.notifyPendingGestures();\n    this.sendEvent(Object.assign({}, event, {\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true\n    }));\n    this.onGestureEnded(event);\n  }\n  onRawEvent({\n    isFirst\n  }) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n  shouldUseTouchEvents(config) {\n    return config.simultaneousHandlers?.some(handler => handler.isNative) ?? false;\n  }\n  setView(ref, propsRef) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n    const SUPPORTS_TOUCH = 'ontouchstart' in window;\n    this.propsRef = propsRef;\n    this.ref = ref;\n    this.view = findNodeHandle(ref);\n    this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new Hammer.Manager(this.view, {\n      inputClass: Hammer.TouchInput\n    }) : new Hammer.Manager(this.view);\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n    const {\n      NativeGestureClass\n    } = this;\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n    this.hammer.on('hammer.input', ev => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n      this.onRawEvent(ev);\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n    this.setupEvents();\n    this.sync();\n  }\n  setupEvents() {\n    if (!this.isDiscrete) {\n      this.hammer.on(`${this.name}start`, event => this.onStart(event));\n      this.hammer.on(`${this.name}end ${this.name}cancel`, event => {\n        this.onGestureEnded(event);\n      });\n    }\n    this.hammer.on(this.name, ev => this.onGestureActivated(ev));\n  }\n  onStart({\n    deltaX,\n    deltaY,\n    rotation\n  }) {\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n  onGestureActivated(ev) {\n    this.sendEvent(ev);\n  }\n  onSuccess() {}\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      const stillWaiting = this.config.waitFor.filter(({\n        hasGestureFailed\n      }) => hasGestureFailed === false);\n      return stillWaiting;\n    }\n    return [];\n  }\n  getHammerConfig() {\n    const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n    return {\n      pointers\n    };\n  }\n  sync = () => {\n    const gesture = this.hammer.get(this.name);\n    if (!gesture) return;\n    const enable = (recognizer, inputData) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n      if (!inputData || !recognizer.options || typeof inputData.maxPointers === 'undefined') {\n        return this.shouldEnableGestureOnSetup;\n      }\n      if (this.hasGestureFailed) {\n        return false;\n      }\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        this._stillWaiting = this._getPendingGestures();\n        if (this._stillWaiting.length) {\n          for (const gesture of this._stillWaiting) {\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          return false;\n        }\n      }\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n      const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation;\n      const {\n        success,\n        failed\n      } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, Object.assign({}, inputData, {\n        deltaRotation\n      }));\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n    const params = this.getHammerConfig();\n    gesture.set(Object.assign({}, params, {\n      enable\n    }));\n  };\n  simulateCancelEvent(_inputData) {}\n  ensureConfig(config) {\n    const props = Object.assign({}, config);\n    if ('minDist' in config) {\n      props.minDist = config.minDist;\n      props.minDistSq = props.minDist * props.minDist;\n    }\n    if ('minVelocity' in config) {\n      props.minVelocity = config.minVelocity;\n      props.minVelocitySq = props.minVelocity * props.minVelocity;\n    }\n    if ('maxDist' in config) {\n      props.maxDist = config.maxDist;\n      props.maxDistSq = config.maxDist * config.maxDist;\n    }\n    if ('waitFor' in config) {\n      props.waitFor = asArray(config.waitFor).map(({\n        handlerTag\n      }) => NodeManager.getHandler(handlerTag)).filter(v => v);\n    } else {\n      props.waitFor = null;\n    }\n    if ('simultaneousHandlers' in config) {\n      const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n      props.simultaneousHandlers = asArray(config.simultaneousHandlers).map(handler => {\n        if (typeof handler === 'number') {\n          return NodeManager.getHandler(handler);\n        } else {\n          return NodeManager.getHandler(handler.handlerTag);\n        }\n      }).filter(v => v);\n      if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n        ghQueueMicrotask(() => {\n          this.destroy();\n          this.setView(this.ref, this.propsRef);\n        });\n      }\n    } else {\n      props.simultaneousHandlers = null;\n    }\n    const configProps = ['minPointers', 'maxPointers', 'minDist', 'maxDist', 'maxDistSq', 'minVelocitySq', 'minDistSq', 'minVelocity', 'failOffsetXStart', 'failOffsetYStart', 'failOffsetXEnd', 'failOffsetYEnd', 'activeOffsetXStart', 'activeOffsetXEnd', 'activeOffsetYStart', 'activeOffsetYEnd'];\n    configProps.forEach(prop => {\n      if (typeof props[prop] === 'undefined') {\n        props[prop] = Number.NaN;\n      }\n    });\n    return props;\n  }\n}\nfunction invokeNullableMethod(method, event) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      if ('__getHandler' in method && typeof method.__getHandler === 'function') {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const {\n            argMapping\n          } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  value.setValue(nativeValue);\n                } else {\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\nfunction asArray(value) {\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\nexport default GestureHandler;","map":{"version":3,"names":["Hammer","findNodeHandle","State","EventMap","NodeManager","ghQueueMicrotask","gestureInstances","GestureHandler","isGestureRunning","view","hasGestureFailed","hammer","initialRotation","config","previousState","UNDETERMINED","pendingGestures","oldState","lastSentState","id","name","gestureInstance","isNative","isDiscrete","shouldEnableGestureOnSetup","Error","constructor","hasCustomActivationCriteria","getConfig","onWaitingEnded","_gesture","removePendingGesture","addPendingGesture","gesture","isGestureEnabledForEvent","_config","_recognizer","_event","success","NativeGestureClass","updateHasCustomActivationCriteria","clearSelfAsPending","Array","isArray","waitFor","updateGestureConfig","_ref","enabled","props","_objectWithoutPropertiesLoose","_excluded","ensureConfig","Object","assign","sync","destroy","stop","isPointInView","x","y","rect","getBoundingClientRect","pointerInside","left","right","top","bottom","getState","type","transformEventData","event","eventType","maxPointers","numberOfPointers","changedTouch","changedPointers","clientX","clientY","state","nativeEvent","transformNativeEvent","handlerTag","target","ref","undefined","timeStamp","Date","now","sendEvent","onGestureHandlerEvent","onGestureHandlerStateChange","propsRef","current","invokeNullableMethod","cancelPendingGestures","values","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","INPUT_CANCEL","isFinal","onRawEvent","isFirst","shouldUseTouchEvents","simultaneousHandlers","some","handler","setView","SUPPORTS_TOUCH","window","Manager","inputClass","TouchInput","getHammerConfig","add","on","ev","rotation","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","onSuccess","_getPendingGestures","length","stillWaiting","filter","pointers","minPointers","get","enable","recognizer","inputData","options","_stillWaiting","deltaRotation","failed","simulateCancelEvent","params","set","_inputData","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","getHandler","v","configProps","forEach","prop","Number","NaN","method","__getHandler","argMapping","__nodeConfig","index","key","value","entries","nativeValue","setValue"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\web_hammer\\GestureHandler.ts"],"sourcesContent":["/* eslint-disable @eslint-community/eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n  simultaneousHandlers: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n  // here to use instanceof would cause import cycle\n  get isNative() {\n    return false;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = this.ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        // send oldState only when the state was changed, or is different than ACTIVE\n        // GestureDetector relies on the presence of `oldState` to differentiate between\n        // update events and state change events\n        oldState:\n          state !== this.previousState || state != 4\n            ? this.oldState\n            : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange } =\n      this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  shouldUseTouchEvents(config: Config) {\n    return (\n      config.simultaneousHandlers?.some((handler) => handler.isNative) ?? false\n    );\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n    const SUPPORTS_TOUCH = 'ontouchstart' in window;\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    // @ts-ignore\n    this.view = findNodeHandle(ref);\n\n    // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n    // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n    // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n    this.hammer =\n      SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config)\n        ? new Hammer.Manager(this.view as any, {\n            inputClass: Hammer.TouchInput,\n          })\n        : new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev as unknown as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart(event as unknown as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded(event as unknown as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated(ev as unknown as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n\n  // Validate the props\n  ensureConfig(config: Config): Required<Config> {\n    const props = { ...config };\n\n    // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n    if ('minDist' in config) {\n      props.minDist = config.minDist;\n      props.minDistSq = props.minDist! * props.minDist!;\n    }\n    if ('minVelocity' in config) {\n      props.minVelocity = config.minVelocity;\n      props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n    }\n    if ('maxDist' in config) {\n      props.maxDist = config.maxDist;\n      props.maxDistSq = config.maxDist! * config.maxDist!;\n    }\n    if ('waitFor' in config) {\n      props.waitFor = asArray(config.waitFor)\n        .map(({ handlerTag }: { handlerTag: number }) =>\n          NodeManager.getHandler(handlerTag)\n        )\n        .filter((v) => v);\n    } else {\n      props.waitFor = null;\n    }\n    if ('simultaneousHandlers' in config) {\n      const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n      props.simultaneousHandlers = asArray(config.simultaneousHandlers)\n        .map((handler: number | GestureHandler) => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        })\n        .filter((v) => v);\n\n      if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n        ghQueueMicrotask(() => {\n          // if the undelying event API needs to be changed, we need to unmount and mount\n          // the hammer instance again.\n          this.destroy();\n          this.setView(this.ref, this.propsRef);\n        });\n      }\n    } else {\n      props.simultaneousHandlers = null;\n    }\n\n    const configProps = [\n      'minPointers',\n      'maxPointers',\n      'minDist',\n      'maxDist',\n      'maxDistSq',\n      'minVelocitySq',\n      'minDistSq',\n      'minVelocity',\n      'failOffsetXStart',\n      'failOffsetYStart',\n      'failOffsetXEnd',\n      'failOffsetYEnd',\n      'activeOffsetXStart',\n      'activeOffsetXEnd',\n      'activeOffsetYStart',\n      'activeOffsetYEnd',\n    ] as const;\n    configProps.forEach((prop: (typeof configProps)[number]) => {\n      if (typeof props[prop] === 'undefined') {\n        props[prop] = Number.NaN;\n      }\n    });\n    return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n  }\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}