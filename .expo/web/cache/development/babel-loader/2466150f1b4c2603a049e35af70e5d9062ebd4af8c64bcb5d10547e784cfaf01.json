{"ast":null,"code":"\"use strict\";\n\nimport { BaseGesture, Gesture } from './gesture';\nfunction extendRelation(currentRelation, extendWith) {\n  if (currentRelation === undefined) {\n    return [...extendWith];\n  } else {\n    return [...currentRelation, ...extendWith];\n  }\n}\nexport class ComposedGesture extends Gesture {\n  gestures = [];\n  simultaneousGestures = [];\n  requireGesturesToFail = [];\n  constructor(...gestures) {\n    super();\n    this.gestures = gestures;\n  }\n  prepareSingleGesture(gesture, simultaneousGestures, requireGesturesToFail) {\n    if (gesture instanceof BaseGesture) {\n      const newConfig = Object.assign({}, gesture.config);\n      newConfig.simultaneousWith = extendRelation(newConfig.simultaneousWith, simultaneousGestures);\n      newConfig.requireToFail = extendRelation(newConfig.requireToFail, requireGesturesToFail);\n      gesture.config = newConfig;\n    } else if (gesture instanceof ComposedGesture) {\n      gesture.simultaneousGestures = simultaneousGestures;\n      gesture.requireGesturesToFail = requireGesturesToFail;\n      gesture.prepare();\n    }\n  }\n  prepare() {\n    for (const gesture of this.gestures) {\n      this.prepareSingleGesture(gesture, this.simultaneousGestures, this.requireGesturesToFail);\n    }\n  }\n  initialize() {\n    for (const gesture of this.gestures) {\n      gesture.initialize();\n    }\n  }\n  toGestureArray() {\n    return this.gestures.flatMap(gesture => gesture.toGestureArray());\n  }\n}\nexport class SimultaneousGesture extends ComposedGesture {\n  prepare() {\n    const simultaneousArrays = this.gestures.map(gesture => this.gestures.filter(x => x !== gesture).flatMap(x => x.toGestureArray()));\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(this.gestures[i], simultaneousArrays[i], this.requireGesturesToFail);\n    }\n  }\n}\nexport class ExclusiveGesture extends ComposedGesture {\n  prepare() {\n    const gestureArrays = this.gestures.map(gesture => gesture.toGestureArray());\n    let requireToFail = [];\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(this.gestures[i], this.simultaneousGestures, this.requireGesturesToFail.concat(requireToFail));\n      requireToFail = requireToFail.concat(gestureArrays[i]);\n    }\n  }\n}","map":{"version":3,"names":["BaseGesture","Gesture","extendRelation","currentRelation","extendWith","undefined","ComposedGesture","gestures","simultaneousGestures","requireGesturesToFail","constructor","prepareSingleGesture","gesture","newConfig","Object","assign","config","simultaneousWith","requireToFail","prepare","initialize","toGestureArray","flatMap","SimultaneousGesture","simultaneousArrays","map","filter","x","i","length","ExclusiveGesture","gestureArrays","concat"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\gestureComposition.ts"],"sourcesContent":["import { BaseGesture, Gesture, GestureRef, GestureType } from './gesture';\n\nfunction extendRelation(\n  currentRelation: GestureRef[] | undefined,\n  extendWith: GestureType[]\n) {\n  if (currentRelation === undefined) {\n    return [...extendWith];\n  } else {\n    return [...currentRelation, ...extendWith];\n  }\n}\n\nexport class ComposedGesture extends Gesture {\n  protected gestures: Gesture[] = [];\n  protected simultaneousGestures: GestureType[] = [];\n  protected requireGesturesToFail: GestureType[] = [];\n\n  constructor(...gestures: Gesture[]) {\n    super();\n    this.gestures = gestures;\n  }\n\n  protected prepareSingleGesture(\n    gesture: Gesture,\n    simultaneousGestures: GestureType[],\n    requireGesturesToFail: GestureType[]\n  ) {\n    if (gesture instanceof BaseGesture) {\n      const newConfig = { ...gesture.config };\n\n      // No need to extend `blocksHandlers` here, because it's not changed in composition.\n      // The same effect is achieved by reversing the order of 2 gestures in `Exclusive`\n      newConfig.simultaneousWith = extendRelation(\n        newConfig.simultaneousWith,\n        simultaneousGestures\n      );\n      newConfig.requireToFail = extendRelation(\n        newConfig.requireToFail,\n        requireGesturesToFail\n      );\n\n      gesture.config = newConfig;\n    } else if (gesture instanceof ComposedGesture) {\n      gesture.simultaneousGestures = simultaneousGestures;\n      gesture.requireGesturesToFail = requireGesturesToFail;\n      gesture.prepare();\n    }\n  }\n\n  prepare() {\n    for (const gesture of this.gestures) {\n      this.prepareSingleGesture(\n        gesture,\n        this.simultaneousGestures,\n        this.requireGesturesToFail\n      );\n    }\n  }\n\n  initialize() {\n    for (const gesture of this.gestures) {\n      gesture.initialize();\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return this.gestures.flatMap((gesture) => gesture.toGestureArray());\n  }\n}\n\nexport class SimultaneousGesture extends ComposedGesture {\n  prepare() {\n    // This piece of magic works something like this:\n    // for every gesture in the array\n    const simultaneousArrays = this.gestures.map((gesture) =>\n      // we take the array it's in\n      this.gestures\n        // and make a copy without it\n        .filter((x) => x !== gesture)\n        // then we flatmap the result to get list of raw (not composed) gestures\n        // this way we don't make the gestures simultaneous with themselves, which is\n        // important when the gesture is `ExclusiveGesture` - we don't want to make\n        // exclusive gestures simultaneous\n        .flatMap((x) => x.toGestureArray())\n    );\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        simultaneousArrays[i],\n        this.requireGesturesToFail\n      );\n    }\n  }\n}\n\nexport class ExclusiveGesture extends ComposedGesture {\n  prepare() {\n    // Transforms the array of gestures into array of grouped raw (not composed) gestures\n    // i.e. [gesture1, gesture2, ComposedGesture(gesture3, gesture4)] -> [[gesture1], [gesture2], [gesture3, gesture4]]\n    const gestureArrays = this.gestures.map((gesture) =>\n      gesture.toGestureArray()\n    );\n\n    let requireToFail: GestureType[] = [];\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        this.simultaneousGestures,\n        this.requireGesturesToFail.concat(requireToFail)\n      );\n\n      // Every group gets to wait for all groups before it\n      requireToFail = requireToFail.concat(gestureArrays[i]);\n    }\n  }\n}\n\nexport type ComposedGestureType = InstanceType<typeof ComposedGesture>;\nexport type RaceGestureType = ComposedGestureType;\nexport type SimultaneousGestureType = InstanceType<typeof SimultaneousGesture>;\nexport type ExclusiveGestureType = InstanceType<typeof ExclusiveGesture>;\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,OAAO,QAAiC,WAAW;AAEzE,SAASC,cAAcA,CACrBC,eAAyC,EACzCC,UAAyB,EACzB;EACA,IAAID,eAAe,KAAKE,SAAS,EAAE;IACjC,OAAO,CAAC,GAAGD,UAAU,CAAC;EACxB,CAAC,MAAM;IACL,OAAO,CAAC,GAAGD,eAAe,EAAE,GAAGC,UAAU,CAAC;EAC5C;AACF;AAEA,OAAO,MAAME,eAAe,SAASL,OAAO,CAAC;EACjCM,QAAQ,GAAc,EAAE;EACxBC,oBAAoB,GAAkB,EAAE;EACxCC,qBAAqB,GAAkB,EAAE;EAEnDC,WAAWA,CAAC,GAAGH,QAAmB,EAAE;IAClC,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;EAEUI,oBAAoBA,CAC5BC,OAAgB,EAChBJ,oBAAmC,EACnCC,qBAAoC,EACpC;IACA,IAAIG,OAAO,YAAYZ,WAAW,EAAE;MAClC,MAAMa,SAAS,GAAAC,MAAA,CAAAC,MAAA,KAAQH,OAAO,CAACI,MAAA,CAAQ;MAIvCH,SAAS,CAACI,gBAAgB,GAAGf,cAAc,CACzCW,SAAS,CAACI,gBAAgB,EAC1BT,oBACF,CAAC;MACDK,SAAS,CAACK,aAAa,GAAGhB,cAAc,CACtCW,SAAS,CAACK,aAAa,EACvBT,qBACF,CAAC;MAEDG,OAAO,CAACI,MAAM,GAAGH,SAAS;IAC5B,CAAC,MAAM,IAAID,OAAO,YAAYN,eAAe,EAAE;MAC7CM,OAAO,CAACJ,oBAAoB,GAAGA,oBAAoB;MACnDI,OAAO,CAACH,qBAAqB,GAAGA,qBAAqB;MACrDG,OAAO,CAACO,OAAO,CAAC,CAAC;IACnB;EACF;EAEAA,OAAOA,CAAA,EAAG;IACR,KAAK,MAAMP,OAAO,IAAI,IAAI,CAACL,QAAQ,EAAE;MACnC,IAAI,CAACI,oBAAoB,CACvBC,OAAO,EACP,IAAI,CAACJ,oBAAoB,EACzB,IAAI,CAACC,qBACP,CAAC;IACH;EACF;EAEAW,UAAUA,CAAA,EAAG;IACX,KAAK,MAAMR,OAAO,IAAI,IAAI,CAACL,QAAQ,EAAE;MACnCK,OAAO,CAACQ,UAAU,CAAC,CAAC;IACtB;EACF;EAEAC,cAAcA,CAAA,EAAkB;IAC9B,OAAO,IAAI,CAACd,QAAQ,CAACe,OAAO,CAAEV,OAAO,IAAKA,OAAO,CAACS,cAAc,CAAC,CAAC,CAAC;EACrE;AACF;AAEA,OAAO,MAAME,mBAAmB,SAASjB,eAAe,CAAC;EACvDa,OAAOA,CAAA,EAAG;IAGR,MAAMK,kBAAkB,GAAG,IAAI,CAACjB,QAAQ,CAACkB,GAAG,CAAEb,OAAO,IAEnD,IAAI,CAACL,QAAA,CAEFmB,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKf,OAAO,EAK3BU,OAAO,CAAEK,CAAC,IAAKA,CAAC,CAACN,cAAc,CAAC,CAAC,CACtC,CAAC;IAED,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACrB,QAAQ,CAACsB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,IAAI,CAACjB,oBAAoB,CACvB,IAAI,CAACJ,QAAQ,CAACqB,CAAC,CAAC,EAChBJ,kBAAkB,CAACI,CAAC,CAAC,EACrB,IAAI,CAACnB,qBACP,CAAC;IACH;EACF;AACF;AAEA,OAAO,MAAMqB,gBAAgB,SAASxB,eAAe,CAAC;EACpDa,OAAOA,CAAA,EAAG;IAGR,MAAMY,aAAa,GAAG,IAAI,CAACxB,QAAQ,CAACkB,GAAG,CAAEb,OAAO,IAC9CA,OAAO,CAACS,cAAc,CAAC,CACzB,CAAC;IAED,IAAIH,aAA4B,GAAG,EAAE;IAErC,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACrB,QAAQ,CAACsB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,IAAI,CAACjB,oBAAoB,CACvB,IAAI,CAACJ,QAAQ,CAACqB,CAAC,CAAC,EAChB,IAAI,CAACpB,oBAAoB,EACzB,IAAI,CAACC,qBAAqB,CAACuB,MAAM,CAACd,aAAa,CACjD,CAAC;MAGDA,aAAa,GAAGA,aAAa,CAACc,MAAM,CAACD,aAAa,CAACH,CAAC,CAAC,CAAC;IACxD;EACF;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}