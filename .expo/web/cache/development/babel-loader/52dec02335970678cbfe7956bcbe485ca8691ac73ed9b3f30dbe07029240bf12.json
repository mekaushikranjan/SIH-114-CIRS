{"ast":null,"code":"'use strict';\n\nimport { ReanimatedError } from \"../../../../common/index.js\";\nimport { deepEqual, isNumber } from \"../../../utils/index.js\";\nimport { normalizeDelay, normalizeDuration, normalizeTimingFunction } from \"../common/index.js\";\nimport { VALID_ANIMATION_DIRECTIONS, VALID_FILL_MODES, VALID_PLAY_STATES } from \"./constants.js\";\nexport const ERROR_MESSAGES = {\n  invalidAnimationDirection: direction => `Invalid animation direction \"${direction}\".`,\n  invalidIterationCount: iterationCount => `Invalid iteration count \"${iterationCount}\". Expected a number or \"infinite\".`,\n  negativeIterationCount: iterationCount => `Iteration count cannot be negative, received \"${iterationCount}\".`,\n  invalidFillMode: fillMode => `Invalid fill mode \"${fillMode}\".`,\n  invalidPlayState: playState => `Invalid play state \"${playState}\".`\n};\nexport function normalizeDirection(direction = 'normal') {\n  if (!VALID_ANIMATION_DIRECTIONS.has(direction)) {\n    throw new ReanimatedError(ERROR_MESSAGES.invalidAnimationDirection(direction));\n  }\n  return direction;\n}\nexport function normalizeIterationCount(iterationCount = 1) {\n  if (iterationCount === 'infinite' || iterationCount === Infinity) {\n    return -1;\n  } else if (!isNumber(iterationCount)) {\n    throw new ReanimatedError(ERROR_MESSAGES.invalidIterationCount(iterationCount));\n  } else if (iterationCount < 0) {\n    throw new ReanimatedError(ERROR_MESSAGES.negativeIterationCount(iterationCount));\n  }\n  return iterationCount;\n}\nexport function normalizeFillMode(fillMode = 'none') {\n  if (!VALID_FILL_MODES.has(fillMode)) {\n    throw new ReanimatedError(ERROR_MESSAGES.invalidFillMode(fillMode));\n  }\n  return fillMode;\n}\nexport function normalizePlayState(playState = 'running') {\n  if (!VALID_PLAY_STATES.has(playState)) {\n    throw new ReanimatedError(ERROR_MESSAGES.invalidPlayState(playState));\n  }\n  return playState;\n}\nexport function normalizeSingleCSSAnimationSettings({\n  animationDuration,\n  animationTimingFunction,\n  animationDelay,\n  animationIterationCount,\n  animationDirection,\n  animationFillMode,\n  animationPlayState\n}) {\n  return {\n    duration: normalizeDuration(animationDuration),\n    timingFunction: normalizeTimingFunction(animationTimingFunction),\n    delay: normalizeDelay(animationDelay),\n    iterationCount: normalizeIterationCount(animationIterationCount),\n    direction: normalizeDirection(animationDirection),\n    fillMode: normalizeFillMode(animationFillMode),\n    playState: normalizePlayState(animationPlayState)\n  };\n}\nexport function getAnimationSettingsUpdates(oldConfig, newConfig) {\n  const updatedSettings = {};\n  if (oldConfig.duration !== newConfig.duration) {\n    updatedSettings.duration = newConfig.duration;\n  }\n  if (oldConfig.timingFunction !== newConfig.timingFunction && (typeof oldConfig.timingFunction !== 'object' || !deepEqual(oldConfig.timingFunction, newConfig.timingFunction))) {\n    updatedSettings.timingFunction = newConfig.timingFunction;\n  }\n  if (oldConfig.delay !== newConfig.delay) {\n    updatedSettings.delay = newConfig.delay;\n  }\n  if (oldConfig.iterationCount !== newConfig.iterationCount) {\n    updatedSettings.iterationCount = newConfig.iterationCount;\n  }\n  if (oldConfig.direction !== newConfig.direction) {\n    updatedSettings.direction = newConfig.direction;\n  }\n  if (oldConfig.fillMode !== newConfig.fillMode) {\n    updatedSettings.fillMode = newConfig.fillMode;\n  }\n  if (oldConfig.playState !== newConfig.playState) {\n    updatedSettings.playState = newConfig.playState;\n  }\n  return updatedSettings;\n}","map":{"version":3,"names":["ReanimatedError","deepEqual","isNumber","normalizeDelay","normalizeDuration","normalizeTimingFunction","VALID_ANIMATION_DIRECTIONS","VALID_FILL_MODES","VALID_PLAY_STATES","ERROR_MESSAGES","invalidAnimationDirection","direction","invalidIterationCount","iterationCount","negativeIterationCount","invalidFillMode","fillMode","invalidPlayState","playState","normalizeDirection","has","normalizeIterationCount","Infinity","normalizeFillMode","normalizePlayState","normalizeSingleCSSAnimationSettings","animationDuration","animationTimingFunction","animationDelay","animationIterationCount","animationDirection","animationFillMode","animationPlayState","duration","timingFunction","delay","getAnimationSettingsUpdates","oldConfig","newConfig","updatedSettings"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\css\\native\\normalization\\animation\\settings.ts"],"sourcesContent":["'use strict';\nimport { ReanimatedError } from '../../../../common';\nimport type {\n  CSSAnimationDirection,\n  CSSAnimationFillMode,\n  CSSAnimationIterationCount,\n  CSSAnimationPlayState,\n  SingleCSSAnimationSettings,\n} from '../../../types';\nimport { deepEqual, isNumber } from '../../../utils';\nimport type { NormalizedSingleCSSAnimationSettings } from '../../types';\nimport {\n  normalizeDelay,\n  normalizeDuration,\n  normalizeTimingFunction,\n} from '../common';\nimport {\n  VALID_ANIMATION_DIRECTIONS,\n  VALID_FILL_MODES,\n  VALID_PLAY_STATES,\n} from './constants';\n\nexport const ERROR_MESSAGES = {\n  invalidAnimationDirection: (direction: CSSAnimationDirection) =>\n    `Invalid animation direction \"${direction}\".`,\n  invalidIterationCount: (iterationCount: CSSAnimationIterationCount) =>\n    `Invalid iteration count \"${iterationCount}\". Expected a number or \"infinite\".`,\n  negativeIterationCount: (iterationCount: number) =>\n    `Iteration count cannot be negative, received \"${iterationCount}\".`,\n  invalidFillMode: (fillMode: CSSAnimationFillMode) =>\n    `Invalid fill mode \"${fillMode}\".`,\n  invalidPlayState: (playState: CSSAnimationPlayState) =>\n    `Invalid play state \"${playState}\".`,\n};\n\nexport function normalizeDirection(\n  direction: CSSAnimationDirection = 'normal'\n): CSSAnimationDirection {\n  if (!VALID_ANIMATION_DIRECTIONS.has(direction)) {\n    throw new ReanimatedError(\n      ERROR_MESSAGES.invalidAnimationDirection(direction)\n    );\n  }\n  return direction;\n}\n\nexport function normalizeIterationCount(\n  iterationCount: CSSAnimationIterationCount = 1\n): number {\n  if (iterationCount === 'infinite' || iterationCount === Infinity) {\n    return -1;\n  } else if (!isNumber(iterationCount)) {\n    throw new ReanimatedError(\n      ERROR_MESSAGES.invalidIterationCount(iterationCount)\n    );\n  } else if (iterationCount < 0) {\n    throw new ReanimatedError(\n      ERROR_MESSAGES.negativeIterationCount(iterationCount)\n    );\n  }\n  return iterationCount;\n}\n\nexport function normalizeFillMode(\n  fillMode: CSSAnimationFillMode = 'none'\n): CSSAnimationFillMode {\n  if (!VALID_FILL_MODES.has(fillMode)) {\n    throw new ReanimatedError(ERROR_MESSAGES.invalidFillMode(fillMode));\n  }\n  return fillMode;\n}\n\nexport function normalizePlayState(\n  playState: CSSAnimationPlayState = 'running'\n): CSSAnimationPlayState {\n  if (!VALID_PLAY_STATES.has(playState)) {\n    throw new ReanimatedError(ERROR_MESSAGES.invalidPlayState(playState));\n  }\n  return playState;\n}\n\nexport function normalizeSingleCSSAnimationSettings({\n  animationDuration,\n  animationTimingFunction,\n  animationDelay,\n  animationIterationCount,\n  animationDirection,\n  animationFillMode,\n  animationPlayState,\n}: SingleCSSAnimationSettings): NormalizedSingleCSSAnimationSettings {\n  return {\n    duration: normalizeDuration(animationDuration),\n    timingFunction: normalizeTimingFunction(animationTimingFunction),\n    delay: normalizeDelay(animationDelay),\n    iterationCount: normalizeIterationCount(animationIterationCount),\n    direction: normalizeDirection(animationDirection),\n    fillMode: normalizeFillMode(animationFillMode),\n    playState: normalizePlayState(animationPlayState),\n  };\n}\n\nexport function getAnimationSettingsUpdates(\n  oldConfig: NormalizedSingleCSSAnimationSettings,\n  newConfig: NormalizedSingleCSSAnimationSettings\n): Partial<NormalizedSingleCSSAnimationSettings> {\n  const updatedSettings: Partial<NormalizedSingleCSSAnimationSettings> = {};\n\n  if (oldConfig.duration !== newConfig.duration) {\n    updatedSettings.duration = newConfig.duration;\n  }\n  if (\n    oldConfig.timingFunction !== newConfig.timingFunction &&\n    (typeof oldConfig.timingFunction !== 'object' ||\n      // TODO - maybe replace by some better solution than deepEqual\n      !deepEqual(oldConfig.timingFunction, newConfig.timingFunction))\n  ) {\n    updatedSettings.timingFunction = newConfig.timingFunction;\n  }\n  if (oldConfig.delay !== newConfig.delay) {\n    updatedSettings.delay = newConfig.delay;\n  }\n  if (oldConfig.iterationCount !== newConfig.iterationCount) {\n    updatedSettings.iterationCount = newConfig.iterationCount;\n  }\n  if (oldConfig.direction !== newConfig.direction) {\n    updatedSettings.direction = newConfig.direction;\n  }\n  if (oldConfig.fillMode !== newConfig.fillMode) {\n    updatedSettings.fillMode = newConfig.fillMode;\n  }\n  if (oldConfig.playState !== newConfig.playState) {\n    updatedSettings.playState = newConfig.playState;\n  }\n\n  return updatedSettings;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}