{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst react_native_1 = require(\"react-native-web/dist/index\");\nconst invariant_1 = __importDefault(require(\"invariant\"));\nconst Voice = react_native_1.NativeModules.Voice;\nconst voiceEmitter = react_native_1.Platform.OS !== 'web' ? new react_native_1.NativeEventEmitter(Voice) : null;\nclass RCTVoice {\n  constructor() {\n    this._loaded = false;\n    this._listeners = null;\n    this._events = {\n      onSpeechStart: () => {},\n      onSpeechRecognized: () => {},\n      onSpeechEnd: () => {},\n      onSpeechError: () => {},\n      onSpeechResults: () => {},\n      onSpeechPartialResults: () => {},\n      onSpeechVolumeChanged: () => {}\n    };\n  }\n  removeAllListeners() {\n    Voice.onSpeechStart = undefined;\n    Voice.onSpeechRecognized = undefined;\n    Voice.onSpeechEnd = undefined;\n    Voice.onSpeechError = undefined;\n    Voice.onSpeechResults = undefined;\n    Voice.onSpeechPartialResults = undefined;\n    Voice.onSpeechVolumeChanged = undefined;\n  }\n  destroy() {\n    if (!this._loaded && !this._listeners) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      Voice.destroySpeech(error => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          if (this._listeners) {\n            this._listeners.map(listener => listener.remove());\n            this._listeners = null;\n          }\n          resolve();\n        }\n      });\n    });\n  }\n  start(locale, options = {}) {\n    if (!this._loaded && !this._listeners && voiceEmitter !== null) {\n      this._listeners = Object.keys(this._events).map(key => voiceEmitter.addListener(key, this._events[key]));\n    }\n    return new Promise((resolve, reject) => {\n      const callback = error => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve();\n        }\n      };\n      if (react_native_1.Platform.OS === 'android') {\n        Voice.startSpeech(locale, Object.assign({\n          EXTRA_LANGUAGE_MODEL: 'LANGUAGE_MODEL_FREE_FORM',\n          EXTRA_MAX_RESULTS: 5,\n          EXTRA_PARTIAL_RESULTS: true,\n          REQUEST_PERMISSIONS_AUTO: true\n        }, options), callback);\n      } else {\n        Voice.startSpeech(locale, callback);\n      }\n    });\n  }\n  stop() {\n    if (!this._loaded && !this._listeners) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      Voice.stopSpeech(error => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n  cancel() {\n    if (!this._loaded && !this._listeners) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      Voice.cancelSpeech(error => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n  isAvailable() {\n    return new Promise((resolve, reject) => {\n      Voice.isSpeechAvailable((isAvailable, error) => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve(isAvailable);\n        }\n      });\n    });\n  }\n  getSpeechRecognitionServices() {\n    if (react_native_1.Platform.OS !== 'android') {\n      invariant_1.default(Voice, 'Speech recognition services can be queried for only on Android');\n      return;\n    }\n    return Voice.getSpeechRecognitionServices();\n  }\n  isRecognizing() {\n    return new Promise(resolve => {\n      Voice.isRecognizing(isRecognizing => resolve(isRecognizing));\n    });\n  }\n  set onSpeechStart(fn) {\n    this._events.onSpeechStart = fn;\n  }\n  set onSpeechRecognized(fn) {\n    this._events.onSpeechRecognized = fn;\n  }\n  set onSpeechEnd(fn) {\n    this._events.onSpeechEnd = fn;\n  }\n  set onSpeechError(fn) {\n    this._events.onSpeechError = fn;\n  }\n  set onSpeechResults(fn) {\n    this._events.onSpeechResults = fn;\n  }\n  set onSpeechPartialResults(fn) {\n    this._events.onSpeechPartialResults = fn;\n  }\n  set onSpeechVolumeChanged(fn) {\n    this._events.onSpeechVolumeChanged = fn;\n  }\n}\nexports.default = new RCTVoice();","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","react_native_1","require","invariant_1","Voice","NativeModules","voiceEmitter","Platform","OS","NativeEventEmitter","RCTVoice","constructor","_loaded","_listeners","_events","onSpeechStart","onSpeechRecognized","onSpeechEnd","onSpeechError","onSpeechResults","onSpeechPartialResults","onSpeechVolumeChanged","removeAllListeners","undefined","destroy","Promise","resolve","reject","destroySpeech","error","Error","map","listener","remove","start","locale","options","keys","key","addListener","callback","startSpeech","assign","EXTRA_LANGUAGE_MODEL","EXTRA_MAX_RESULTS","EXTRA_PARTIAL_RESULTS","REQUEST_PERMISSIONS_AUTO","stop","stopSpeech","cancel","cancelSpeech","isAvailable","isSpeechAvailable","getSpeechRecognitionServices","default","isRecognizing","fn"],"sources":["C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/node_modules/@react-native-voice/voice/dist/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst react_native_1 = require(\"react-native\");\nconst invariant_1 = __importDefault(require(\"invariant\"));\nconst Voice = react_native_1.NativeModules.Voice;\n// NativeEventEmitter is only availabe on React Native platforms, so this conditional is used to avoid import conflicts in the browser/server\nconst voiceEmitter = react_native_1.Platform.OS !== 'web' ? new react_native_1.NativeEventEmitter(Voice) : null;\nclass RCTVoice {\n    constructor() {\n        this._loaded = false;\n        this._listeners = null;\n        this._events = {\n            onSpeechStart: () => { },\n            onSpeechRecognized: () => { },\n            onSpeechEnd: () => { },\n            onSpeechError: () => { },\n            onSpeechResults: () => { },\n            onSpeechPartialResults: () => { },\n            onSpeechVolumeChanged: () => { },\n        };\n    }\n    removeAllListeners() {\n        Voice.onSpeechStart = undefined;\n        Voice.onSpeechRecognized = undefined;\n        Voice.onSpeechEnd = undefined;\n        Voice.onSpeechError = undefined;\n        Voice.onSpeechResults = undefined;\n        Voice.onSpeechPartialResults = undefined;\n        Voice.onSpeechVolumeChanged = undefined;\n    }\n    destroy() {\n        if (!this._loaded && !this._listeners) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            Voice.destroySpeech((error) => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    if (this._listeners) {\n                        this._listeners.map(listener => listener.remove());\n                        this._listeners = null;\n                    }\n                    resolve();\n                }\n            });\n        });\n    }\n    start(locale, options = {}) {\n        if (!this._loaded && !this._listeners && voiceEmitter !== null) {\n            this._listeners = Object.keys(this._events).map((key) => voiceEmitter.addListener(key, this._events[key]));\n        }\n        return new Promise((resolve, reject) => {\n            const callback = (error) => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    resolve();\n                }\n            };\n            if (react_native_1.Platform.OS === 'android') {\n                Voice.startSpeech(locale, Object.assign({\n                    EXTRA_LANGUAGE_MODEL: 'LANGUAGE_MODEL_FREE_FORM',\n                    EXTRA_MAX_RESULTS: 5,\n                    EXTRA_PARTIAL_RESULTS: true,\n                    REQUEST_PERMISSIONS_AUTO: true,\n                }, options), callback);\n            }\n            else {\n                Voice.startSpeech(locale, callback);\n            }\n        });\n    }\n    stop() {\n        if (!this._loaded && !this._listeners) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            Voice.stopSpeech(error => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    cancel() {\n        if (!this._loaded && !this._listeners) {\n            return Promise.resolve();\n        }\n        return new Promise((resolve, reject) => {\n            Voice.cancelSpeech(error => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    isAvailable() {\n        return new Promise((resolve, reject) => {\n            Voice.isSpeechAvailable((isAvailable, error) => {\n                if (error) {\n                    reject(new Error(error));\n                }\n                else {\n                    resolve(isAvailable);\n                }\n            });\n        });\n    }\n    /**\n     * (Android) Get a list of the speech recognition engines available on the device\n     * */\n    getSpeechRecognitionServices() {\n        if (react_native_1.Platform.OS !== 'android') {\n            invariant_1.default(Voice, 'Speech recognition services can be queried for only on Android');\n            return;\n        }\n        return Voice.getSpeechRecognitionServices();\n    }\n    isRecognizing() {\n        return new Promise(resolve => {\n            Voice.isRecognizing((isRecognizing) => resolve(isRecognizing));\n        });\n    }\n    set onSpeechStart(fn) {\n        this._events.onSpeechStart = fn;\n    }\n    set onSpeechRecognized(fn) {\n        this._events.onSpeechRecognized = fn;\n    }\n    set onSpeechEnd(fn) {\n        this._events.onSpeechEnd = fn;\n    }\n    set onSpeechError(fn) {\n        this._events.onSpeechError = fn;\n    }\n    set onSpeechResults(fn) {\n        this._events.onSpeechResults = fn;\n    }\n    set onSpeechPartialResults(fn) {\n        this._events.onSpeechPartialResults = fn;\n    }\n    set onSpeechVolumeChanged(fn) {\n        this._events.onSpeechVolumeChanged = fn;\n    }\n}\nexports.default = new RCTVoice();\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}