{"ast":null,"code":"'use strict';\n\nimport { useEffect, useRef } from 'react';\nimport { initialUpdaterRun } from \"../animation/index.js\";\nimport { SHOULD_BE_USE_WEB } from \"../common/index.js\";\nimport { makeMutable, startMapper, stopMapper } from \"../core.js\";\nconst _worklet_6792802823485_init_data = {\n  code: \"function useDerivedValueJs1(){const{sharedValue,updater}=this.__closure;sharedValue.value=updater();}\",\n  location: \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Desktop\\\\civic-reporter-sih\\\\frontend\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\hook\\\\useDerivedValue.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"useDerivedValueJs1\\\",\\\"sharedValue\\\",\\\"updater\\\",\\\"__closure\\\",\\\"value\\\"],\\\"sources\\\":[\\\"C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/node_modules/react-native-reanimated/lib/module/hook/useDerivedValue.js\\\"],\\\"mappings\\\":\\\"AA0CgB,SAAAA,kBAAMA,CAAA,QAAAC,WAAA,CAAAC,OAAA,OAAAC,SAAA,CAGhBF,WAAW,CAACG,KAAK,CAAGF,OAAO,CAAC,CAAC,CAC/B\\\",\\\"ignoreList\\\":[]}\"\n};\nexport function useDerivedValue(updater, dependencies) {\n  const initRef = useRef(null);\n  let inputs = Object.values(updater.__closure ?? {});\n  if (SHOULD_BE_USE_WEB) {\n    if (!inputs.length && dependencies?.length) {\n      inputs = dependencies;\n    }\n  }\n  if (dependencies === undefined) {\n    dependencies = [...inputs, updater.__workletHash];\n  } else {\n    dependencies.push(updater.__workletHash);\n  }\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(updater));\n  }\n  const sharedValue = initRef.current;\n  useEffect(() => {\n    const fun = function useDerivedValueJs1Factory({\n      _worklet_6792802823485_init_data,\n      sharedValue,\n      updater\n    }) {\n      const _e = [new global.Error(), -3, -27];\n      const useDerivedValueJs1 = function () {\n        sharedValue.value = updater();\n      };\n      useDerivedValueJs1.__closure = {\n        sharedValue,\n        updater\n      };\n      useDerivedValueJs1.__workletHash = 6792802823485;\n      useDerivedValueJs1.__pluginVersion = \"0.5.1\";\n      useDerivedValueJs1.__initData = _worklet_6792802823485_init_data;\n      useDerivedValueJs1.__stackDetails = _e;\n      return useDerivedValueJs1;\n    }({\n      _worklet_6792802823485_init_data,\n      sharedValue,\n      updater\n    });\n    const mapperId = startMapper(fun, inputs, [sharedValue]);\n    return () => {\n      stopMapper(mapperId);\n    };\n  }, dependencies);\n  return sharedValue;\n}","map":{"version":3,"names":["useEffect","useRef","initialUpdaterRun","SHOULD_BE_USE_WEB","makeMutable","startMapper","stopMapper","_worklet_6792802823485_init_data","code","location","sourceMap","useDerivedValue","updater","dependencies","initRef","inputs","Object","values","__closure","length","undefined","__workletHash","push","current","sharedValue","fun","useDerivedValueJs1Factory","_e","global","Error","useDerivedValueJs1","value","__pluginVersion","__initData","__stackDetails","mapperId"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\hook\\useDerivedValue.ts"],"sourcesContent":["'use strict';\nimport { useEffect, useRef } from 'react';\nimport type { WorkletFunction } from 'react-native-worklets';\n\nimport { initialUpdaterRun } from '../animation';\nimport { SHOULD_BE_USE_WEB } from '../common';\nimport type { SharedValue } from '../commonTypes';\nimport { makeMutable, startMapper, stopMapper } from '../core';\nimport type { DependencyList } from './commonTypes';\n\nexport interface DerivedValue<Value = unknown>\n  extends Readonly<Omit<SharedValue<Value>, 'set'>> {\n  /**\n   * @deprecated Derived values are readonly, don't use this method. It's here\n   *   only to prevent breaking changes in TypeScript types. It will be removed\n   *   in the future.\n   */\n  set: SharedValue<Value>['set'];\n}\n\n/**\n * Lets you create new shared values based on existing ones while keeping them\n * reactive.\n *\n * @param updater - A function called whenever at least one of the shared values\n *   or state used in the function body changes.\n * @param dependencies - An optional array of dependencies. Only relevant when\n *   using Reanimated without the Babel plugin on the Web.\n * @returns A new readonly shared value based on a value returned from the\n *   updater function\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useDerivedValue\n */\n// @ts-expect-error This overload is required by our API.\nexport function useDerivedValue<Value>(\n  updater: () => Value,\n  dependencies?: DependencyList\n): DerivedValue<Value>;\n\nexport function useDerivedValue<Value>(\n  updater: WorkletFunction<[], Value>,\n  dependencies?: DependencyList\n): DerivedValue<Value> {\n  const initRef = useRef<SharedValue<Value> | null>(null);\n  let inputs = Object.values(updater.__closure ?? {});\n  if (SHOULD_BE_USE_WEB) {\n    if (!inputs.length && dependencies?.length) {\n      // let web work without a Babel/SWC plugin\n      inputs = dependencies;\n    }\n  }\n\n  // build dependencies\n  if (dependencies === undefined) {\n    dependencies = [...inputs, updater.__workletHash];\n  } else {\n    dependencies.push(updater.__workletHash);\n  }\n\n  if (initRef.current === null) {\n    initRef.current = makeMutable(initialUpdaterRun(updater));\n  }\n\n  const sharedValue: SharedValue<Value> = initRef.current;\n\n  useEffect(() => {\n    const fun = () => {\n      'worklet';\n      sharedValue.value = updater();\n    };\n    const mapperId = startMapper(fun, inputs, [\n      sharedValue as SharedValue<unknown>,\n    ]);\n    return () => {\n      stopMapper(mapperId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, dependencies);\n\n  return sharedValue;\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAGzC,SAASC,iBAAiB,QAAQ,uBAAc;AAChD,SAASC,iBAAiB,QAAQ,oBAAW;AAE7C,SAASC,WAAW,EAAEC,WAAW,EAAEC,UAAU,QAAQ,YAAS;AAAA,MAAAC,gCAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;AAAA;AA+B9D,OAAO,SAASC,eAAeA,CAC7BC,OAAmC,EACnCC,YAA6B,EACR;EACrB,MAAMC,OAAO,GAAGb,MAAM,CAA4B,IAAI,CAAC;EACvD,IAAIc,MAAM,GAAGC,MAAM,CAACC,MAAM,CAACL,OAAO,CAACM,SAAS,IAAI,CAAC,CAAC,CAAC;EACnD,IAAIf,iBAAiB,EAAE;IACrB,IAAI,CAACY,MAAM,CAACI,MAAM,IAAIN,YAAY,EAAEM,MAAM,EAAE;MAE1CJ,MAAM,GAAGF,YAAY;IACvB;EACF;EAGA,IAAIA,YAAY,KAAKO,SAAS,EAAE;IAC9BP,YAAY,GAAG,CAAC,GAAGE,MAAM,EAAEH,OAAO,CAACS,aAAa,CAAC;EACnD,CAAC,MAAM;IACLR,YAAY,CAACS,IAAI,CAACV,OAAO,CAACS,aAAa,CAAC;EAC1C;EAEA,IAAIP,OAAO,CAACS,OAAO,KAAK,IAAI,EAAE;IAC5BT,OAAO,CAACS,OAAO,GAAGnB,WAAW,CAACF,iBAAiB,CAACU,OAAO,CAAC,CAAC;EAC3D;EAEA,MAAMY,WAA+B,GAAGV,OAAO,CAACS,OAAO;EAEvDvB,SAAS,CAAC,MAAM;IACd,MAAMyB,GAAG,GAAG,SAAAC,0BAAA;MAAAnB,gCAAA;MAEViB,WAAW;MAASZ;IAAO;MAAA,MAAAe,EAAA,QAAAC,MAAA,CAAAC,KAAA;MAAA,MAAAC,kBAAA,YAAAA,CAAA,EAFX;QAEhBN,WAAW,CAACO,KAAK,GAAGnB,OAAO,CAAC,CAAC;MAC/B,CAAC;MAAAkB,kBAAA,CAAAZ,SAAA;QADCM,WAAW;QAASZ;MAAO;MAAAkB,kBAAA,CAAAT,aAAA;MAAAS,kBAAA,CAAAE,eAAA;MAAAF,kBAAA,CAAAG,UAAA,GAAA1B,gCAAA;MAAAuB,kBAAA,CAAAI,cAAA,GAAAP,EAAA;MAAA,OAAAG,kBAAA;IAAA,CAFjB;MAAAvB,gCAAA;MAEViB,WAAW;MAASZ;IAAO,EAC5B;IACD,MAAMuB,QAAQ,GAAG9B,WAAW,CAACoB,GAAG,EAAEV,MAAM,EAAE,CACxCS,WAAW,CACZ,CAAC;IACF,OAAO,MAAM;MACXlB,UAAU,CAAC6B,QAAQ,CAAC;IACtB,CAAC;EAEH,CAAC,EAAEtB,YAAY,CAAC;EAEhB,OAAOW,WAAW;AACpB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}