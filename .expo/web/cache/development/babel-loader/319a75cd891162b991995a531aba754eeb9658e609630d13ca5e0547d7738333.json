{"ast":null,"code":"\"use strict\";\n\nimport { EventTypes } from '../interfaces';\nexport default class RotationGestureDetector {\n  currentTime = 0;\n  previousTime = 0;\n  previousAngle = 0;\n  _rotation = 0;\n  _anchorX = 0;\n  _anchorY = 0;\n  isInProgress = false;\n  keyPointers = [NaN, NaN];\n  constructor(callbacks) {\n    this.onRotationBegin = callbacks.onRotationBegin;\n    this.onRotation = callbacks.onRotation;\n    this.onRotationEnd = callbacks.onRotationEnd;\n  }\n  updateCurrent(event, tracker) {\n    this.previousTime = this.currentTime;\n    this.currentTime = event.time;\n    const [firstPointerID, secondPointerID] = this.keyPointers;\n    const firstPointerCoords = tracker.getLastAbsoluteCoords(firstPointerID);\n    const secondPointerCoords = tracker.getLastAbsoluteCoords(secondPointerID);\n    if (!firstPointerCoords || !secondPointerCoords) {\n      return;\n    }\n    const vectorX = secondPointerCoords.x - firstPointerCoords.x;\n    const vectorY = secondPointerCoords.y - firstPointerCoords.y;\n    this._anchorX = (firstPointerCoords.x + secondPointerCoords.x) / 2;\n    this._anchorY = (firstPointerCoords.y + secondPointerCoords.y) / 2;\n    const angle = -Math.atan2(vectorY, vectorX);\n    this._rotation = Number.isNaN(this.previousAngle) ? 0 : this.previousAngle - angle;\n    this.previousAngle = angle;\n    if (this.rotation > Math.PI) {\n      this._rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI) {\n      this._rotation += Math.PI;\n    }\n    if (this.rotation > Math.PI / 2) {\n      this._rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI / 2) {\n      this._rotation += Math.PI;\n    }\n  }\n  finish() {\n    if (!this.isInProgress) {\n      return;\n    }\n    this.isInProgress = false;\n    this.keyPointers = [NaN, NaN];\n    this.onRotationEnd(this);\n  }\n  setKeyPointers(tracker) {\n    if (this.keyPointers[0] && this.keyPointers[1]) {\n      return;\n    }\n    const pointerIDs = tracker.trackedPointers.keys();\n    this.keyPointers[0] = pointerIDs.next().value;\n    this.keyPointers[1] = pointerIDs.next().value;\n  }\n  onTouchEvent(event, tracker) {\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n        this.isInProgress = false;\n        break;\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        if (this.isInProgress) {\n          break;\n        }\n        this.isInProgress = true;\n        this.previousTime = event.time;\n        this.previousAngle = NaN;\n        this.setKeyPointers(tracker);\n        this.updateCurrent(event, tracker);\n        this.onRotationBegin(this);\n        break;\n      case EventTypes.MOVE:\n        if (!this.isInProgress) {\n          break;\n        }\n        this.updateCurrent(event, tracker);\n        this.onRotation(this);\n        break;\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        if (!this.isInProgress) {\n          break;\n        }\n        if (this.keyPointers.indexOf(event.pointerId) >= 0) {\n          this.finish();\n        }\n        break;\n      case EventTypes.UP:\n        if (this.isInProgress) {\n          this.finish();\n        }\n        break;\n    }\n    return true;\n  }\n  reset() {\n    this.keyPointers = [NaN, NaN];\n    this.isInProgress = false;\n  }\n  get anchorX() {\n    return this._anchorX;\n  }\n  get anchorY() {\n    return this._anchorY;\n  }\n  get rotation() {\n    return this._rotation;\n  }\n  get timeDelta() {\n    return this.currentTime + this.previousTime;\n  }\n}","map":{"version":3,"names":["EventTypes","RotationGestureDetector","currentTime","previousTime","previousAngle","_rotation","_anchorX","_anchorY","isInProgress","keyPointers","NaN","constructor","callbacks","onRotationBegin","onRotation","onRotationEnd","updateCurrent","event","tracker","time","firstPointerID","secondPointerID","firstPointerCoords","getLastAbsoluteCoords","secondPointerCoords","vectorX","x","vectorY","y","angle","Math","atan2","Number","isNaN","rotation","PI","finish","setKeyPointers","pointerIDs","trackedPointers","keys","next","value","onTouchEvent","eventType","DOWN","ADDITIONAL_POINTER_DOWN","MOVE","ADDITIONAL_POINTER_UP","indexOf","pointerId","UP","reset","anchorX","anchorY","timeDelta"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\web\\detectors\\RotationGestureDetector.ts"],"sourcesContent":["import { AdaptedEvent, EventTypes } from '../interfaces';\nimport PointerTracker from '../tools/PointerTracker';\n\nexport interface RotationGestureListener {\n  onRotationBegin: (detector: RotationGestureDetector) => boolean;\n  onRotation: (detector: RotationGestureDetector) => boolean;\n  onRotationEnd: (detector: RotationGestureDetector) => void;\n}\n\nexport default class RotationGestureDetector\n  implements RotationGestureListener\n{\n  onRotationBegin: (detector: RotationGestureDetector) => boolean;\n  onRotation: (detector: RotationGestureDetector) => boolean;\n  onRotationEnd: (detector: RotationGestureDetector) => void;\n\n  private currentTime = 0;\n  private previousTime = 0;\n\n  private previousAngle = 0;\n  private _rotation = 0;\n\n  private _anchorX = 0;\n  private _anchorY = 0;\n\n  private isInProgress = false;\n\n  private keyPointers: number[] = [NaN, NaN];\n\n  constructor(callbacks: RotationGestureListener) {\n    this.onRotationBegin = callbacks.onRotationBegin;\n    this.onRotation = callbacks.onRotation;\n    this.onRotationEnd = callbacks.onRotationEnd;\n  }\n\n  private updateCurrent(event: AdaptedEvent, tracker: PointerTracker): void {\n    this.previousTime = this.currentTime;\n    this.currentTime = event.time;\n\n    const [firstPointerID, secondPointerID] = this.keyPointers;\n\n    const firstPointerCoords = tracker.getLastAbsoluteCoords(firstPointerID);\n    const secondPointerCoords = tracker.getLastAbsoluteCoords(secondPointerID);\n\n    if (!firstPointerCoords || !secondPointerCoords) {\n      return;\n    }\n\n    const vectorX: number = secondPointerCoords.x - firstPointerCoords.x;\n    const vectorY: number = secondPointerCoords.y - firstPointerCoords.y;\n\n    this._anchorX = (firstPointerCoords.x + secondPointerCoords.x) / 2;\n    this._anchorY = (firstPointerCoords.y + secondPointerCoords.y) / 2;\n\n    // Angle diff should be positive when rotating in clockwise direction\n    const angle: number = -Math.atan2(vectorY, vectorX);\n\n    this._rotation = Number.isNaN(this.previousAngle)\n      ? 0\n      : this.previousAngle - angle;\n\n    this.previousAngle = angle;\n\n    if (this.rotation > Math.PI) {\n      this._rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI) {\n      this._rotation += Math.PI;\n    }\n\n    if (this.rotation > Math.PI / 2) {\n      this._rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI / 2) {\n      this._rotation += Math.PI;\n    }\n  }\n\n  private finish(): void {\n    if (!this.isInProgress) {\n      return;\n    }\n\n    this.isInProgress = false;\n    this.keyPointers = [NaN, NaN];\n    this.onRotationEnd(this);\n  }\n\n  private setKeyPointers(tracker: PointerTracker): void {\n    if (this.keyPointers[0] && this.keyPointers[1]) {\n      return;\n    }\n\n    const pointerIDs: IterableIterator<number> = tracker.trackedPointers.keys();\n\n    this.keyPointers[0] = pointerIDs.next().value as number;\n    this.keyPointers[1] = pointerIDs.next().value as number;\n  }\n\n  public onTouchEvent(event: AdaptedEvent, tracker: PointerTracker): boolean {\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n        this.isInProgress = false;\n        break;\n\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        if (this.isInProgress) {\n          break;\n        }\n        this.isInProgress = true;\n\n        this.previousTime = event.time;\n        this.previousAngle = NaN;\n\n        this.setKeyPointers(tracker);\n\n        this.updateCurrent(event, tracker);\n        this.onRotationBegin(this);\n        break;\n\n      case EventTypes.MOVE:\n        if (!this.isInProgress) {\n          break;\n        }\n\n        this.updateCurrent(event, tracker);\n        this.onRotation(this);\n\n        break;\n\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        if (!this.isInProgress) {\n          break;\n        }\n\n        if (this.keyPointers.indexOf(event.pointerId) >= 0) {\n          this.finish();\n        }\n\n        break;\n\n      case EventTypes.UP:\n        if (this.isInProgress) {\n          this.finish();\n        }\n        break;\n    }\n\n    return true;\n  }\n\n  public reset(): void {\n    this.keyPointers = [NaN, NaN];\n    this.isInProgress = false;\n  }\n\n  public get anchorX() {\n    return this._anchorX;\n  }\n\n  public get anchorY() {\n    return this._anchorY;\n  }\n\n  public get rotation() {\n    return this._rotation;\n  }\n\n  public get timeDelta() {\n    return this.currentTime + this.previousTime;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}