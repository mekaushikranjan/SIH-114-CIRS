{"ast":null,"code":"\"use strict\";\n\nexport default class InteractionManager {\n  waitForRelations = new Map();\n  simultaneousRelations = new Map();\n  blocksHandlersRelations = new Map();\n  constructor() {}\n  configureInteractions(handler, config) {\n    this.dropRelationsForHandlerWithTag(handler.handlerTag);\n    if (config.waitFor) {\n      const waitFor = [];\n      config.waitFor.forEach(otherHandler => {\n        if (typeof otherHandler === 'number') {\n          waitFor.push(otherHandler);\n        } else {\n          waitFor.push(otherHandler.handlerTag);\n        }\n      });\n      this.waitForRelations.set(handler.handlerTag, waitFor);\n    }\n    if (config.simultaneousHandlers) {\n      const simultaneousHandlers = [];\n      config.simultaneousHandlers.forEach(otherHandler => {\n        if (typeof otherHandler === 'number') {\n          simultaneousHandlers.push(otherHandler);\n        } else {\n          simultaneousHandlers.push(otherHandler.handlerTag);\n        }\n      });\n      this.simultaneousRelations.set(handler.handlerTag, simultaneousHandlers);\n    }\n    if (config.blocksHandlers) {\n      const blocksHandlers = [];\n      config.blocksHandlers.forEach(otherHandler => {\n        if (typeof otherHandler === 'number') {\n          blocksHandlers.push(otherHandler);\n        } else {\n          blocksHandlers.push(otherHandler.handlerTag);\n        }\n      });\n      this.blocksHandlersRelations.set(handler.handlerTag, blocksHandlers);\n    }\n  }\n  shouldWaitForHandlerFailure(handler, otherHandler) {\n    const waitFor = this.waitForRelations.get(handler.handlerTag);\n    return waitFor?.find(tag => {\n      return tag === otherHandler.handlerTag;\n    }) !== undefined;\n  }\n  shouldRecognizeSimultaneously(handler, otherHandler) {\n    const simultaneousHandlers = this.simultaneousRelations.get(handler.handlerTag);\n    return simultaneousHandlers?.find(tag => {\n      return tag === otherHandler.handlerTag;\n    }) !== undefined;\n  }\n  shouldRequireHandlerToWaitForFailure(handler, otherHandler) {\n    const waitFor = this.blocksHandlersRelations.get(handler.handlerTag);\n    return waitFor?.find(tag => {\n      return tag === otherHandler.handlerTag;\n    }) !== undefined;\n  }\n  shouldHandlerBeCancelledBy(_handler, otherHandler) {\n    const isNativeHandler = otherHandler.constructor.name === 'NativeViewGestureHandler';\n    const isActive = otherHandler.active;\n    const isButton = otherHandler.isButton?.() === true;\n    return isNativeHandler && isActive && !isButton;\n  }\n  dropRelationsForHandlerWithTag(handlerTag) {\n    this.waitForRelations.delete(handlerTag);\n    this.simultaneousRelations.delete(handlerTag);\n    this.blocksHandlersRelations.delete(handlerTag);\n  }\n  reset() {\n    this.waitForRelations.clear();\n    this.simultaneousRelations.clear();\n    this.blocksHandlersRelations.clear();\n  }\n  static get instance() {\n    if (!this._instance) {\n      this._instance = new InteractionManager();\n    }\n    return this._instance;\n  }\n}","map":{"version":3,"names":["InteractionManager","waitForRelations","Map","simultaneousRelations","blocksHandlersRelations","constructor","configureInteractions","handler","config","dropRelationsForHandlerWithTag","handlerTag","waitFor","forEach","otherHandler","push","set","simultaneousHandlers","blocksHandlers","shouldWaitForHandlerFailure","get","find","tag","undefined","shouldRecognizeSimultaneously","shouldRequireHandlerToWaitForFailure","shouldHandlerBeCancelledBy","_handler","isNativeHandler","name","isActive","active","isButton","delete","reset","clear","instance","_instance"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\web\\tools\\InteractionManager.ts"],"sourcesContent":["import type IGestureHandler from '../handlers/IGestureHandler';\nimport { Config, Handler } from '../interfaces';\n\nexport default class InteractionManager {\n  private static _instance: InteractionManager;\n  private readonly waitForRelations: Map<number, number[]> = new Map();\n  private readonly simultaneousRelations: Map<number, number[]> = new Map();\n  private readonly blocksHandlersRelations: Map<number, number[]> = new Map();\n\n  // Private becaues of singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public configureInteractions(handler: IGestureHandler, config: Config) {\n    this.dropRelationsForHandlerWithTag(handler.handlerTag);\n\n    if (config.waitFor) {\n      const waitFor: number[] = [];\n      config.waitFor.forEach((otherHandler: Handler): void => {\n        // New API reference\n        if (typeof otherHandler === 'number') {\n          waitFor.push(otherHandler);\n        } else {\n          // Old API reference\n          waitFor.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.waitForRelations.set(handler.handlerTag, waitFor);\n    }\n\n    if (config.simultaneousHandlers) {\n      const simultaneousHandlers: number[] = [];\n      config.simultaneousHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          simultaneousHandlers.push(otherHandler);\n        } else {\n          simultaneousHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.simultaneousRelations.set(handler.handlerTag, simultaneousHandlers);\n    }\n\n    if (config.blocksHandlers) {\n      const blocksHandlers: number[] = [];\n      config.blocksHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          blocksHandlers.push(otherHandler);\n        } else {\n          blocksHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.blocksHandlersRelations.set(handler.handlerTag, blocksHandlers);\n    }\n  }\n\n  public shouldWaitForHandlerFailure(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.waitForRelations.get(\n      handler.handlerTag\n    );\n\n    return (\n      waitFor?.find((tag: number) => {\n        return tag === otherHandler.handlerTag;\n      }) !== undefined\n    );\n  }\n\n  public shouldRecognizeSimultaneously(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    const simultaneousHandlers: number[] | undefined =\n      this.simultaneousRelations.get(handler.handlerTag);\n\n    return (\n      simultaneousHandlers?.find((tag: number) => {\n        return tag === otherHandler.handlerTag;\n      }) !== undefined\n    );\n  }\n\n  public shouldRequireHandlerToWaitForFailure(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.blocksHandlersRelations.get(\n      handler.handlerTag\n    );\n\n    return (\n      waitFor?.find((tag: number) => {\n        return tag === otherHandler.handlerTag;\n      }) !== undefined\n    );\n  }\n\n  public shouldHandlerBeCancelledBy(\n    _handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    // We check constructor name instead of using `instanceof` in order do avoid circular dependencies\n    const isNativeHandler =\n      otherHandler.constructor.name === 'NativeViewGestureHandler';\n    const isActive = otherHandler.active;\n    const isButton = otherHandler.isButton?.() === true;\n\n    return isNativeHandler && isActive && !isButton;\n  }\n\n  public dropRelationsForHandlerWithTag(handlerTag: number): void {\n    this.waitForRelations.delete(handlerTag);\n    this.simultaneousRelations.delete(handlerTag);\n    this.blocksHandlersRelations.delete(handlerTag);\n  }\n\n  public reset() {\n    this.waitForRelations.clear();\n    this.simultaneousRelations.clear();\n    this.blocksHandlersRelations.clear();\n  }\n\n  public static get instance(): InteractionManager {\n    if (!this._instance) {\n      this._instance = new InteractionManager();\n    }\n\n    return this._instance;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}