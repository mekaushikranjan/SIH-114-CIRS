{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"enabled\"];\nimport { State } from '../../State';\nimport GestureHandler from './GestureHandler';\nconst DEFAULT_MIN_DURATION_MS = 500;\nconst DEFAULT_MAX_DIST_DP = 10;\nconst SCALING_FACTOR = 10;\nexport default class LongPressGestureHandler extends GestureHandler {\n  minDurationMs = DEFAULT_MIN_DURATION_MS;\n  defaultMaxDistSq = DEFAULT_MAX_DIST_DP * SCALING_FACTOR;\n  maxDistSq = this.defaultMaxDistSq;\n  numberOfPointers = 1;\n  startX = 0;\n  startY = 0;\n  startTime = 0;\n  previousTime = 0;\n  init(ref, propsRef) {\n    if (this.config.enableContextMenu === undefined) {\n      this.config.enableContextMenu = false;\n    }\n    super.init(ref, propsRef);\n  }\n  transformNativeEvent() {\n    return Object.assign({}, super.transformNativeEvent(), {\n      duration: Date.now() - this.startTime\n    });\n  }\n  updateGestureConfig(_ref) {\n    let {\n        enabled = true\n      } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    super.updateGestureConfig(Object.assign({\n      enabled: enabled\n    }, props));\n    if (this.config.minDurationMs !== undefined) {\n      this.minDurationMs = this.config.minDurationMs;\n    }\n    if (this.config.maxDist !== undefined) {\n      this.maxDistSq = this.config.maxDist * this.config.maxDist;\n    }\n    if (this.config.numberOfPointers !== undefined) {\n      this.numberOfPointers = this.config.numberOfPointers;\n    }\n  }\n  resetConfig() {\n    super.resetConfig();\n    this.minDurationMs = DEFAULT_MIN_DURATION_MS;\n    this.maxDistSq = this.defaultMaxDistSq;\n  }\n  onStateChange(_newState, _oldState) {\n    clearTimeout(this.activationTimeout);\n  }\n  onPointerDown(event) {\n    if (!this.isButtonInConfig(event.button)) {\n      return;\n    }\n    this.tracker.addToTracker(event);\n    super.onPointerDown(event);\n    this.startX = event.x;\n    this.startY = event.y;\n    this.tryBegin();\n    this.tryActivate();\n    this.tryToSendTouchEvent(event);\n  }\n  onPointerAdd(event) {\n    super.onPointerAdd(event);\n    this.tracker.addToTracker(event);\n    if (this.tracker.trackedPointersCount > this.numberOfPointers) {\n      this.fail();\n      return;\n    }\n    const absoluteCoordsAverage = this.tracker.getAbsoluteCoordsAverage();\n    this.startX = absoluteCoordsAverage.x;\n    this.startY = absoluteCoordsAverage.y;\n    this.tryActivate();\n  }\n  onPointerMove(event) {\n    super.onPointerMove(event);\n    this.tracker.track(event);\n    this.checkDistanceFail();\n  }\n  onPointerOutOfBounds(event) {\n    super.onPointerOutOfBounds(event);\n    this.tracker.track(event);\n    this.checkDistanceFail();\n  }\n  onPointerUp(event) {\n    super.onPointerUp(event);\n    this.tracker.removeFromTracker(event.pointerId);\n    if (this.state === State.ACTIVE) {\n      this.end();\n    } else {\n      this.fail();\n    }\n  }\n  onPointerRemove(event) {\n    super.onPointerRemove(event);\n    this.tracker.removeFromTracker(event.pointerId);\n    if (this.tracker.trackedPointersCount < this.numberOfPointers && this.state !== State.ACTIVE) {\n      this.fail();\n    }\n  }\n  tryBegin() {\n    if (this.state !== State.UNDETERMINED) {\n      return;\n    }\n    this.previousTime = Date.now();\n    this.startTime = this.previousTime;\n    this.begin();\n  }\n  tryActivate() {\n    if (this.tracker.trackedPointersCount !== this.numberOfPointers) {\n      return;\n    }\n    if (this.minDurationMs > 0) {\n      this.activationTimeout = setTimeout(() => {\n        this.activate();\n      }, this.minDurationMs);\n    } else if (this.minDurationMs === 0) {\n      this.activate();\n    }\n  }\n  checkDistanceFail() {\n    const absoluteCoordsAverage = this.tracker.getAbsoluteCoordsAverage();\n    const dx = absoluteCoordsAverage.x - this.startX;\n    const dy = absoluteCoordsAverage.y - this.startY;\n    const distSq = dx * dx + dy * dy;\n    if (distSq <= this.maxDistSq) {\n      return;\n    }\n    if (this.state === State.ACTIVE) {\n      this.cancel();\n    } else {\n      this.fail();\n    }\n  }\n}","map":{"version":3,"names":["State","GestureHandler","DEFAULT_MIN_DURATION_MS","DEFAULT_MAX_DIST_DP","SCALING_FACTOR","LongPressGestureHandler","minDurationMs","defaultMaxDistSq","maxDistSq","numberOfPointers","startX","startY","startTime","previousTime","init","ref","propsRef","config","enableContextMenu","undefined","transformNativeEvent","Object","assign","duration","Date","now","updateGestureConfig","_ref","enabled","props","_objectWithoutPropertiesLoose","_excluded","maxDist","resetConfig","onStateChange","_newState","_oldState","clearTimeout","activationTimeout","onPointerDown","event","isButtonInConfig","button","tracker","addToTracker","x","y","tryBegin","tryActivate","tryToSendTouchEvent","onPointerAdd","trackedPointersCount","fail","absoluteCoordsAverage","getAbsoluteCoordsAverage","onPointerMove","track","checkDistanceFail","onPointerOutOfBounds","onPointerUp","removeFromTracker","pointerId","state","ACTIVE","end","onPointerRemove","UNDETERMINED","begin","setTimeout","activate","dx","dy","distSq","cancel"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\web\\handlers\\LongPressGestureHandler.ts"],"sourcesContent":["import { State } from '../../State';\nimport { AdaptedEvent, Config } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\n\nconst DEFAULT_MIN_DURATION_MS = 500;\nconst DEFAULT_MAX_DIST_DP = 10;\nconst SCALING_FACTOR = 10;\n\nexport default class LongPressGestureHandler extends GestureHandler {\n  private minDurationMs = DEFAULT_MIN_DURATION_MS;\n  private defaultMaxDistSq = DEFAULT_MAX_DIST_DP * SCALING_FACTOR;\n\n  private maxDistSq = this.defaultMaxDistSq;\n  private numberOfPointers = 1;\n  private startX = 0;\n  private startY = 0;\n\n  private startTime = 0;\n  private previousTime = 0;\n\n  private activationTimeout: number | undefined;\n\n  public init(ref: number, propsRef: React.RefObject<unknown>) {\n    if (this.config.enableContextMenu === undefined) {\n      this.config.enableContextMenu = false;\n    }\n\n    super.init(ref, propsRef);\n  }\n\n  protected transformNativeEvent() {\n    return {\n      ...super.transformNativeEvent(),\n      duration: Date.now() - this.startTime,\n    };\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n\n    if (this.config.minDurationMs !== undefined) {\n      this.minDurationMs = this.config.minDurationMs;\n    }\n\n    if (this.config.maxDist !== undefined) {\n      this.maxDistSq = this.config.maxDist * this.config.maxDist;\n    }\n\n    if (this.config.numberOfPointers !== undefined) {\n      this.numberOfPointers = this.config.numberOfPointers;\n    }\n  }\n\n  protected resetConfig(): void {\n    super.resetConfig();\n    this.minDurationMs = DEFAULT_MIN_DURATION_MS;\n    this.maxDistSq = this.defaultMaxDistSq;\n  }\n\n  protected onStateChange(_newState: State, _oldState: State): void {\n    clearTimeout(this.activationTimeout);\n  }\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    if (!this.isButtonInConfig(event.button)) {\n      return;\n    }\n\n    this.tracker.addToTracker(event);\n    super.onPointerDown(event);\n\n    this.startX = event.x;\n    this.startY = event.y;\n\n    this.tryBegin();\n    this.tryActivate();\n\n    this.tryToSendTouchEvent(event);\n  }\n  protected onPointerAdd(event: AdaptedEvent): void {\n    super.onPointerAdd(event);\n    this.tracker.addToTracker(event);\n\n    if (this.tracker.trackedPointersCount > this.numberOfPointers) {\n      this.fail();\n      return;\n    }\n\n    const absoluteCoordsAverage = this.tracker.getAbsoluteCoordsAverage();\n\n    this.startX = absoluteCoordsAverage.x;\n    this.startY = absoluteCoordsAverage.y;\n\n    this.tryActivate();\n  }\n\n  protected onPointerMove(event: AdaptedEvent): void {\n    super.onPointerMove(event);\n    this.tracker.track(event);\n    this.checkDistanceFail();\n  }\n\n  protected onPointerOutOfBounds(event: AdaptedEvent): void {\n    super.onPointerOutOfBounds(event);\n    this.tracker.track(event);\n    this.checkDistanceFail();\n  }\n\n  protected onPointerUp(event: AdaptedEvent): void {\n    super.onPointerUp(event);\n    this.tracker.removeFromTracker(event.pointerId);\n\n    if (this.state === State.ACTIVE) {\n      this.end();\n    } else {\n      this.fail();\n    }\n  }\n\n  protected onPointerRemove(event: AdaptedEvent): void {\n    super.onPointerRemove(event);\n    this.tracker.removeFromTracker(event.pointerId);\n\n    if (\n      this.tracker.trackedPointersCount < this.numberOfPointers &&\n      this.state !== State.ACTIVE\n    ) {\n      this.fail();\n    }\n  }\n\n  private tryBegin(): void {\n    if (this.state !== State.UNDETERMINED) {\n      return;\n    }\n\n    this.previousTime = Date.now();\n    this.startTime = this.previousTime;\n\n    this.begin();\n  }\n\n  private tryActivate(): void {\n    if (this.tracker.trackedPointersCount !== this.numberOfPointers) {\n      return;\n    }\n\n    if (this.minDurationMs > 0) {\n      this.activationTimeout = setTimeout(() => {\n        this.activate();\n      }, this.minDurationMs);\n    } else if (this.minDurationMs === 0) {\n      this.activate();\n    }\n  }\n\n  private checkDistanceFail(): void {\n    const absoluteCoordsAverage = this.tracker.getAbsoluteCoordsAverage();\n\n    const dx = absoluteCoordsAverage.x - this.startX;\n    const dy = absoluteCoordsAverage.y - this.startY;\n    const distSq = dx * dx + dy * dy;\n\n    if (distSq <= this.maxDistSq) {\n      return;\n    }\n\n    if (this.state === State.ACTIVE) {\n      this.cancel();\n    } else {\n      this.fail();\n    }\n  }\n}\n"],"mappings":";;;;AAAA,SAASA,KAAK,QAAQ,aAAa;AAGnC,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,MAAMC,uBAAuB,GAAG,GAAG;AACnC,MAAMC,mBAAmB,GAAG,EAAE;AAC9B,MAAMC,cAAc,GAAG,EAAE;AAEzB,eAAe,MAAMC,uBAAuB,SAASJ,cAAc,CAAC;EAC1DK,aAAa,GAAGJ,uBAAuB;EACvCK,gBAAgB,GAAGJ,mBAAmB,GAAGC,cAAc;EAEvDI,SAAS,GAAG,IAAI,CAACD,gBAAgB;EACjCE,gBAAgB,GAAG,CAAC;EACpBC,MAAM,GAAG,CAAC;EACVC,MAAM,GAAG,CAAC;EAEVC,SAAS,GAAG,CAAC;EACbC,YAAY,GAAG,CAAC;EAIjBC,IAAIA,CAACC,GAAW,EAAEC,QAAkC,EAAE;IAC3D,IAAI,IAAI,CAACC,MAAM,CAACC,iBAAiB,KAAKC,SAAS,EAAE;MAC/C,IAAI,CAACF,MAAM,CAACC,iBAAiB,GAAG,KAAK;IACvC;IAEA,KAAK,CAACJ,IAAI,CAACC,GAAG,EAAEC,QAAQ,CAAC;EAC3B;EAEUI,oBAAoBA,CAAA,EAAG;IAC/B,OAAAC,MAAA,CAAAC,MAAA,KACK,KAAK,CAACF,oBAAoB,CAAC,CAAC;MAC/BG,QAAQ,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACb;IAAA;EAEhC;EAEOc,mBAAmBA,CAAAC,IAAA,EAA6C;IAAA,IAA5C;QAAEC,OAAO,GAAG;MAAuB,CAAC,GAAAD,IAAA;MAAfE,KAAA,GAAAC,6BAAA,CAAAH,IAAA,EAAAI,SAAA;IAC9C,KAAK,CAACL,mBAAmB,CAAAL,MAAA,CAAAC,MAAA;MAAGM,OAAO,EAAEA;IAAO,GAAKC,KAAA,CAAO,CAAC;IAEzD,IAAI,IAAI,CAACZ,MAAM,CAACX,aAAa,KAAKa,SAAS,EAAE;MAC3C,IAAI,CAACb,aAAa,GAAG,IAAI,CAACW,MAAM,CAACX,aAAa;IAChD;IAEA,IAAI,IAAI,CAACW,MAAM,CAACe,OAAO,KAAKb,SAAS,EAAE;MACrC,IAAI,CAACX,SAAS,GAAG,IAAI,CAACS,MAAM,CAACe,OAAO,GAAG,IAAI,CAACf,MAAM,CAACe,OAAO;IAC5D;IAEA,IAAI,IAAI,CAACf,MAAM,CAACR,gBAAgB,KAAKU,SAAS,EAAE;MAC9C,IAAI,CAACV,gBAAgB,GAAG,IAAI,CAACQ,MAAM,CAACR,gBAAgB;IACtD;EACF;EAEUwB,WAAWA,CAAA,EAAS;IAC5B,KAAK,CAACA,WAAW,CAAC,CAAC;IACnB,IAAI,CAAC3B,aAAa,GAAGJ,uBAAuB;IAC5C,IAAI,CAACM,SAAS,GAAG,IAAI,CAACD,gBAAgB;EACxC;EAEU2B,aAAaA,CAACC,SAAgB,EAAEC,SAAgB,EAAQ;IAChEC,YAAY,CAAC,IAAI,CAACC,iBAAiB,CAAC;EACtC;EAEUC,aAAaA,CAACC,KAAmB,EAAQ;IACjD,IAAI,CAAC,IAAI,CAACC,gBAAgB,CAACD,KAAK,CAACE,MAAM,CAAC,EAAE;MACxC;IACF;IAEA,IAAI,CAACC,OAAO,CAACC,YAAY,CAACJ,KAAK,CAAC;IAChC,KAAK,CAACD,aAAa,CAACC,KAAK,CAAC;IAE1B,IAAI,CAAC9B,MAAM,GAAG8B,KAAK,CAACK,CAAC;IACrB,IAAI,CAAClC,MAAM,GAAG6B,KAAK,CAACM,CAAC;IAErB,IAAI,CAACC,QAAQ,CAAC,CAAC;IACf,IAAI,CAACC,WAAW,CAAC,CAAC;IAElB,IAAI,CAACC,mBAAmB,CAACT,KAAK,CAAC;EACjC;EACUU,YAAYA,CAACV,KAAmB,EAAQ;IAChD,KAAK,CAACU,YAAY,CAACV,KAAK,CAAC;IACzB,IAAI,CAACG,OAAO,CAACC,YAAY,CAACJ,KAAK,CAAC;IAEhC,IAAI,IAAI,CAACG,OAAO,CAACQ,oBAAoB,GAAG,IAAI,CAAC1C,gBAAgB,EAAE;MAC7D,IAAI,CAAC2C,IAAI,CAAC,CAAC;MACX;IACF;IAEA,MAAMC,qBAAqB,GAAG,IAAI,CAACV,OAAO,CAACW,wBAAwB,CAAC,CAAC;IAErE,IAAI,CAAC5C,MAAM,GAAG2C,qBAAqB,CAACR,CAAC;IACrC,IAAI,CAAClC,MAAM,GAAG0C,qBAAqB,CAACP,CAAC;IAErC,IAAI,CAACE,WAAW,CAAC,CAAC;EACpB;EAEUO,aAAaA,CAACf,KAAmB,EAAQ;IACjD,KAAK,CAACe,aAAa,CAACf,KAAK,CAAC;IAC1B,IAAI,CAACG,OAAO,CAACa,KAAK,CAAChB,KAAK,CAAC;IACzB,IAAI,CAACiB,iBAAiB,CAAC,CAAC;EAC1B;EAEUC,oBAAoBA,CAAClB,KAAmB,EAAQ;IACxD,KAAK,CAACkB,oBAAoB,CAAClB,KAAK,CAAC;IACjC,IAAI,CAACG,OAAO,CAACa,KAAK,CAAChB,KAAK,CAAC;IACzB,IAAI,CAACiB,iBAAiB,CAAC,CAAC;EAC1B;EAEUE,WAAWA,CAACnB,KAAmB,EAAQ;IAC/C,KAAK,CAACmB,WAAW,CAACnB,KAAK,CAAC;IACxB,IAAI,CAACG,OAAO,CAACiB,iBAAiB,CAACpB,KAAK,CAACqB,SAAS,CAAC;IAE/C,IAAI,IAAI,CAACC,KAAK,KAAK9D,KAAK,CAAC+D,MAAM,EAAE;MAC/B,IAAI,CAACC,GAAG,CAAC,CAAC;IACZ,CAAC,MAAM;MACL,IAAI,CAACZ,IAAI,CAAC,CAAC;IACb;EACF;EAEUa,eAAeA,CAACzB,KAAmB,EAAQ;IACnD,KAAK,CAACyB,eAAe,CAACzB,KAAK,CAAC;IAC5B,IAAI,CAACG,OAAO,CAACiB,iBAAiB,CAACpB,KAAK,CAACqB,SAAS,CAAC;IAE/C,IACE,IAAI,CAAClB,OAAO,CAACQ,oBAAoB,GAAG,IAAI,CAAC1C,gBAAgB,IACzD,IAAI,CAACqD,KAAK,KAAK9D,KAAK,CAAC+D,MAAM,EAC3B;MACA,IAAI,CAACX,IAAI,CAAC,CAAC;IACb;EACF;EAEQL,QAAQA,CAAA,EAAS;IACvB,IAAI,IAAI,CAACe,KAAK,KAAK9D,KAAK,CAACkE,YAAY,EAAE;MACrC;IACF;IAEA,IAAI,CAACrD,YAAY,GAAGW,IAAI,CAACC,GAAG,CAAC,CAAC;IAC9B,IAAI,CAACb,SAAS,GAAG,IAAI,CAACC,YAAY;IAElC,IAAI,CAACsD,KAAK,CAAC,CAAC;EACd;EAEQnB,WAAWA,CAAA,EAAS;IAC1B,IAAI,IAAI,CAACL,OAAO,CAACQ,oBAAoB,KAAK,IAAI,CAAC1C,gBAAgB,EAAE;MAC/D;IACF;IAEA,IAAI,IAAI,CAACH,aAAa,GAAG,CAAC,EAAE;MAC1B,IAAI,CAACgC,iBAAiB,GAAG8B,UAAU,CAAC,MAAM;QACxC,IAAI,CAACC,QAAQ,CAAC,CAAC;MACjB,CAAC,EAAE,IAAI,CAAC/D,aAAa,CAAC;IACxB,CAAC,MAAM,IAAI,IAAI,CAACA,aAAa,KAAK,CAAC,EAAE;MACnC,IAAI,CAAC+D,QAAQ,CAAC,CAAC;IACjB;EACF;EAEQZ,iBAAiBA,CAAA,EAAS;IAChC,MAAMJ,qBAAqB,GAAG,IAAI,CAACV,OAAO,CAACW,wBAAwB,CAAC,CAAC;IAErE,MAAMgB,EAAE,GAAGjB,qBAAqB,CAACR,CAAC,GAAG,IAAI,CAACnC,MAAM;IAChD,MAAM6D,EAAE,GAAGlB,qBAAqB,CAACP,CAAC,GAAG,IAAI,CAACnC,MAAM;IAChD,MAAM6D,MAAM,GAAGF,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE;IAEhC,IAAIC,MAAM,IAAI,IAAI,CAAChE,SAAS,EAAE;MAC5B;IACF;IAEA,IAAI,IAAI,CAACsD,KAAK,KAAK9D,KAAK,CAAC+D,MAAM,EAAE;MAC/B,IAAI,CAACU,MAAM,CAAC,CAAC;IACf,CAAC,MAAM;MACL,IAAI,CAACrB,IAAI,CAAC,CAAC;IACb;EACF;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}