{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"shouldCancelWhenOutside\", \"maxDeltaX\", \"maxDeltaY\", \"numberOfTaps\", \"minDurationMs\", \"maxDelayMs\", \"maxDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"];\nimport Hammer from '@egjs/hammerjs';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { isnan } from './utils';\nclass TapGestureHandler extends DiscreteGestureHandler {\n  _shouldFireEndEvent = null;\n  get name() {\n    return 'tap';\n  }\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n  get maxDelayMs() {\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n  simulateCancelEvent(inputData) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n  onGestureActivated(ev) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n  onSuccessfulTap = ev => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent(Object.assign({}, ev, {\n        eventType: Hammer.INPUT_MOVE\n      }));\n    }\n    this.sendEvent(Object.assign({}, ev, {\n      isFinal: true\n    }));\n    this.onGestureEnded(ev);\n  };\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n    if (!this.hasGestureFailed && !this.isGestureRunning && !ev.isFinal) {\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n    if (this.hasGestureFailed) {\n      return;\n    }\n    if (ev.isFinal) {\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n      clearTimeout(this._timer);\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n  getHammerConfig() {\n    return Object.assign({}, super.getHammerConfig(), {\n      event: this.name,\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time: isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n    });\n  }\n  updateGestureConfig(_ref) {\n    let {\n        shouldCancelWhenOutside = true,\n        maxDeltaX = Number.NaN,\n        maxDeltaY = Number.NaN,\n        numberOfTaps = 1,\n        minDurationMs = 525,\n        maxDelayMs = Number.NaN,\n        maxDurationMs = Number.NaN,\n        maxDist = 2,\n        minPointers = 1,\n        maxPointers = 1\n      } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    return super.updateGestureConfig(Object.assign({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers\n    }, props));\n  }\n  onGestureEnded(...props) {\n    clearTimeout(this._timer);\n    super.onGestureEnded(...props);\n  }\n  onWaitingEnded(_gesture) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;","map":{"version":3,"names":["Hammer","DiscreteGestureHandler","isnan","TapGestureHandler","_shouldFireEndEvent","name","NativeGestureClass","Tap","maxDelayMs","config","simulateCancelEvent","inputData","isGestureRunning","cancelEvent","onGestureActivated","ev","onSuccessfulTap","_getPendingGestures","length","eventType","INPUT_END","sendEvent","Object","assign","INPUT_MOVE","isFinal","onGestureEnded","onRawEvent","hasGestureFailed","gesture","hammer","get","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","getHammerConfig","event","taps","numberOfTaps","interval","time","maxDurationMs","updateGestureConfig","_ref","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","_objectWithoutPropertiesLoose","_excluded","onWaitingEnded","_gesture"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\web_hammer\\TapGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  private _shouldFireEndEvent: HammerInputExt | null = null;\n  private _timer: any;\n  private _multiTapTimer: any; // TODO unused?\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = (ev: HammerInputExt) => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev: HammerInput) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        // @ts-ignore TODO(TS) trace down config\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : // @ts-ignore TODO(TS) trace down config\n            this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props: any) {\n    clearTimeout(this._timer);\n    // @ts-ignore TODO(TS) check how onGestureEnded works\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(_gesture: any) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}