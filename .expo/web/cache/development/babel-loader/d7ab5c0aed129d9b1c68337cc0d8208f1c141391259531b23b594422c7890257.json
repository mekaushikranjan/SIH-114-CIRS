{"ast":null,"code":"\"use strict\";\n\nimport React from 'react';\nexport function toArray(object) {\n  if (!Array.isArray(object)) {\n    return [object];\n  }\n  return object;\n}\nexport function withPrevAndCurrent(array, mapFn) {\n  const previousArr = [null];\n  const currentArr = [...array];\n  const transformedArr = [];\n  currentArr.forEach((current, i) => {\n    const previous = previousArr[i];\n    const transformed = mapFn(previous, current);\n    previousArr.push(transformed);\n    transformedArr.push(transformed);\n  });\n  return transformedArr;\n}\nexport function hasProperty(object, key) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\nexport function isTestEnv() {\n  return hasProperty(global, 'process') && process.env.NODE_ENV === 'test';\n}\nexport function tagMessage(msg) {\n  return `[react-native-gesture-handler] ${msg}`;\n}\nexport function isFabric() {\n  return !!global?.nativeFabricUIManager;\n}\nexport function isReact19() {\n  return React.version.startsWith('19.');\n}\nexport function isRemoteDebuggingEnabled() {\n  const localGlobal = global;\n  return (!localGlobal.nativeCallSyncHook || !!localGlobal.__REMOTEDEV__) && !localGlobal.RN$Bridgeless;\n}\nexport function deepEqual(obj1, obj2) {\n  if (obj1 === obj2) {\n    return true;\n  }\n  if (typeof obj1 !== 'object' || typeof obj2 !== 'object' || obj1 === null || obj2 === null) {\n    return false;\n  }\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (const key of keys1) {\n    if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n  return true;\n}\nexport const INT32_MAX = 2 ** 31 - 1;","map":{"version":3,"names":["React","toArray","object","Array","isArray","withPrevAndCurrent","array","mapFn","previousArr","currentArr","transformedArr","forEach","current","i","previous","transformed","push","hasProperty","key","Object","prototype","hasOwnProperty","call","isTestEnv","global","process","env","NODE_ENV","tagMessage","msg","isFabric","nativeFabricUIManager","isReact19","version","startsWith","isRemoteDebuggingEnabled","localGlobal","nativeCallSyncHook","__REMOTEDEV__","RN$Bridgeless","deepEqual","obj1","obj2","keys1","keys","keys2","length","includes","INT32_MAX"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\utils.ts"],"sourcesContent":["import React from 'react';\n\nexport function toArray<T>(object: T | T[]): T[] {\n  if (!Array.isArray(object)) {\n    return [object];\n  }\n\n  return object;\n}\n\nexport type withPrevAndCurrentMapFn<T, Transformed> = (\n  previous: Transformed | null,\n  current: T\n) => Transformed;\nexport function withPrevAndCurrent<T, Transformed>(\n  array: T[],\n  mapFn: withPrevAndCurrentMapFn<T, Transformed>\n): Transformed[] {\n  const previousArr: (null | Transformed)[] = [null];\n  const currentArr = [...array];\n  const transformedArr: Transformed[] = [];\n  currentArr.forEach((current, i) => {\n    // This type cast is fine and solves problem mentioned in https://github.com/software-mansion/react-native-gesture-handler/pull/2867 (namely that `previous` can be undefined).\n    // Unfortunately, linter on our CI does not allow this type of casting as it is unnecessary. To bypass that we use eslint-disable.\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n    const previous = previousArr[i] as Transformed | null;\n    const transformed = mapFn(previous, current);\n    previousArr.push(transformed);\n    transformedArr.push(transformed);\n  });\n  return transformedArr;\n}\n\nexport function hasProperty(object: object, key: string) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nexport function isTestEnv(): boolean {\n  // @ts-ignore Do not use `@types/node` because it will prioritise Node types over RN types which breaks the types (ex. setTimeout) in React Native projects.\n  return hasProperty(global, 'process') && process.env.NODE_ENV === 'test';\n}\n\nexport function tagMessage(msg: string) {\n  return `[react-native-gesture-handler] ${msg}`;\n}\n\n// Helper method to check whether Fabric is enabled, however global.nativeFabricUIManager\n// may not be initialized before the first render\nexport function isFabric(): boolean {\n  // @ts-expect-error nativeFabricUIManager is not yet included in the RN types\n  return !!global?.nativeFabricUIManager;\n}\n\nexport function isReact19() {\n  return React.version.startsWith('19.');\n}\n\nexport function isRemoteDebuggingEnabled(): boolean {\n  // react-native-reanimated checks if in remote debugging in the same way\n  // @ts-ignore global is available but node types are not included\n  const localGlobal = global as any;\n  return (\n    (!localGlobal.nativeCallSyncHook || !!localGlobal.__REMOTEDEV__) &&\n    !localGlobal.RN$Bridgeless\n  );\n}\n\n/**\n * Recursively compares two objects for deep equality.\n *\n * **Note:** This function does not support cyclic references.\n *\n * @param obj1 - The first object to compare.\n * @param obj2 - The second object to compare.\n * @returns `true` if the objects are deeply equal, `false` otherwise.\n */\nexport function deepEqual(obj1: any, obj2: any) {\n  if (obj1 === obj2) {\n    return true;\n  }\n\n  if (\n    typeof obj1 !== 'object' ||\n    typeof obj2 !== 'object' ||\n    obj1 === null ||\n    obj2 === null\n  ) {\n    return false;\n  }\n\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!keys2.includes(key) || !deepEqual(obj1[key], obj2[key])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport const INT32_MAX = 2 ** 31 - 1;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,OAAO,SAASC,OAAOA,CAAIC,MAAe,EAAO;EAC/C,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,MAAM,CAAC,EAAE;IAC1B,OAAO,CAACA,MAAM,CAAC;EACjB;EAEA,OAAOA,MAAM;AACf;AAMA,OAAO,SAASG,kBAAkBA,CAChCC,KAAU,EACVC,KAA8C,EAC/B;EACf,MAAMC,WAAmC,GAAG,CAAC,IAAI,CAAC;EAClD,MAAMC,UAAU,GAAG,CAAC,GAAGH,KAAK,CAAC;EAC7B,MAAMI,cAA6B,GAAG,EAAE;EACxCD,UAAU,CAACE,OAAO,CAAC,CAACC,OAAO,EAAEC,CAAC,KAAK;IAIjC,MAAMC,QAAQ,GAAGN,WAAW,CAACK,CAAC,CAAuB;IACrD,MAAME,WAAW,GAAGR,KAAK,CAACO,QAAQ,EAAEF,OAAO,CAAC;IAC5CJ,WAAW,CAACQ,IAAI,CAACD,WAAW,CAAC;IAC7BL,cAAc,CAACM,IAAI,CAACD,WAAW,CAAC;EAClC,CAAC,CAAC;EACF,OAAOL,cAAc;AACvB;AAEA,OAAO,SAASO,WAAWA,CAACf,MAAc,EAAEgB,GAAW,EAAE;EACvD,OAAOC,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACpB,MAAM,EAAEgB,GAAG,CAAC;AAC1D;AAEA,OAAO,SAASK,SAASA,CAAA,EAAY;EAEnC,OAAON,WAAW,CAACO,MAAM,EAAE,SAAS,CAAC,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,MAAM;AAC1E;AAEA,OAAO,SAASC,UAAUA,CAACC,GAAW,EAAE;EACtC,OAAO,kCAAkCA,GAAG,EAAE;AAChD;AAIA,OAAO,SAASC,QAAQA,CAAA,EAAY;EAElC,OAAO,CAAC,CAACN,MAAM,EAAEO,qBAAqB;AACxC;AAEA,OAAO,SAASC,SAASA,CAAA,EAAG;EAC1B,OAAOhC,KAAK,CAACiC,OAAO,CAACC,UAAU,CAAC,KAAK,CAAC;AACxC;AAEA,OAAO,SAASC,wBAAwBA,CAAA,EAAY;EAGlD,MAAMC,WAAW,GAAGZ,MAAa;EACjC,OACE,CAAC,CAACY,WAAW,CAACC,kBAAkB,IAAI,CAAC,CAACD,WAAW,CAACE,aAAa,KAC/D,CAACF,WAAW,CAACG,aAAa;AAE9B;AAWA,OAAO,SAASC,SAASA,CAACC,IAAS,EAAEC,IAAS,EAAE;EAC9C,IAAID,IAAI,KAAKC,IAAI,EAAE;IACjB,OAAO,IAAI;EACb;EAEA,IACE,OAAOD,IAAI,KAAK,QAAQ,IACxB,OAAOC,IAAI,KAAK,QAAQ,IACxBD,IAAI,KAAK,IAAI,IACbC,IAAI,KAAK,IAAI,EACb;IACA,OAAO,KAAK;EACd;EAEA,MAAMC,KAAK,GAAGxB,MAAM,CAACyB,IAAI,CAACH,IAAI,CAAC;EAC/B,MAAMI,KAAK,GAAG1B,MAAM,CAACyB,IAAI,CAACF,IAAI,CAAC;EAE/B,IAAIC,KAAK,CAACG,MAAM,KAAKD,KAAK,CAACC,MAAM,EAAE;IACjC,OAAO,KAAK;EACd;EAEA,KAAK,MAAM5B,GAAG,IAAIyB,KAAK,EAAE;IACvB,IAAI,CAACE,KAAK,CAACE,QAAQ,CAAC7B,GAAG,CAAC,IAAI,CAACsB,SAAS,CAACC,IAAI,CAACvB,GAAG,CAAC,EAAEwB,IAAI,CAACxB,GAAG,CAAC,CAAC,EAAE;MAC5D,OAAO,KAAK;IACd;EACF;EAEA,OAAO,IAAI;AACb;AAEA,OAAO,MAAM8B,SAAS,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}