{"ast":null,"code":"\"use strict\";\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { State } from '../../State';\nimport { BaseButton } from '../GestureButtons';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2\n};\nexport default class GenericTouchable extends Component {\n  static defaultProps = {\n    delayLongPress: 600,\n    extraButtonProps: {\n      rippleColor: 'transparent',\n      exclusive: true\n    }\n  };\n  longPressDetected = false;\n  pointerInside = true;\n  STATE = TOUCHABLE_STATE.UNDETERMINED;\n  handlePressIn() {\n    if (this.props.delayPressIn) {\n      this.pressInTimeout = setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n        this.pressInTimeout = null;\n      }, this.props.delayPressIn);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n    if (this.props.onLongPress) {\n      const time = (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n      this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n    }\n  }\n  handleMoveOutside() {\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = this.pressOutTimeout || setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n    }\n  }\n  handleGoToUndetermined() {\n    clearTimeout(this.pressOutTimeout);\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = setTimeout(() => {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    }\n  }\n  componentDidMount() {\n    this.reset();\n  }\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout);\n    clearTimeout(this.pressOutTimeout);\n    clearTimeout(this.longPressTimeout);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  }\n  moveToState(newState) {\n    if (newState === this.STATE) {\n      return;\n    }\n    if (newState === TOUCHABLE_STATE.BEGAN) {\n      this.props.onPressIn?.();\n    } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      this.props.onPressOut?.();\n    } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n      this.reset();\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        this.props.onPressOut?.();\n      }\n    }\n    this.props.onStateChange?.(this.STATE, newState);\n    this.STATE = newState;\n  }\n  onGestureEvent = ({\n    nativeEvent: {\n      pointerInside\n    }\n  }) => {\n    if (this.pointerInside !== pointerInside) {\n      if (pointerInside) {\n        this.onMoveIn();\n      } else {\n        this.onMoveOut();\n      }\n    }\n    this.pointerInside = pointerInside;\n  };\n  onHandlerStateChange = ({\n    nativeEvent\n  }) => {\n    const {\n      state\n    } = nativeEvent;\n    if (state === State.CANCELLED || state === State.FAILED) {\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    } else if (state === (Platform.OS !== 'android' ? State.ACTIVE : State.BEGAN) && this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n      this.handlePressIn();\n    } else if (state === State.END) {\n      const shouldCallOnPress = !this.longPressDetected && this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && this.pressOutTimeout === null;\n      this.handleGoToUndetermined();\n      if (shouldCallOnPress) {\n        this.props.onPress?.();\n      }\n    }\n  };\n  onLongPressDetected = () => {\n    this.longPressDetected = true;\n    this.props.onLongPress?.();\n  };\n  componentWillUnmount() {\n    this.reset();\n  }\n  onMoveIn() {\n    if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n  }\n  onMoveOut() {\n    clearTimeout(this.longPressTimeout);\n    this.longPressTimeout = null;\n    if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n      this.handleMoveOutside();\n    }\n  }\n  render() {\n    const hitSlop = (typeof this.props.hitSlop === 'number' ? {\n      top: this.props.hitSlop,\n      left: this.props.hitSlop,\n      bottom: this.props.hitSlop,\n      right: this.props.hitSlop\n    } : this.props.hitSlop) ?? undefined;\n    const coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityRole: this.props.accessibilityRole,\n      accessibilityState: this.props.accessibilityState,\n      accessibilityActions: this.props.accessibilityActions,\n      onAccessibilityAction: this.props.onAccessibilityAction,\n      nativeID: this.props.nativeID,\n      onLayout: this.props.onLayout\n    };\n    return _jsx(BaseButton, Object.assign({\n      style: this.props.containerStyle,\n      onHandlerStateChange: this.props.disabled ? undefined : this.onHandlerStateChange,\n      onGestureEvent: this.onGestureEvent,\n      hitSlop: hitSlop,\n      userSelect: this.props.userSelect,\n      shouldActivateOnStart: this.props.shouldActivateOnStart,\n      disallowInterruption: this.props.disallowInterruption,\n      testID: this.props.testID,\n      touchSoundDisabled: this.props.touchSoundDisabled ?? false,\n      enabled: !this.props.disabled\n    }, this.props.extraButtonProps, {\n      children: _jsx(Animated.View, Object.assign({}, coreProps, {\n        style: this.props.style,\n        children: this.props.children\n      }))\n    }));\n  }\n}","map":{"version":3,"names":["React","Component","Animated","Platform","State","BaseButton","jsx","_jsx","TOUCHABLE_STATE","UNDETERMINED","BEGAN","MOVED_OUTSIDE","GenericTouchable","defaultProps","delayLongPress","extraButtonProps","rippleColor","exclusive","longPressDetected","pointerInside","STATE","handlePressIn","props","delayPressIn","pressInTimeout","setTimeout","moveToState","onLongPress","time","longPressTimeout","onLongPressDetected","handleMoveOutside","delayPressOut","pressOutTimeout","handleGoToUndetermined","clearTimeout","componentDidMount","reset","newState","onPressIn","onPressOut","onStateChange","onGestureEvent","nativeEvent","onMoveIn","onMoveOut","onHandlerStateChange","state","CANCELLED","FAILED","OS","ACTIVE","END","shouldCallOnPress","onPress","componentWillUnmount","render","hitSlop","top","left","bottom","right","undefined","coreProps","accessible","accessibilityLabel","accessibilityHint","accessibilityRole","accessibilityState","accessibilityActions","onAccessibilityAction","nativeID","onLayout","Object","assign","style","containerStyle","disabled","userSelect","shouldActivateOnStart","disallowInterruption","testID","touchSoundDisabled","enabled","children","View"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\components\\touchables\\GenericTouchable.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Component } from 'react';\nimport { Animated, Platform } from 'react-native';\n\nimport { State } from '../../State';\nimport { BaseButton } from '../GestureButtons';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../../handlers/gestureHandlerCommon';\nimport type { NativeViewGestureHandlerPayload } from '../../handlers/GestureHandlerEventPayload';\nimport type { GenericTouchableProps } from './GenericTouchableProps';\n\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */\nexport const TOUCHABLE_STATE = {\n  UNDETERMINED: 0,\n  BEGAN: 1,\n  MOVED_OUTSIDE: 2,\n} as const;\n\ntype TouchableState = (typeof TOUCHABLE_STATE)[keyof typeof TOUCHABLE_STATE];\n\ninterface InternalProps {\n  onStateChange?: (oldState: TouchableState, newState: TouchableState) => void;\n}\n\n// TODO: maybe can be better\n// TODO: all clearTimeout have ! added, maybe they shouldn't ?\ntype Timeout = ReturnType<typeof setTimeout> | null | undefined;\n\n/**\n * GenericTouchable is not intented to be used as it is.\n * Should be treated as a source for the rest of touchables\n */\n\nexport default class GenericTouchable extends Component<\n  GenericTouchableProps & InternalProps\n> {\n  static defaultProps = {\n    delayLongPress: 600,\n    extraButtonProps: {\n      rippleColor: 'transparent',\n      exclusive: true,\n    },\n  };\n\n  // Timeout handlers\n  pressInTimeout: Timeout;\n  pressOutTimeout: Timeout;\n  longPressTimeout: Timeout;\n\n  // This flag is required since recognition of longPress implies not-invoking onPress\n  longPressDetected = false;\n\n  pointerInside = true;\n\n  // State of touchable\n  STATE: TouchableState = TOUCHABLE_STATE.UNDETERMINED;\n\n  // handlePressIn in called on first touch on traveling inside component.\n  // Handles state transition with delay.\n  handlePressIn() {\n    if (this.props.delayPressIn) {\n      this.pressInTimeout = setTimeout(() => {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n        this.pressInTimeout = null;\n      }, this.props.delayPressIn);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n    if (this.props.onLongPress) {\n      const time =\n        (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n      this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n    }\n  }\n  // handleMoveOutside in called on traveling outside component.\n  // Handles state transition with delay.\n  handleMoveOutside() {\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout =\n        this.pressOutTimeout ||\n        setTimeout(() => {\n          this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n          this.pressOutTimeout = null;\n        }, this.props.delayPressOut);\n    } else {\n      this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n    }\n  }\n\n  // handleGoToUndetermined transits to UNDETERMINED state with proper delay\n  handleGoToUndetermined() {\n    clearTimeout(this.pressOutTimeout!); // TODO: maybe it can be undefined\n    if (this.props.delayPressOut) {\n      this.pressOutTimeout = setTimeout(() => {\n        if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n          this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        this.pressOutTimeout = null;\n      }, this.props.delayPressOut);\n    } else {\n      if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n        this.moveToState(TOUCHABLE_STATE.BEGAN);\n      }\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    }\n  }\n\n  componentDidMount() {\n    this.reset();\n  }\n  // Reset timeout to prevent memory leaks.\n  reset() {\n    this.longPressDetected = false;\n    this.pointerInside = true;\n    clearTimeout(this.pressInTimeout!);\n    clearTimeout(this.pressOutTimeout!);\n    clearTimeout(this.longPressTimeout!);\n    this.pressOutTimeout = null;\n    this.longPressTimeout = null;\n    this.pressInTimeout = null;\n  }\n\n  // All states' transitions are defined here.\n  moveToState(newState: TouchableState) {\n    if (newState === this.STATE) {\n      // Ignore dummy transitions\n      return;\n    }\n    if (newState === TOUCHABLE_STATE.BEGAN) {\n      // First touch and moving inside\n      this.props.onPressIn?.();\n    } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // Moving outside\n      this.props.onPressOut?.();\n    } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n      // Need to reset each time on transition to UNDETERMINED\n      this.reset();\n      if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n        // ... and if it happens inside button.\n        this.props.onPressOut?.();\n      }\n    }\n    // Finally call lister (used by subclasses)\n    this.props.onStateChange?.(this.STATE, newState);\n    // ... and make transition.\n    this.STATE = newState;\n  }\n\n  onGestureEvent = ({\n    nativeEvent: { pointerInside },\n  }: GestureEvent<NativeViewGestureHandlerPayload>) => {\n    if (this.pointerInside !== pointerInside) {\n      if (pointerInside) {\n        this.onMoveIn();\n      } else {\n        this.onMoveOut();\n      }\n    }\n    this.pointerInside = pointerInside;\n  };\n\n  onHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<NativeViewGestureHandlerPayload>) => {\n    const { state } = nativeEvent;\n    if (state === State.CANCELLED || state === State.FAILED) {\n      // Need to handle case with external cancellation (e.g. by ScrollView)\n      this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n    } else if (\n      // This platform check is an implication of slightly different behavior of handlers on different platform.\n      // And Android \"Active\" state is achieving on first move of a finger, not on press in.\n      // On iOS event on \"Began\" is not delivered.\n      state === (Platform.OS !== 'android' ? State.ACTIVE : State.BEGAN) &&\n      this.STATE === TOUCHABLE_STATE.UNDETERMINED\n    ) {\n      // Moving inside requires\n      this.handlePressIn();\n    } else if (state === State.END) {\n      const shouldCallOnPress =\n        !this.longPressDetected &&\n        this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE &&\n        this.pressOutTimeout === null;\n      this.handleGoToUndetermined();\n      if (shouldCallOnPress) {\n        // Calls only inside component whether no long press was called previously\n        this.props.onPress?.();\n      }\n    }\n  };\n\n  onLongPressDetected = () => {\n    this.longPressDetected = true;\n    // Checked for in the caller of `onLongPressDetected`, but better to check twice\n    this.props.onLongPress?.();\n  };\n\n  componentWillUnmount() {\n    // To prevent memory leaks\n    this.reset();\n  }\n\n  onMoveIn() {\n    if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n      // This call is not throttled with delays (like in RN's implementation).\n      this.moveToState(TOUCHABLE_STATE.BEGAN);\n    }\n  }\n\n  onMoveOut() {\n    // Long press should no longer be detected\n    clearTimeout(this.longPressTimeout!);\n    this.longPressTimeout = null;\n    if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n      this.handleMoveOutside();\n    }\n  }\n\n  render() {\n    const hitSlop =\n      (typeof this.props.hitSlop === 'number'\n        ? {\n            top: this.props.hitSlop,\n            left: this.props.hitSlop,\n            bottom: this.props.hitSlop,\n            right: this.props.hitSlop,\n          }\n        : this.props.hitSlop) ?? undefined;\n\n    const coreProps = {\n      accessible: this.props.accessible !== false,\n      accessibilityLabel: this.props.accessibilityLabel,\n      accessibilityHint: this.props.accessibilityHint,\n      accessibilityRole: this.props.accessibilityRole,\n      // TODO: check if changed to no 's' correctly, also removed 2 props that are no longer available: `accessibilityComponentType` and `accessibilityTraits`,\n      // would be good to check if it is ok for sure, see: https://github.com/facebook/react-native/issues/24016\n      accessibilityState: this.props.accessibilityState,\n      accessibilityActions: this.props.accessibilityActions,\n      onAccessibilityAction: this.props.onAccessibilityAction,\n      nativeID: this.props.nativeID,\n      onLayout: this.props.onLayout,\n    };\n\n    return (\n      <BaseButton\n        style={this.props.containerStyle}\n        onHandlerStateChange={\n          // TODO: not sure if it can be undefined instead of null\n          this.props.disabled ? undefined : this.onHandlerStateChange\n        }\n        onGestureEvent={this.onGestureEvent}\n        hitSlop={hitSlop}\n        userSelect={this.props.userSelect}\n        shouldActivateOnStart={this.props.shouldActivateOnStart}\n        disallowInterruption={this.props.disallowInterruption}\n        testID={this.props.testID}\n        touchSoundDisabled={this.props.touchSoundDisabled ?? false}\n        enabled={!this.props.disabled}\n        {...this.props.extraButtonProps}>\n        <Animated.View {...coreProps} style={this.props.style}>\n          {this.props.children}\n        </Animated.View>\n      </BaseButton>\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}