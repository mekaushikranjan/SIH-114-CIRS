{"ast":null,"code":"'use strict';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"transitionProperty\"];\nimport { ReanimatedError } from \"../../../../common/index.js\";\nimport { areArraysEqual, convertPropertyToArray, deepEqual } from \"../../../utils/index.js\";\nimport { normalizeDelay, normalizeDuration, normalizeTimingFunction } from \"../common/index.js\";\nimport { normalizeTransitionBehavior } from \"./settings.js\";\nimport { createEmptyTransitionConfig, parseTransitionShorthand } from \"./shorthand.js\";\nexport const ERROR_MESSAGES = {\n  invalidTransitionProperty: transitionProperty => `Invalid transition property \"${JSON.stringify(transitionProperty)}\"`\n};\nfunction getExpandedConfigProperties(config) {\n  const result = config.transition ? parseTransitionShorthand(config.transition) : createEmptyTransitionConfig();\n  for (const [key, value] of Object.entries(config)) {\n    result[key] = convertPropertyToArray(value);\n  }\n  return result;\n}\nconst hasTransition = _ref => {\n  let {\n      transitionProperty\n    } = _ref,\n    rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n  if (transitionProperty.length) {\n    const hasNone = transitionProperty[0] === 'none';\n    if (transitionProperty.some(prop => prop === 'none' !== hasNone)) {\n      throw new ReanimatedError(ERROR_MESSAGES.invalidTransitionProperty(transitionProperty));\n    }\n    return !hasNone;\n  }\n  return Object.values(rest).some(value => value.length);\n};\nexport function normalizeCSSTransitionProperties(config) {\n  const expandedProperties = getExpandedConfigProperties(config);\n  if (!hasTransition(expandedProperties)) {\n    return null;\n  }\n  const {\n    transitionProperty,\n    transitionDuration,\n    transitionTimingFunction,\n    transitionDelay,\n    transitionBehavior\n  } = expandedProperties;\n  const specificProperties = [];\n  let allPropertiesTransition = false;\n  const settings = {};\n  if (!transitionProperty.length) {\n    transitionProperty.push('all');\n  }\n  for (let i = transitionProperty.length - 1; i >= 0; i--) {\n    const property = transitionProperty[i];\n    if (settings?.[property]) {\n      continue;\n    }\n    if (property === 'all') {\n      allPropertiesTransition = true;\n    } else {\n      specificProperties.push(property);\n    }\n    settings[property] = {\n      duration: normalizeDuration(transitionDuration[i % transitionDuration.length]),\n      timingFunction: normalizeTimingFunction(transitionTimingFunction[i % transitionTimingFunction.length]),\n      delay: normalizeDelay(transitionDelay[i % transitionDelay.length]),\n      allowDiscrete: normalizeTransitionBehavior(transitionBehavior[i % transitionBehavior.length])\n    };\n    if (allPropertiesTransition) {\n      break;\n    }\n  }\n  return {\n    properties: allPropertiesTransition ? 'all' : specificProperties.reverse(),\n    settings\n  };\n}\nexport function getNormalizedCSSTransitionConfigUpdates(oldConfig, newConfig) {\n  const configUpdates = {};\n  if (oldConfig.properties !== newConfig.properties && (!Array.isArray(oldConfig.properties) || !Array.isArray(newConfig.properties) || !areArraysEqual(oldConfig.properties, newConfig.properties))) {\n    configUpdates.properties = newConfig.properties;\n  }\n  const newSettingsKeys = Object.keys(newConfig.settings);\n  const oldSettingsKeys = Object.keys(oldConfig.settings);\n  if (newSettingsKeys.length !== oldSettingsKeys.length) {\n    configUpdates.settings = newConfig.settings;\n  } else {\n    for (const key of newSettingsKeys) {\n      if (!oldConfig.settings[key] || !deepEqual(oldConfig.settings[key], newConfig.settings[key])) {\n        configUpdates.settings = newConfig.settings;\n        break;\n      }\n    }\n  }\n  return configUpdates;\n}","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_excluded","ReanimatedError","areArraysEqual","convertPropertyToArray","deepEqual","normalizeDelay","normalizeDuration","normalizeTimingFunction","normalizeTransitionBehavior","createEmptyTransitionConfig","parseTransitionShorthand","ERROR_MESSAGES","invalidTransitionProperty","transitionProperty","JSON","stringify","getExpandedConfigProperties","config","result","transition","key","value","Object","entries","hasTransition","_ref","rest","length","hasNone","some","prop","values","normalizeCSSTransitionProperties","expandedProperties","transitionDuration","transitionTimingFunction","transitionDelay","transitionBehavior","specificProperties","allPropertiesTransition","settings","push","i","property","duration","timingFunction","delay","allowDiscrete","properties","reverse","getNormalizedCSSTransitionConfigUpdates","oldConfig","newConfig","configUpdates","Array","isArray","newSettingsKeys","keys","oldSettingsKeys"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\css\\native\\normalization\\transition\\config.ts"],"sourcesContent":["'use strict';\nimport { ReanimatedError } from '../../../../common';\nimport type {\n  AnyRecord,\n  CSSTransitionProperties,\n  CSSTransitionProperty,\n} from '../../../types';\nimport {\n  areArraysEqual,\n  convertPropertyToArray,\n  deepEqual,\n} from '../../../utils';\nimport type {\n  NormalizedCSSTransitionConfig,\n  NormalizedCSSTransitionConfigUpdates,\n  NormalizedSingleCSSTransitionSettings,\n} from '../../types';\nimport {\n  normalizeDelay,\n  normalizeDuration,\n  normalizeTimingFunction,\n} from '../common';\nimport { normalizeTransitionBehavior } from './settings';\nimport type { ExpandedCSSTransitionConfigProperties } from './shorthand';\nimport {\n  createEmptyTransitionConfig,\n  parseTransitionShorthand,\n} from './shorthand';\n\nexport const ERROR_MESSAGES = {\n  invalidTransitionProperty: (\n    transitionProperty: CSSTransitionProperty | undefined | string[]\n  ) => `Invalid transition property \"${JSON.stringify(transitionProperty)}\"`,\n};\n\nfunction getExpandedConfigProperties(\n  config: CSSTransitionProperties\n): ExpandedCSSTransitionConfigProperties {\n  const result: AnyRecord = config.transition\n    ? parseTransitionShorthand(config.transition)\n    : createEmptyTransitionConfig();\n\n  for (const [key, value] of Object.entries(config)) {\n    result[key] = convertPropertyToArray(value);\n  }\n\n  return result as ExpandedCSSTransitionConfigProperties;\n}\n\nconst hasTransition = ({\n  transitionProperty,\n  ...rest\n}: ExpandedCSSTransitionConfigProperties) => {\n  if (transitionProperty.length) {\n    const hasNone = transitionProperty[0] === 'none';\n\n    // We allow either all values to be 'none' or none of them to be 'none'\n    if (transitionProperty.some((prop) => (prop === 'none') !== hasNone)) {\n      throw new ReanimatedError(\n        ERROR_MESSAGES.invalidTransitionProperty(transitionProperty)\n      );\n    }\n\n    return !hasNone;\n  }\n\n  // transitionProperty defaults to 'all' if not specified but there are\n  // other transition properties\n  return Object.values(rest).some((value) => value.length);\n};\n\nexport function normalizeCSSTransitionProperties(\n  config: CSSTransitionProperties\n): NormalizedCSSTransitionConfig | null {\n  const expandedProperties = getExpandedConfigProperties(config);\n\n  if (!hasTransition(expandedProperties)) {\n    return null;\n  }\n\n  const {\n    transitionProperty,\n    transitionDuration,\n    transitionTimingFunction,\n    transitionDelay,\n    transitionBehavior,\n  } = expandedProperties;\n  const specificProperties: string[] = [];\n  let allPropertiesTransition = false;\n  const settings: Record<string, NormalizedSingleCSSTransitionSettings> = {};\n\n  if (!transitionProperty.length) {\n    // For cases when transition property hasn't been explicitly specified\n    // (e.g. when only the transitionDuration is set)\n    transitionProperty.push('all');\n  }\n\n  // Go from the last to the first property to ensure that the last\n  // one entry for the same property is used without having to override\n  // it multiple times if specified more than once (we just take the last\n  // occurrence and ignore remaining ones)\n  for (let i = transitionProperty.length - 1; i >= 0; i--) {\n    const property = transitionProperty[i];\n    // Continue if there was a prop with the same name specified later\n    // (we don't want to override the last occurrence of the property)\n    if (settings?.[property]) {\n      continue;\n    }\n\n    if (property === 'all') {\n      allPropertiesTransition = true;\n    } else {\n      specificProperties.push(property);\n    }\n\n    settings[property] = {\n      duration: normalizeDuration(\n        transitionDuration[i % transitionDuration.length]\n      ),\n      timingFunction: normalizeTimingFunction(\n        transitionTimingFunction[i % transitionTimingFunction.length]\n      ),\n      delay: normalizeDelay(transitionDelay[i % transitionDelay.length]),\n      allowDiscrete: normalizeTransitionBehavior(\n        transitionBehavior[i % transitionBehavior.length]\n      ),\n    };\n\n    // 'all' transition property overrides all properties before it,\n    // so we don't need to process them\n    if (allPropertiesTransition) {\n      break;\n    }\n  }\n\n  return {\n    properties: allPropertiesTransition ? 'all' : specificProperties.reverse(),\n    settings,\n  };\n}\n\nexport function getNormalizedCSSTransitionConfigUpdates(\n  oldConfig: NormalizedCSSTransitionConfig,\n  newConfig: NormalizedCSSTransitionConfig\n): NormalizedCSSTransitionConfigUpdates {\n  const configUpdates: NormalizedCSSTransitionConfigUpdates = {};\n\n  if (\n    oldConfig.properties !== newConfig.properties &&\n    (!Array.isArray(oldConfig.properties) ||\n      !Array.isArray(newConfig.properties) ||\n      !areArraysEqual(oldConfig.properties, newConfig.properties))\n  ) {\n    configUpdates.properties = newConfig.properties;\n  }\n\n  const newSettingsKeys = Object.keys(newConfig.settings);\n  const oldSettingsKeys = Object.keys(oldConfig.settings);\n\n  if (newSettingsKeys.length !== oldSettingsKeys.length) {\n    configUpdates.settings = newConfig.settings;\n  } else {\n    for (const key of newSettingsKeys) {\n      if (\n        !oldConfig.settings[key] ||\n        // TODO - think of a better way to compare settings (necessary for\n        // timing functions comparison). Maybe add some custom way instead\n        // of deepEqual\n        !deepEqual(oldConfig.settings[key], newConfig.settings[key])\n      ) {\n        configUpdates.settings = newConfig.settings;\n        break;\n      }\n    }\n  }\n\n  return configUpdates;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}