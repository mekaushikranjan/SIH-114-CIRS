{"ast":null,"code":"'use strict';\n\nconst semverSatisfies = require('semver/functions/satisfies');\nconst semverPrerelease = require('semver/functions/prerelease');\nconst expectedVersion = require('./worklets-version.json');\nconst compatibilityFile = require('../compatibility.json');\nfunction validateVersion(reanimatedVersion) {\n  let workletsVersion;\n  try {\n    const {\n      version\n    } = require('react-native-worklets/package.json');\n    workletsVersion = version;\n  } catch (_e) {\n    return {\n      ok: false,\n      message: \"react-native-worklets package isn't installed. Please install a version between \" + expectedVersion.min + ' and ' + expectedVersion.max + ' to use Reanimated ' + reanimatedVersion + '.'\n    };\n  }\n  if (semverPrerelease(workletsVersion)) {\n    return {\n      ok: true\n    };\n  }\n  const supportedWorkletsVersions = [];\n  for (const key in compatibilityFile) {\n    if (semverSatisfies(reanimatedVersion, key)) {\n      supportedWorkletsVersions.push(...compatibilityFile[key]['react-native-worklets']);\n    }\n  }\n  if (supportedWorkletsVersions.length === 0) {\n    return {\n      ok: true\n    };\n  }\n  for (const version of supportedWorkletsVersions) {\n    if (semverSatisfies(workletsVersion, version)) {\n      return {\n        ok: true\n      };\n    }\n  }\n  return {\n    ok: false,\n    message: `Invalid version of \\`react-native-worklets\\`: \"${workletsVersion}\". Expected the version to be in inclusive range \"${supportedWorkletsVersions.join(', ')}\". Please install a compatible version of \\`react-native-worklets\\`.`\n  };\n}\nmodule.exports = validateVersion;","map":{"version":3,"names":["semverSatisfies","require","semverPrerelease","expectedVersion","compatibilityFile","validateVersion","reanimatedVersion","workletsVersion","version","_e","ok","message","min","max","supportedWorkletsVersions","key","push","length","join","module","exports"],"sources":["C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/node_modules/react-native-reanimated/scripts/validate-worklets-version.js"],"sourcesContent":["'use strict';\n\nconst semverSatisfies = require('semver/functions/satisfies');\nconst semverPrerelease = require('semver/functions/prerelease');\nconst expectedVersion = require('./worklets-version.json');\nconst compatibilityFile = require('../compatibility.json');\n\n/** @returns {{ ok: boolean; message?: string }} */\nfunction validateVersion(reanimatedVersion) {\n  let workletsVersion;\n  try {\n    const { version } = require('react-native-worklets/package.json');\n    workletsVersion = version;\n  } catch (_e) {\n    return {\n      ok: false,\n      message:\n        \"react-native-worklets package isn't installed. Please install a version between \" +\n        expectedVersion.min +\n        ' and ' +\n        expectedVersion.max +\n        ' to use Reanimated ' +\n        reanimatedVersion +\n        '.',\n    };\n  }\n\n  if (semverPrerelease(workletsVersion)) {\n    /**\n     * Don't perform any checks for pre-release versions, like nightlies or\n     * feature previews. The user knows what they're doing.\n     */\n    return { ok: true };\n  }\n\n  const supportedWorkletsVersions = [];\n\n  for (const key in compatibilityFile) {\n    if (semverSatisfies(reanimatedVersion, key)) {\n      // @ts-ignore\n      supportedWorkletsVersions.push(\n        ...compatibilityFile[key]['react-native-worklets']\n      );\n    }\n  }\n\n  if (supportedWorkletsVersions.length === 0) {\n    return { ok: true };\n  }\n\n  for (const version of supportedWorkletsVersions) {\n    if (semverSatisfies(workletsVersion, version)) {\n      return { ok: true };\n    }\n  }\n\n  return {\n    ok: false,\n    message: `Invalid version of \\`react-native-worklets\\`: \"${workletsVersion}\". Expected the version to be in inclusive range \"${supportedWorkletsVersions.join(', ')}\". Please install a compatible version of \\`react-native-worklets\\`.`,\n  };\n}\n\nmodule.exports = validateVersion;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,eAAe,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AAC7D,MAAMC,gBAAgB,GAAGD,OAAO,CAAC,6BAA6B,CAAC;AAC/D,MAAME,eAAe,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AAC1D,MAAMG,iBAAiB,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AAG1D,SAASI,eAAeA,CAACC,iBAAiB,EAAE;EAC1C,IAAIC,eAAe;EACnB,IAAI;IACF,MAAM;MAAEC;IAAQ,CAAC,GAAGP,OAAO,CAAC,oCAAoC,CAAC;IACjEM,eAAe,GAAGC,OAAO;EAC3B,CAAC,CAAC,OAAOC,EAAE,EAAE;IACX,OAAO;MACLC,EAAE,EAAE,KAAK;MACTC,OAAO,EACL,kFAAkF,GAClFR,eAAe,CAACS,GAAG,GACnB,OAAO,GACPT,eAAe,CAACU,GAAG,GACnB,qBAAqB,GACrBP,iBAAiB,GACjB;IACJ,CAAC;EACH;EAEA,IAAIJ,gBAAgB,CAACK,eAAe,CAAC,EAAE;IAKrC,OAAO;MAAEG,EAAE,EAAE;IAAK,CAAC;EACrB;EAEA,MAAMI,yBAAyB,GAAG,EAAE;EAEpC,KAAK,MAAMC,GAAG,IAAIX,iBAAiB,EAAE;IACnC,IAAIJ,eAAe,CAACM,iBAAiB,EAAES,GAAG,CAAC,EAAE;MAE3CD,yBAAyB,CAACE,IAAI,CAC5B,GAAGZ,iBAAiB,CAACW,GAAG,CAAC,CAAC,uBAAuB,CACnD,CAAC;IACH;EACF;EAEA,IAAID,yBAAyB,CAACG,MAAM,KAAK,CAAC,EAAE;IAC1C,OAAO;MAAEP,EAAE,EAAE;IAAK,CAAC;EACrB;EAEA,KAAK,MAAMF,OAAO,IAAIM,yBAAyB,EAAE;IAC/C,IAAId,eAAe,CAACO,eAAe,EAAEC,OAAO,CAAC,EAAE;MAC7C,OAAO;QAAEE,EAAE,EAAE;MAAK,CAAC;IACrB;EACF;EAEA,OAAO;IACLA,EAAE,EAAE,KAAK;IACTC,OAAO,EAAE,kDAAkDJ,eAAe,qDAAqDO,yBAAyB,CAACI,IAAI,CAAC,IAAI,CAAC;EACrK,CAAC;AACH;AAEAC,MAAM,CAACC,OAAO,GAAGf,eAAe","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}