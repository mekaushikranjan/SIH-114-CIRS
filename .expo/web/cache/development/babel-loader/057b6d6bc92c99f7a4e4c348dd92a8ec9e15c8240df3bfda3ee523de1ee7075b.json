{"ast":null,"code":"import { getCurrentConfig, debugLog } from '../config/environment';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { tokenStorage } from '../utils/tokenStorage';\nconst config = getCurrentConfig();\nclass ApiService {\n  maxRetries = 1;\n  retryBaseDelayMs = 400;\n  constructor() {\n    this.baseURL = config.BASE_URL;\n    this.timeout = config.TIMEOUT;\n  }\n  getBaseURL() {\n    return this.baseURL;\n  }\n  getFullURL(endpoint) {\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint.slice(1) : endpoint;\n    return `${this.baseURL}/${cleanEndpoint}`;\n  }\n  async getAuthToken() {\n    try {\n      const token = await tokenStorage.getToken();\n      if (token) {\n        if (token.startsWith('fallback_token') || token.startsWith('mock-') || token === 'test-token') {\n          console.error('‚ùå Fallback/mock token detected, clearing auth data:', token.substring(0, 20) + '...');\n          await tokenStorage.clearAuthData();\n          return null;\n        }\n        const parts = token.split('.');\n        if (parts.length !== 3) {\n          console.error('‚ùå Invalid token format - not a valid JWT:', token.substring(0, 20) + '...');\n          await tokenStorage.clearAuthData();\n          return null;\n        }\n        try {\n          const header = JSON.parse(atob(parts[0]));\n          if (!header.alg || !header.typ) {\n            console.error('‚ùå Invalid JWT header structure');\n            await tokenStorage.clearAuthData();\n            return null;\n          }\n        } catch (e) {\n          console.error('‚ùå Cannot parse JWT header');\n          await tokenStorage.clearAuthData();\n          return null;\n        }\n        console.log('‚úÖ Valid JWT token retrieved:', token.substring(0, 20) + '...');\n      } else {\n        console.log('‚ùå No token found in storage');\n      }\n      return token;\n    } catch (error) {\n      console.error('Error getting auth token:', error);\n      return null;\n    }\n  }\n  buildHeaders = async (initHeaders, isJson = true) => {\n    const token = await this.getAuthToken();\n    const headers = Object.assign({}, initHeaders);\n    if (isJson && !headers['Content-Type']) {\n      headers['Content-Type'] = 'application/json';\n    }\n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n    return headers;\n  };\n  shouldRetry(response, error, attempt) {\n    if (attempt >= this.maxRetries) return false;\n    if (error?.name === 'AbortError') return false;\n    if (!response) return true;\n    if (response.status === 429) return true;\n    if (response.status >= 500 && response.status < 600) return true;\n    if (response && response.status >= 400 && response.status < 500) return false;\n    return false;\n  }\n  async exponentialBackoffDelay(attempt) {\n    const jitter = Math.random() * 100;\n    const delay = this.retryBaseDelayMs * Math.pow(2, attempt) + jitter;\n    await new Promise(res => setTimeout(res, delay));\n  }\n  async request(endpoint, options = {}) {\n    const requestId = Math.random().toString(36).slice(2);\n    const url = `${this.baseURL}${endpoint}`;\n    let attempt = 0;\n    while (true) {\n      let response = null;\n      try {\n        const isFormData = options.body instanceof FormData;\n        const headers = await this.buildHeaders(options.headers, !isFormData);\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), this.timeout);\n        debugLog(`HTTP ${options.method || 'GET'} ‚Üí ${url} [${requestId}] attempt ${attempt + 1}`);\n        console.log(`üåê API Request: ${options.method || 'GET'} ${url}`);\n        response = await fetch(url, Object.assign({}, options, {\n          headers,\n          signal: controller.signal\n        }));\n        clearTimeout(timeoutId);\n        const isJsonResponse = (response.headers.get('content-type') || '').includes('application/json');\n        const parsed = isJsonResponse ? await response.json() : await response.text();\n        if (!response.ok) {\n          const normalizedError = {\n            code: parsed?.error?.code || `HTTP_${response.status}`,\n            message: parsed?.error?.message || response.statusText || 'Request failed',\n            details: parsed?.error?.details\n          };\n          if (response.status === 401 && (normalizedError.code === 'INVALID_TOKEN' || normalizedError.code === 'MALFORMED_TOKEN' || normalizedError.code === 'EXPIRED_TOKEN')) {\n            console.log('üîÑ Token error detected, clearing auth data');\n            await tokenStorage.clearAuthData();\n          }\n          if (this.shouldRetry(response, null, attempt)) {\n            attempt++;\n            await this.exponentialBackoffDelay(attempt - 1);\n            continue;\n          }\n          return {\n            success: false,\n            error: normalizedError\n          };\n        }\n        const data = isJsonResponse ? parsed?.data ?? parsed : parsed;\n        return {\n          success: true,\n          data\n        };\n      } catch (error) {\n        debugLog(`HTTP error ‚Üê ${url} [${requestId}]`, error?.message || error);\n        if (this.shouldRetry(response, error, attempt)) {\n          attempt++;\n          await this.exponentialBackoffDelay(attempt - 1);\n          continue;\n        }\n        return {\n          success: false,\n          error: {\n            code: error?.name === 'AbortError' ? 'TIMEOUT' : 'NETWORK_ERROR',\n            message: error?.message || 'Network error occurred'\n          }\n        };\n      }\n    }\n  }\n  async login(email, password) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n  }\n  async mockLogin(email, password) {\n    return this.request('/mock-auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n  }\n  async firebaseLoginUpsert() {\n    return this.request('/auth/firebase/login', {\n      method: 'POST'\n    });\n  }\n  async verifyOtp(email, otp) {\n    return this.request('/auth/verify-otp', {\n      method: 'POST',\n      body: JSON.stringify({\n        email,\n        otp\n      })\n    });\n  }\n  async resendOtp(email) {\n    return this.request('/auth/resend-otp', {\n      method: 'POST',\n      body: JSON.stringify({\n        email\n      })\n    });\n  }\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(userData)\n    });\n  }\n  async loginWithGoogle(idToken) {\n    return this.request('/auth/login/google', {\n      method: 'POST',\n      body: JSON.stringify({\n        idToken\n      })\n    });\n  }\n  async requestPasswordReset(email) {\n    return this.request('/auth/forgot-password', {\n      method: 'POST',\n      body: JSON.stringify({\n        email\n      })\n    });\n  }\n  async verifyEmail(token) {\n    return this.request(`/auth/verify-email?token=${token}`, {\n      method: 'GET'\n    });\n  }\n  async resendEmailVerification(email) {\n    return this.request('/auth/resend-verification', {\n      method: 'POST',\n      body: JSON.stringify({\n        email\n      })\n    });\n  }\n  async sendPhoneOTP(phoneNumber) {\n    return this.request('/auth/send-phone-otp', {\n      method: 'POST',\n      body: JSON.stringify({\n        phoneNumber\n      })\n    });\n  }\n  async verifyPhoneOTP(phoneNumber, otp) {\n    return this.request('/auth/verify-phone-otp', {\n      method: 'POST',\n      body: JSON.stringify({\n        phoneNumber,\n        otp\n      })\n    });\n  }\n  async refreshToken() {\n    return this.request('/auth/refresh', {\n      method: 'POST'\n    });\n  }\n  async logout() {\n    return this.request('/auth/logout', {\n      method: 'POST'\n    });\n  }\n  async getCurrentUser() {\n    return this.request('/auth/me', {\n      method: 'GET'\n    });\n  }\n  async getDashboardStats() {\n    return this.request('/dashboard/stats');\n  }\n  async getCommunityInsights() {\n    return this.request('/dashboard/insights');\n  }\n  async getUserProfile() {\n    return this.request('/user/profile');\n  }\n  async updateUserProfile(profileData) {\n    return this.request('/user/profile', {\n      method: 'PUT',\n      body: JSON.stringify(profileData)\n    });\n  }\n  async uploadProfileImage(imageFile) {\n    return this.request('/user/profile/image', {\n      method: 'POST',\n      body: imageFile\n    });\n  }\n  async getCategories() {\n    return this.request('/issues/categories');\n  }\n  async reportIssue(issueData) {\n    debugLog('Reporting issue to:', `${this.baseURL}/issues`);\n    let hasVideo = false;\n    try {\n      hasVideo = issueData.has('videos');\n    } catch (error) {\n      hasVideo = false;\n    }\n    const originalTimeout = this.timeout;\n    if (hasVideo) {\n      this.timeout = 120000;\n      debugLog('Extended timeout for video upload:', this.timeout);\n    }\n    try {\n      const result = await this.request('/issues', {\n        method: 'POST',\n        body: issueData\n      });\n      return result;\n    } finally {\n      this.timeout = originalTimeout;\n    }\n  }\n  async getUserIssues(params) {\n    const queryParams = new URLSearchParams();\n    if (params?.status) queryParams.append('status', params.status);\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    const endpoint = `/issues/my-issues${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n    return this.request(endpoint);\n  }\n  async getIssueDetails(issueId) {\n    const endpoint = `/workers/issues/${issueId}`;\n    console.log('üîç getIssueDetails calling endpoint:', endpoint);\n    return this.request(endpoint);\n  }\n  async getDepartmentIssues(category, params) {\n    const queryParams = new URLSearchParams();\n    if (params?.status) queryParams.append('status', params.status);\n    if (params?.district) queryParams.append('district', params.district);\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    const endpoint = `/issues/department/${category}${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n    return this.request(endpoint);\n  }\n  async voteOnIssue(issueId, action) {\n    return this.request(`/issues/${issueId}/vote`, {\n      method: 'POST',\n      body: JSON.stringify({\n        action\n      })\n    });\n  }\n  async getNotifications(params) {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.unreadOnly) queryParams.append('unreadOnly', 'true');\n    const endpoint = `/notifications${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n    return this.request(endpoint);\n  }\n  async markNotificationAsRead(notificationId) {\n    return this.request(`/notifications/${notificationId}/read`, {\n      method: 'PUT'\n    });\n  }\n  async getPublicAlerts() {\n    return this.request('/alerts/public');\n  }\n  async markAlertAsRead(alertId) {\n    return this.request(`/alerts/${alertId}/read`, {\n      method: 'POST'\n    });\n  }\n  async getAnnouncements(params) {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.priority) queryParams.append('priority', params.priority);\n    const endpoint = `/announcements${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n    return this.request(endpoint);\n  }\n  async getDistricts() {\n    return this.request('/locations/districts');\n  }\n  async reverseGeocode(lat, lng) {\n    return this.request(`/locations/reverse-geocode?lat=${lat}&lng=${lng}`);\n  }\n  async submitSupportRequest(data) {\n    return this.request('/support/contact', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n  async submitFeedback(data) {\n    return this.request('/support/feedback', {\n      method: 'POST',\n      body: JSON.stringify(data)\n    });\n  }\n  async getWorkerDashboard(workerId) {\n    return this.request(`/workers/dashboard/${workerId}`);\n  }\n  async getWorkerAssignments(workerId, params) {\n    const queryParams = new URLSearchParams();\n    if (params?.status) queryParams.append('status', params.status);\n    if (params?.priority) queryParams.append('priority', params.priority);\n    const endpoint = `/workers/assignments/${workerId}${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\n    return this.request(endpoint);\n  }\n}\nexport const apiService = new ApiService();\nexport const saveAuthToken = async token => {\n  try {\n    await AsyncStorage.setItem('auth_token', token);\n  } catch (error) {\n    console.error('Error saving auth token:', error);\n  }\n};\nexport const removeAuthToken = async () => {\n  try {\n    await AsyncStorage.removeItem('auth_token');\n  } catch (error) {\n    console.error('Error removing auth token:', error);\n  }\n};\nexport const isAuthenticated = async () => {\n  try {\n    const token = await AsyncStorage.getItem('auth_token');\n    return !!token;\n  } catch (error) {\n    console.error('Error checking authentication:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["getCurrentConfig","debugLog","AsyncStorage","tokenStorage","config","ApiService","maxRetries","retryBaseDelayMs","constructor","baseURL","BASE_URL","timeout","TIMEOUT","getBaseURL","getFullURL","endpoint","cleanEndpoint","startsWith","slice","getAuthToken","token","getToken","console","error","substring","clearAuthData","parts","split","length","header","JSON","parse","atob","alg","typ","e","log","buildHeaders","initHeaders","isJson","headers","Object","assign","shouldRetry","response","attempt","name","status","exponentialBackoffDelay","jitter","Math","random","delay","pow","Promise","res","setTimeout","request","options","requestId","toString","url","isFormData","body","FormData","controller","AbortController","timeoutId","abort","method","fetch","signal","clearTimeout","isJsonResponse","get","includes","parsed","json","text","ok","normalizedError","code","message","statusText","details","success","data","login","email","password","stringify","mockLogin","firebaseLoginUpsert","verifyOtp","otp","resendOtp","register","userData","loginWithGoogle","idToken","requestPasswordReset","verifyEmail","resendEmailVerification","sendPhoneOTP","phoneNumber","verifyPhoneOTP","refreshToken","logout","getCurrentUser","getDashboardStats","getCommunityInsights","getUserProfile","updateUserProfile","profileData","uploadProfileImage","imageFile","getCategories","reportIssue","issueData","hasVideo","has","originalTimeout","result","getUserIssues","params","queryParams","URLSearchParams","append","page","limit","getIssueDetails","issueId","getDepartmentIssues","category","district","voteOnIssue","action","getNotifications","unreadOnly","markNotificationAsRead","notificationId","getPublicAlerts","markAlertAsRead","alertId","getAnnouncements","priority","getDistricts","reverseGeocode","lat","lng","submitSupportRequest","submitFeedback","getWorkerDashboard","workerId","getWorkerAssignments","apiService","saveAuthToken","setItem","removeAuthToken","removeItem","isAuthenticated","getItem"],"sources":["C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/src/services/apiService.ts"],"sourcesContent":["import { getCurrentConfig, FEATURE_FLAGS, debugLog } from '../config/environment';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { tokenStorage } from '../utils/tokenStorage';\r\n\r\n// API Configuration - Use environment config\r\nconst config = getCurrentConfig();\r\n\r\n// Types for API responses\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: {\r\n    code: string;\r\n    message: string;\r\n    details?: any;\r\n  };\r\n}\r\n\r\nexport interface DashboardStats {\r\n  totalIssues: number;\r\n  resolvedIssues: number;\r\n  inProgressIssues: number;\r\n  pendingIssues: number;\r\n  averageResolutionTime: number;\r\n  categoryStats: Array<{\r\n    category: string;\r\n    count: number;\r\n    resolved: number;\r\n  }>;\r\n  districtStats: Array<{\r\n    district: string;\r\n    count: number;\r\n    resolved: number;\r\n  }>;\r\n}\r\n\r\nexport interface UserProfile {\r\n  id: string;\r\n  name: string;\r\n  fullName?: string;\r\n  email: string;\r\n  phone: string;\r\n  phoneNumber?: string;\r\n  district: string;\r\n  block: string;\r\n  profileImage: string | null;\r\n  profilePicture?: string | null;\r\n  language: 'en' | 'hi';\r\n  notificationsEnabled: boolean;\r\n  role?: 'citizen' | 'groundworker' | 'admin' | 'CITIZEN' | 'ADMIN';\r\n  emailVerified?: boolean;\r\n  phoneVerified?: boolean;\r\n  isActive?: boolean;\r\n  twoFactorEnabled?: boolean;\r\n  createdAt: string;\r\n  lastLogin?: string;\r\n  stats: {\r\n    issuesReported: number;\r\n    issuesResolved: number;\r\n    upvotesGiven: number;\r\n  };\r\n}\r\n\r\nexport interface Issue {\r\n  id: string;\r\n  trackingNumber: string;\r\n  category: string;\r\n  subcategory: string;\r\n  description: string;\r\n  status: 'pending' | 'in-progress' | 'resolved' | 'rejected';\r\n  priority: 'low' | 'medium' | 'high';\r\n  location: {\r\n    latitude: number;\r\n    longitude: number;\r\n    address: string;\r\n  };\r\n  images: string[];\r\n  videos: string[];\r\n  upvotes: number;\r\n  hasUserUpvoted: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  timeline: Array<{\r\n    status: string;\r\n    message: string;\r\n    timestamp: string;\r\n  }>;\r\n}\r\n\r\nexport interface Category {\r\n  id: string;\r\n  name: string;\r\n  icon: string;\r\n  subcategories: Array<{\r\n    id: string;\r\n    name: string;\r\n  }>;\r\n}\r\n\r\n// API Service Class\r\nclass ApiService {\r\n  private baseURL: string;\r\n  private timeout: number;\r\n  private maxRetries = 1; // Reduced from 3 to 1\r\n  private retryBaseDelayMs = 400;\r\n\r\n  constructor() {\r\n    this.baseURL = config.BASE_URL;\r\n    this.timeout = config.TIMEOUT;\r\n  }\r\n\r\n  // Get the base URL for direct fetch calls\r\n  getBaseURL(): string {\r\n    return this.baseURL;\r\n  }\r\n\r\n  // Get the full URL for an endpoint\r\n  getFullURL(endpoint: string): string {\r\n    // Remove leading slash if present to avoid double slashes\r\n    const cleanEndpoint = endpoint.startsWith('/') ? endpoint.slice(1) : endpoint;\r\n    return `${this.baseURL}/${cleanEndpoint}`;\r\n  }\r\n\r\n  // Get authentication token (unified via tokenStorage)\r\n  private async getAuthToken(): Promise<string | null> {\r\n    try {\r\n      const token = await tokenStorage.getToken();\r\n      if (token) {\r\n        // Check for fallback/mock tokens and reject them\r\n        if (token.startsWith('fallback_token') || token.startsWith('mock-') || token === 'test-token') {\r\n          console.error('‚ùå Fallback/mock token detected, clearing auth data:', token.substring(0, 20) + '...');\r\n          await tokenStorage.clearAuthData();\r\n          return null;\r\n        }\r\n        \r\n        // Validate token format (basic JWT structure check)\r\n        const parts = token.split('.');\r\n        if (parts.length !== 3) {\r\n          console.error('‚ùå Invalid token format - not a valid JWT:', token.substring(0, 20) + '...');\r\n          // Clear the invalid token\r\n          await tokenStorage.clearAuthData();\r\n          return null;\r\n        }\r\n        \r\n        // Additional validation: check if it looks like a real JWT\r\n        try {\r\n          const header = JSON.parse(atob(parts[0]));\r\n          if (!header.alg || !header.typ) {\r\n            console.error('‚ùå Invalid JWT header structure');\r\n            await tokenStorage.clearAuthData();\r\n            return null;\r\n          }\r\n        } catch (e) {\r\n          console.error('‚ùå Cannot parse JWT header');\r\n          await tokenStorage.clearAuthData();\r\n          return null;\r\n        }\r\n        \r\n        console.log('‚úÖ Valid JWT token retrieved:', token.substring(0, 20) + '...');\r\n      } else {\r\n        console.log('‚ùå No token found in storage');\r\n      }\r\n      return token;\r\n    } catch (error) {\r\n      console.error('Error getting auth token:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private buildHeaders = async (initHeaders?: HeadersInit, isJson: boolean = true): Promise<HeadersInit> => {\r\n    const token = await this.getAuthToken();\r\n    const headers: Record<string, string> = { ...(initHeaders as Record<string, string>) };\r\n    if (isJson && !headers['Content-Type']) {\r\n      headers['Content-Type'] = 'application/json';\r\n    }\r\n    if (token) {\r\n      headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return headers;\r\n  };\r\n\r\n  private shouldRetry(response: Response | null, error: any, attempt: number): boolean {\r\n    if (attempt >= this.maxRetries) return false;\r\n    if (error?.name === 'AbortError') return false; // timed out\r\n    if (!response) return true; // network failure\r\n    if (response.status === 429) return true;\r\n    if (response.status >= 500 && response.status < 600) return true;\r\n    // Don't retry on authentication errors (401, 403) or client errors (400-499)\r\n    if (response && response.status >= 400 && response.status < 500) return false;\r\n    return false;\r\n  }\r\n\r\n  private async exponentialBackoffDelay(attempt: number): Promise<void> {\r\n    const jitter = Math.random() * 100;\r\n    const delay = this.retryBaseDelayMs * Math.pow(2, attempt) + jitter;\r\n    await new Promise((res) => setTimeout(res, delay));\r\n  }\r\n\r\n  // Generic API request method with retries, timeout, and JSON/multipart handling\r\n  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<ApiResponse<T>> {\r\n    const requestId = Math.random().toString(36).slice(2);\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    let attempt = 0;\r\n\r\n    while (true) {\r\n      let response: Response | null = null;\r\n      try {\r\n        const isFormData = options.body instanceof FormData;\r\n        const headers = await this.buildHeaders(options.headers, !isFormData);\r\n\r\n        const controller = new AbortController();\r\n        const timeoutId = setTimeout(() => controller.abort(), this.timeout);\r\n\r\n        debugLog(`HTTP ${options.method || 'GET'} ‚Üí ${url} [${requestId}] attempt ${attempt + 1}`);\r\n        console.log(`üåê API Request: ${options.method || 'GET'} ${url}`);\r\n\r\n        response = await fetch(url, {\r\n          ...options,\r\n          headers,\r\n          signal: controller.signal,\r\n        });\r\n\r\n        clearTimeout(timeoutId);\r\n\r\n        const isJsonResponse = (response.headers.get('content-type') || '').includes('application/json');\r\n        const parsed = isJsonResponse ? await response.json() : await response.text();\r\n\r\n        if (!response.ok) {\r\n          const normalizedError = {\r\n            code: (parsed as any)?.error?.code || `HTTP_${response.status}`,\r\n            message: (parsed as any)?.error?.message || response.statusText || 'Request failed',\r\n            details: (parsed as any)?.error?.details,\r\n          };\r\n\r\n          // Handle token-related errors\r\n          if (response.status === 401 && (normalizedError.code === 'INVALID_TOKEN' || normalizedError.code === 'MALFORMED_TOKEN' || normalizedError.code === 'EXPIRED_TOKEN')) {\r\n            console.log('üîÑ Token error detected, clearing auth data');\r\n            await tokenStorage.clearAuthData();\r\n          }\r\n\r\n          if (this.shouldRetry(response, null, attempt)) {\r\n            attempt++;\r\n            await this.exponentialBackoffDelay(attempt - 1);\r\n            continue;\r\n          }\r\n\r\n          return { success: false, error: normalizedError };\r\n        }\r\n\r\n        const data = isJsonResponse ? (parsed as any)?.data ?? (parsed as any) : (parsed as any);\r\n        return { success: true, data };\r\n      } catch (error: any) {\r\n        debugLog(`HTTP error ‚Üê ${url} [${requestId}]`, error?.message || error);\r\n        if (this.shouldRetry(response, error, attempt)) {\r\n          attempt++;\r\n          await this.exponentialBackoffDelay(attempt - 1);\r\n          continue;\r\n        }\r\n        return {\r\n          success: false,\r\n          error: {\r\n            code: error?.name === 'AbortError' ? 'TIMEOUT' : 'NETWORK_ERROR',\r\n            message: error?.message || 'Network error occurred',\r\n          },\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  // Authentication APIs\r\n  async login(email: string, password: string): Promise<ApiResponse<{ user: UserProfile; token: string }>> {\r\n    return this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n  }\r\n\r\n  // Mock authentication for development (bypasses Firebase)\r\n  async mockLogin(email: string, password: string): Promise<ApiResponse<{ user: UserProfile; token: string }>> {\r\n    return this.request('/mock-auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n  }\r\n\r\n  // Firebase token upsert/login (server-side user ensure)\r\n  async firebaseLoginUpsert(): Promise<ApiResponse<{ user: UserProfile }>> {\r\n    return this.request('/auth/firebase/login', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  async verifyOtp(email: string, otp: string): Promise<ApiResponse<{ user: UserProfile; token: string }>> {\r\n    return this.request('/auth/verify-otp', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email, otp }),\r\n    });\r\n  }\r\n\r\n  async resendOtp(email: string): Promise<ApiResponse<{ message: string }>> {\r\n    return this.request('/auth/resend-otp', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email }),\r\n    });\r\n  }\r\n\r\n  async register(userData: {\r\n    name: string;\r\n    email: string;\r\n    phone: string;\r\n    password: string;\r\n    confirmPassword: string;\r\n    district: string;\r\n    block: string;\r\n  }): Promise<ApiResponse<{ user: UserProfile; token: string }>> {\r\n    return this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify(userData),\r\n    });\r\n  }\r\n\r\n  // Google OAuth login\r\n  async loginWithGoogle(idToken: string): Promise<ApiResponse<{ user: UserProfile; token: string }>> {\r\n    return this.request('/auth/login/google', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ idToken }),\r\n    });\r\n  }\r\n\r\n  // Password reset\r\n  async requestPasswordReset(email: string): Promise<ApiResponse<{ message: string }>> {\r\n    return this.request('/auth/forgot-password', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email }),\r\n    });\r\n  }\r\n\r\n  // Email verification\r\n  async verifyEmail(token: string): Promise<ApiResponse<{ message: string }>> {\r\n    return this.request(`/auth/verify-email?token=${token}`, {\r\n      method: 'GET',\r\n    });\r\n  }\r\n\r\n  async resendEmailVerification(email: string): Promise<ApiResponse<{ message: string }>> {\r\n    return this.request('/auth/resend-verification', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ email }),\r\n    });\r\n  }\r\n\r\n  // Phone verification\r\n  async sendPhoneOTP(phoneNumber: string): Promise<ApiResponse<{ messageId: string; expiresIn: number }>> {\r\n    return this.request('/auth/send-phone-otp', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ phoneNumber }),\r\n    });\r\n  }\r\n\r\n  async verifyPhoneOTP(phoneNumber: string, otp: string): Promise<ApiResponse<{ message: string; phoneVerified: boolean }>> {\r\n    return this.request('/auth/verify-phone-otp', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ phoneNumber, otp }),\r\n    });\r\n  }\r\n\r\n  // Session management\r\n  async refreshToken(): Promise<ApiResponse<{ token: string }>> {\r\n    return this.request('/auth/refresh', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  async logout(): Promise<ApiResponse<{ message: string }>> {\r\n    return this.request('/auth/logout', {\r\n      method: 'POST',\r\n    });\r\n  }\r\n\r\n  async getCurrentUser(): Promise<ApiResponse<{ user: UserProfile }>> {\r\n    return this.request('/auth/me', {\r\n      method: 'GET',\r\n    });\r\n  }\r\n\r\n  // Dashboard APIs\r\n  async getDashboardStats(): Promise<ApiResponse<DashboardStats>> {\r\n    return this.request('/dashboard/stats');\r\n  }\r\n\r\n  async getCommunityInsights(): Promise<ApiResponse<any>> {\r\n    return this.request('/dashboard/insights');\r\n  }\r\n\r\n  // User Profile APIs\r\n  async getUserProfile(): Promise<ApiResponse<UserProfile>> {\r\n    return this.request('/user/profile');\r\n  }\r\n\r\n  async updateUserProfile(profileData: Partial<UserProfile>): Promise<ApiResponse<UserProfile>> {\r\n    return this.request('/user/profile', {\r\n      method: 'PUT',\r\n      body: JSON.stringify(profileData),\r\n    });\r\n  }\r\n\r\n  async uploadProfileImage(imageFile: FormData): Promise<ApiResponse<{ profileImage: string }>> {\r\n    return this.request('/user/profile/image', {\r\n      method: 'POST',\r\n      // Content-Type must be omitted for FormData; handled automatically\r\n      body: imageFile,\r\n    });\r\n  }\r\n\r\n  // Issue Management APIs\r\n  async getCategories(): Promise<ApiResponse<Category[]>> {\r\n    return this.request('/issues/categories');\r\n  }\r\n\r\n  async reportIssue(issueData: FormData): Promise<ApiResponse<{ issueId: string; trackingNumber: string }>> {\r\n    debugLog('Reporting issue to:', `${this.baseURL}/issues`);\r\n    \r\n    // Check if the form data contains videos for extended timeout\r\n    let hasVideo = false;\r\n    try {\r\n      // Check if FormData has videos by checking if 'videos' key exists\r\n      hasVideo = issueData.has('videos');\r\n    } catch (error) {\r\n      // Fallback: assume video if we can't check\r\n      hasVideo = false;\r\n    }\r\n    \r\n    // Use extended timeout for video uploads\r\n    const originalTimeout = this.timeout;\r\n    if (hasVideo) {\r\n      this.timeout = 120000; // 2 minutes for video uploads\r\n      debugLog('Extended timeout for video upload:', this.timeout);\r\n    }\r\n    \r\n    try {\r\n      const result = await this.request<{ issueId: string; trackingNumber: string }>('/issues', {\r\n        method: 'POST',\r\n        body: issueData,\r\n      });\r\n      return result;\r\n    } finally {\r\n      // Restore original timeout\r\n      this.timeout = originalTimeout;\r\n    }\r\n  }\r\n\r\n  async getUserIssues(params?: {\r\n    status?: string;\r\n    page?: number;\r\n    limit?: number;\r\n  }): Promise<ApiResponse<{ issues: Issue[]; pagination: any }>> {\r\n    const queryParams = new URLSearchParams();\r\n    if (params?.status) queryParams.append('status', params.status);\r\n    if (params?.page) queryParams.append('page', params.page.toString());\r\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\r\n\r\n    const endpoint = `/issues/my-issues${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\r\n    return this.request(endpoint);\r\n  }\r\n\r\n  async getIssueDetails(issueId: string): Promise<ApiResponse<Issue>> {\r\n    const endpoint = `/workers/issues/${issueId}`;\r\n    console.log('üîç getIssueDetails calling endpoint:', endpoint);\r\n    return this.request(endpoint);\r\n  }\r\n\r\n  async getDepartmentIssues(category: string, params?: {\r\n    status?: string;\r\n    district?: string;\r\n    page?: number;\r\n    limit?: number;\r\n  }): Promise<ApiResponse<{ issues: Issue[]; pagination: any }>> {\r\n    const queryParams = new URLSearchParams();\r\n    if (params?.status) queryParams.append('status', params.status);\r\n    if (params?.district) queryParams.append('district', params.district);\r\n    if (params?.page) queryParams.append('page', params.page.toString());\r\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\r\n\r\n    const endpoint = `/issues/department/${category}${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\r\n    return this.request(endpoint);\r\n  }\r\n\r\n  async voteOnIssue(issueId: string, action: 'upvote' | 'downvote' | 'remove'): Promise<ApiResponse<any>> {\r\n    return this.request(`/issues/${issueId}/vote`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({ action }),\r\n    });\r\n  }\r\n\r\n  // Notifications APIs\r\n  async getNotifications(params?: {\r\n    page?: number;\r\n    limit?: number;\r\n    unreadOnly?: boolean;\r\n  }): Promise<ApiResponse<any>> {\r\n    const queryParams = new URLSearchParams();\r\n    if (params?.page) queryParams.append('page', params.page.toString());\r\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\r\n    if (params?.unreadOnly) queryParams.append('unreadOnly', 'true');\r\n\r\n    const endpoint = `/notifications${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\r\n    return this.request(endpoint);\r\n  }\r\n\r\n  async markNotificationAsRead(notificationId: string): Promise<ApiResponse<any>> {\r\n    return this.request(`/notifications/${notificationId}/read`, {\r\n      method: 'PUT',\r\n    });\r\n  }\r\n\r\n  // Alerts APIs\r\n  async getPublicAlerts(): Promise<ApiResponse<any[]>> {\r\n    return this.request('/alerts/public');\r\n  }\r\n\r\n  async markAlertAsRead(alertId: string): Promise<ApiResponse<any>> {\r\n    return this.request(`/alerts/${alertId}/read`, { method: 'POST' });\r\n  }\r\n\r\n  // Announcements APIs\r\n  async getAnnouncements(params?: {\r\n    page?: number;\r\n    limit?: number;\r\n    priority?: string;\r\n  }): Promise<ApiResponse<any>> {\r\n    const queryParams = new URLSearchParams();\r\n    if (params?.page) queryParams.append('page', params.page.toString());\r\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\r\n    if (params?.priority) queryParams.append('priority', params.priority);\r\n\r\n    const endpoint = `/announcements${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\r\n    return this.request(endpoint);\r\n  }\r\n\r\n  // Location APIs\r\n  async getDistricts(): Promise<ApiResponse<any>> {\r\n    return this.request('/locations/districts');\r\n  }\r\n\r\n  async reverseGeocode(lat: number, lng: number): Promise<ApiResponse<any>> {\r\n    return this.request(`/locations/reverse-geocode?lat=${lat}&lng=${lng}`);\r\n  }\r\n\r\n  // Support APIs\r\n  async submitSupportRequest(data: {\r\n    subject: string;\r\n    message: string;\r\n    category: string;\r\n  }): Promise<ApiResponse<any>> {\r\n    return this.request('/support/contact', {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  async submitFeedback(data: {\r\n    rating: number;\r\n    feedback: string;\r\n    category: string;\r\n  }): Promise<ApiResponse<any>> {\r\n    return this.request('/support/feedback', {\r\n      method: 'POST',\r\n      body: JSON.stringify(data),\r\n    });\r\n  }\r\n\r\n  // Worker APIs\r\n  async getWorkerDashboard(workerId: string): Promise<ApiResponse<{\r\n    worker: {\r\n      id: string;\r\n      workerId: string;\r\n      name: string;\r\n      department: string;\r\n      rating: number;\r\n      completedIssues: number;\r\n    };\r\n    stats: {\r\n      totalAssigned: number;\r\n      todayAssigned: number;\r\n      inProgress: number;\r\n      completed: number;\r\n      pending: number;\r\n    };\r\n    priorityIssues: Array<{\r\n      id: string;\r\n      issueId: string;\r\n      priority: 'high' | 'medium' | 'low';\r\n      issue: {\r\n        title: string;\r\n        location: string;\r\n        category: string;\r\n      };\r\n    }>;\r\n    recentActivity: any[];\r\n  }>> {\r\n    return this.request(`/workers/dashboard/${workerId}`);\r\n  }\r\n\r\n  async getWorkerAssignments(workerId: string, params?: {\r\n    status?: string;\r\n    priority?: string;\r\n  }): Promise<ApiResponse<{\r\n    assignments: Array<{\r\n      id: string;\r\n      issueId: string;\r\n      workerId: string;\r\n      status: string;\r\n      priority: string;\r\n      assignedAt: string;\r\n      startedAt?: string;\r\n      completedAt?: string;\r\n      estimatedDuration: number;\r\n      actualDuration?: number;\r\n      issue: {\r\n        id: number;\r\n        title: string;\r\n        description: string;\r\n        category: string;\r\n        location: string;\r\n        coordinates?: {\r\n          latitude: number;\r\n          longitude: number;\r\n        };\r\n        images: string[];\r\n        videos: string[];\r\n        reportedBy: string;\r\n        reportedAt: string;\r\n      };\r\n    }>;\r\n  }>> {\r\n    const queryParams = new URLSearchParams();\r\n    if (params?.status) queryParams.append('status', params.status);\r\n    if (params?.priority) queryParams.append('priority', params.priority);\r\n\r\n    const endpoint = `/workers/assignments/${workerId}${queryParams.toString() ? `?${queryParams.toString()}` : ''}`;\r\n    return this.request(endpoint);\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const apiService = new ApiService();\r\n\r\n// Helper functions for common operations\r\nexport const saveAuthToken = async (token: string): Promise<void> => {\r\n  try {\r\n    await AsyncStorage.setItem('auth_token', token);\r\n  } catch (error) {\r\n    console.error('Error saving auth token:', error);\r\n  }\r\n};\r\n\r\nexport const removeAuthToken = async (): Promise<void> => {\r\n  try {\r\n    await AsyncStorage.removeItem('auth_token');\r\n  } catch (error) {\r\n    console.error('Error removing auth token:', error);\r\n  }\r\n};\r\n\r\nexport const isAuthenticated = async (): Promise<boolean> => {\r\n  try {\r\n    const token = await AsyncStorage.getItem('auth_token');\r\n    return !!token;\r\n  } catch (error) {\r\n    console.error('Error checking authentication:', error);\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAiBC,QAAQ,QAAQ,uBAAuB;AACjF,OAAOC,YAAY,MAAM,2CAA2C;AACpE,SAASC,YAAY,QAAQ,uBAAuB;AAGpD,MAAMC,MAAM,GAAGJ,gBAAgB,CAAC,CAAC;AA+FjC,MAAMK,UAAU,CAAC;EAGPC,UAAU,GAAG,CAAC;EACdC,gBAAgB,GAAG,GAAG;EAE9BC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,OAAO,GAAGL,MAAM,CAACM,QAAQ;IAC9B,IAAI,CAACC,OAAO,GAAGP,MAAM,CAACQ,OAAO;EAC/B;EAGAC,UAAUA,CAAA,EAAW;IACnB,OAAO,IAAI,CAACJ,OAAO;EACrB;EAGAK,UAAUA,CAACC,QAAgB,EAAU;IAEnC,MAAMC,aAAa,GAAGD,QAAQ,CAACE,UAAU,CAAC,GAAG,CAAC,GAAGF,QAAQ,CAACG,KAAK,CAAC,CAAC,CAAC,GAAGH,QAAQ;IAC7E,OAAO,GAAG,IAAI,CAACN,OAAO,IAAIO,aAAa,EAAE;EAC3C;EAGA,MAAcG,YAAYA,CAAA,EAA2B;IACnD,IAAI;MACF,MAAMC,KAAK,GAAG,MAAMjB,YAAY,CAACkB,QAAQ,CAAC,CAAC;MAC3C,IAAID,KAAK,EAAE;QAET,IAAIA,KAAK,CAACH,UAAU,CAAC,gBAAgB,CAAC,IAAIG,KAAK,CAACH,UAAU,CAAC,OAAO,CAAC,IAAIG,KAAK,KAAK,YAAY,EAAE;UAC7FE,OAAO,CAACC,KAAK,CAAC,qDAAqD,EAAEH,KAAK,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;UACpG,MAAMrB,YAAY,CAACsB,aAAa,CAAC,CAAC;UAClC,OAAO,IAAI;QACb;QAGA,MAAMC,KAAK,GAAGN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC;QAC9B,IAAID,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;UACtBN,OAAO,CAACC,KAAK,CAAC,2CAA2C,EAAEH,KAAK,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;UAE1F,MAAMrB,YAAY,CAACsB,aAAa,CAAC,CAAC;UAClC,OAAO,IAAI;QACb;QAGA,IAAI;UACF,MAAMI,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;UACzC,IAAI,CAACG,MAAM,CAACI,GAAG,IAAI,CAACJ,MAAM,CAACK,GAAG,EAAE;YAC9BZ,OAAO,CAACC,KAAK,CAAC,gCAAgC,CAAC;YAC/C,MAAMpB,YAAY,CAACsB,aAAa,CAAC,CAAC;YAClC,OAAO,IAAI;UACb;QACF,CAAC,CAAC,OAAOU,CAAC,EAAE;UACVb,OAAO,CAACC,KAAK,CAAC,2BAA2B,CAAC;UAC1C,MAAMpB,YAAY,CAACsB,aAAa,CAAC,CAAC;UAClC,OAAO,IAAI;QACb;QAEAH,OAAO,CAACc,GAAG,CAAC,8BAA8B,EAAEhB,KAAK,CAACI,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;MAC7E,CAAC,MAAM;QACLF,OAAO,CAACc,GAAG,CAAC,6BAA6B,CAAC;MAC5C;MACA,OAAOhB,KAAK;IACd,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,OAAO,IAAI;IACb;EACF;EAEQc,YAAY,GAAG,MAAAA,CAAOC,WAAyB,EAAEC,MAAe,GAAG,IAAI,KAA2B;IACxG,MAAMnB,KAAK,GAAG,MAAM,IAAI,CAACD,YAAY,CAAC,CAAC;IACvC,MAAMqB,OAA+B,GAAAC,MAAA,CAAAC,MAAA,KAASJ,WAAW,CAA6B;IACtF,IAAIC,MAAM,IAAI,CAACC,OAAO,CAAC,cAAc,CAAC,EAAE;MACtCA,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;IAC9C;IACA,IAAIpB,KAAK,EAAE;MACToB,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUpB,KAAK,EAAE;IAC9C;IACA,OAAOoB,OAAO;EAChB,CAAC;EAEOG,WAAWA,CAACC,QAAyB,EAAErB,KAAU,EAAEsB,OAAe,EAAW;IACnF,IAAIA,OAAO,IAAI,IAAI,CAACvC,UAAU,EAAE,OAAO,KAAK;IAC5C,IAAIiB,KAAK,EAAEuB,IAAI,KAAK,YAAY,EAAE,OAAO,KAAK;IAC9C,IAAI,CAACF,QAAQ,EAAE,OAAO,IAAI;IAC1B,IAAIA,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE,OAAO,IAAI;IACxC,IAAIH,QAAQ,CAACG,MAAM,IAAI,GAAG,IAAIH,QAAQ,CAACG,MAAM,GAAG,GAAG,EAAE,OAAO,IAAI;IAEhE,IAAIH,QAAQ,IAAIA,QAAQ,CAACG,MAAM,IAAI,GAAG,IAAIH,QAAQ,CAACG,MAAM,GAAG,GAAG,EAAE,OAAO,KAAK;IAC7E,OAAO,KAAK;EACd;EAEA,MAAcC,uBAAuBA,CAACH,OAAe,EAAiB;IACpE,MAAMI,MAAM,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG;IAClC,MAAMC,KAAK,GAAG,IAAI,CAAC7C,gBAAgB,GAAG2C,IAAI,CAACG,GAAG,CAAC,CAAC,EAAER,OAAO,CAAC,GAAGI,MAAM;IACnE,MAAM,IAAIK,OAAO,CAAEC,GAAG,IAAKC,UAAU,CAACD,GAAG,EAAEH,KAAK,CAAC,CAAC;EACpD;EAGA,MAAcK,OAAOA,CAAI1C,QAAgB,EAAE2C,OAAoB,GAAG,CAAC,CAAC,EAA2B;IAC7F,MAAMC,SAAS,GAAGT,IAAI,CAACC,MAAM,CAAC,CAAC,CAACS,QAAQ,CAAC,EAAE,CAAC,CAAC1C,KAAK,CAAC,CAAC,CAAC;IACrD,MAAM2C,GAAG,GAAG,GAAG,IAAI,CAACpD,OAAO,GAAGM,QAAQ,EAAE;IACxC,IAAI8B,OAAO,GAAG,CAAC;IAEf,OAAO,IAAI,EAAE;MACX,IAAID,QAAyB,GAAG,IAAI;MACpC,IAAI;QACF,MAAMkB,UAAU,GAAGJ,OAAO,CAACK,IAAI,YAAYC,QAAQ;QACnD,MAAMxB,OAAO,GAAG,MAAM,IAAI,CAACH,YAAY,CAACqB,OAAO,CAAClB,OAAO,EAAE,CAACsB,UAAU,CAAC;QAErE,MAAMG,UAAU,GAAG,IAAIC,eAAe,CAAC,CAAC;QACxC,MAAMC,SAAS,GAAGX,UAAU,CAAC,MAAMS,UAAU,CAACG,KAAK,CAAC,CAAC,EAAE,IAAI,CAACzD,OAAO,CAAC;QAEpEV,QAAQ,CAAC,QAAQyD,OAAO,CAACW,MAAM,IAAI,KAAK,MAAMR,GAAG,KAAKF,SAAS,aAAad,OAAO,GAAG,CAAC,EAAE,CAAC;QAC1FvB,OAAO,CAACc,GAAG,CAAC,mBAAmBsB,OAAO,CAACW,MAAM,IAAI,KAAK,IAAIR,GAAG,EAAE,CAAC;QAEhEjB,QAAQ,GAAG,MAAM0B,KAAK,CAACT,GAAG,EAAApB,MAAA,CAAAC,MAAA,KACrBgB,OAAO;UACVlB,OAAO;UACP+B,MAAM,EAAEN,UAAU,CAACM;QAAM,EAC1B,CAAC;QAEFC,YAAY,CAACL,SAAS,CAAC;QAEvB,MAAMM,cAAc,GAAG,CAAC7B,QAAQ,CAACJ,OAAO,CAACkC,GAAG,CAAC,cAAc,CAAC,IAAI,EAAE,EAAEC,QAAQ,CAAC,kBAAkB,CAAC;QAChG,MAAMC,MAAM,GAAGH,cAAc,GAAG,MAAM7B,QAAQ,CAACiC,IAAI,CAAC,CAAC,GAAG,MAAMjC,QAAQ,CAACkC,IAAI,CAAC,CAAC;QAE7E,IAAI,CAAClC,QAAQ,CAACmC,EAAE,EAAE;UAChB,MAAMC,eAAe,GAAG;YACtBC,IAAI,EAAGL,MAAM,EAAUrD,KAAK,EAAE0D,IAAI,IAAI,QAAQrC,QAAQ,CAACG,MAAM,EAAE;YAC/DmC,OAAO,EAAGN,MAAM,EAAUrD,KAAK,EAAE2D,OAAO,IAAItC,QAAQ,CAACuC,UAAU,IAAI,gBAAgB;YACnFC,OAAO,EAAGR,MAAM,EAAUrD,KAAK,EAAE6D;UACnC,CAAC;UAGD,IAAIxC,QAAQ,CAACG,MAAM,KAAK,GAAG,KAAKiC,eAAe,CAACC,IAAI,KAAK,eAAe,IAAID,eAAe,CAACC,IAAI,KAAK,iBAAiB,IAAID,eAAe,CAACC,IAAI,KAAK,eAAe,CAAC,EAAE;YACnK3D,OAAO,CAACc,GAAG,CAAC,6CAA6C,CAAC;YAC1D,MAAMjC,YAAY,CAACsB,aAAa,CAAC,CAAC;UACpC;UAEA,IAAI,IAAI,CAACkB,WAAW,CAACC,QAAQ,EAAE,IAAI,EAAEC,OAAO,CAAC,EAAE;YAC7CA,OAAO,EAAE;YACT,MAAM,IAAI,CAACG,uBAAuB,CAACH,OAAO,GAAG,CAAC,CAAC;YAC/C;UACF;UAEA,OAAO;YAAEwC,OAAO,EAAE,KAAK;YAAE9D,KAAK,EAAEyD;UAAgB,CAAC;QACnD;QAEA,MAAMM,IAAI,GAAGb,cAAc,GAAIG,MAAM,EAAUU,IAAI,IAAKV,MAAc,GAAIA,MAAc;QACxF,OAAO;UAAES,OAAO,EAAE,IAAI;UAAEC;QAAK,CAAC;MAChC,CAAC,CAAC,OAAO/D,KAAU,EAAE;QACnBtB,QAAQ,CAAC,gBAAgB4D,GAAG,KAAKF,SAAS,GAAG,EAAEpC,KAAK,EAAE2D,OAAO,IAAI3D,KAAK,CAAC;QACvE,IAAI,IAAI,CAACoB,WAAW,CAACC,QAAQ,EAAErB,KAAK,EAAEsB,OAAO,CAAC,EAAE;UAC9CA,OAAO,EAAE;UACT,MAAM,IAAI,CAACG,uBAAuB,CAACH,OAAO,GAAG,CAAC,CAAC;UAC/C;QACF;QACA,OAAO;UACLwC,OAAO,EAAE,KAAK;UACd9D,KAAK,EAAE;YACL0D,IAAI,EAAE1D,KAAK,EAAEuB,IAAI,KAAK,YAAY,GAAG,SAAS,GAAG,eAAe;YAChEoC,OAAO,EAAE3D,KAAK,EAAE2D,OAAO,IAAI;UAC7B;QACF,CAAC;MACH;IACF;EACF;EAGA,MAAMK,KAAKA,CAACC,KAAa,EAAEC,QAAgB,EAA8D;IACvG,OAAO,IAAI,CAAChC,OAAO,CAAC,aAAa,EAAE;MACjCY,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAAC;QAAEF,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;EACJ;EAGA,MAAME,SAASA,CAACH,KAAa,EAAEC,QAAgB,EAA8D;IAC3G,OAAO,IAAI,CAAChC,OAAO,CAAC,kBAAkB,EAAE;MACtCY,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAAC;QAAEF,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC;EACJ;EAGA,MAAMG,mBAAmBA,CAAA,EAAgD;IACvE,OAAO,IAAI,CAACnC,OAAO,CAAC,sBAAsB,EAAE;MAC1CY,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,MAAMwB,SAASA,CAACL,KAAa,EAAEM,GAAW,EAA8D;IACtG,OAAO,IAAI,CAACrC,OAAO,CAAC,kBAAkB,EAAE;MACtCY,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAAC;QAAEF,KAAK;QAAEM;MAAI,CAAC;IACrC,CAAC,CAAC;EACJ;EAEA,MAAMC,SAASA,CAACP,KAAa,EAA6C;IACxE,OAAO,IAAI,CAAC/B,OAAO,CAAC,kBAAkB,EAAE;MACtCY,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAAC;QAAEF;MAAM,CAAC;IAChC,CAAC,CAAC;EACJ;EAEA,MAAMQ,QAAQA,CAACC,QAQd,EAA8D;IAC7D,OAAO,IAAI,CAACxC,OAAO,CAAC,gBAAgB,EAAE;MACpCY,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAACO,QAAQ;IAC/B,CAAC,CAAC;EACJ;EAGA,MAAMC,eAAeA,CAACC,OAAe,EAA8D;IACjG,OAAO,IAAI,CAAC1C,OAAO,CAAC,oBAAoB,EAAE;MACxCY,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAAC;QAAES;MAAQ,CAAC;IAClC,CAAC,CAAC;EACJ;EAGA,MAAMC,oBAAoBA,CAACZ,KAAa,EAA6C;IACnF,OAAO,IAAI,CAAC/B,OAAO,CAAC,uBAAuB,EAAE;MAC3CY,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAAC;QAAEF;MAAM,CAAC;IAChC,CAAC,CAAC;EACJ;EAGA,MAAMa,WAAWA,CAACjF,KAAa,EAA6C;IAC1E,OAAO,IAAI,CAACqC,OAAO,CAAC,4BAA4BrC,KAAK,EAAE,EAAE;MACvDiD,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,MAAMiC,uBAAuBA,CAACd,KAAa,EAA6C;IACtF,OAAO,IAAI,CAAC/B,OAAO,CAAC,2BAA2B,EAAE;MAC/CY,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAAC;QAAEF;MAAM,CAAC;IAChC,CAAC,CAAC;EACJ;EAGA,MAAMe,YAAYA,CAACC,WAAmB,EAAkE;IACtG,OAAO,IAAI,CAAC/C,OAAO,CAAC,sBAAsB,EAAE;MAC1CY,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAAC;QAAEc;MAAY,CAAC;IACtC,CAAC,CAAC;EACJ;EAEA,MAAMC,cAAcA,CAACD,WAAmB,EAAEV,GAAW,EAAqE;IACxH,OAAO,IAAI,CAACrC,OAAO,CAAC,wBAAwB,EAAE;MAC5CY,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAAC;QAAEc,WAAW;QAAEV;MAAI,CAAC;IAC3C,CAAC,CAAC;EACJ;EAGA,MAAMY,YAAYA,CAAA,EAA4C;IAC5D,OAAO,IAAI,CAACjD,OAAO,CAAC,eAAe,EAAE;MACnCY,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,MAAMsC,MAAMA,CAAA,EAA8C;IACxD,OAAO,IAAI,CAAClD,OAAO,CAAC,cAAc,EAAE;MAClCY,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,MAAMuC,cAAcA,CAAA,EAAgD;IAClE,OAAO,IAAI,CAACnD,OAAO,CAAC,UAAU,EAAE;MAC9BY,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAGA,MAAMwC,iBAAiBA,CAAA,EAAyC;IAC9D,OAAO,IAAI,CAACpD,OAAO,CAAC,kBAAkB,CAAC;EACzC;EAEA,MAAMqD,oBAAoBA,CAAA,EAA8B;IACtD,OAAO,IAAI,CAACrD,OAAO,CAAC,qBAAqB,CAAC;EAC5C;EAGA,MAAMsD,cAAcA,CAAA,EAAsC;IACxD,OAAO,IAAI,CAACtD,OAAO,CAAC,eAAe,CAAC;EACtC;EAEA,MAAMuD,iBAAiBA,CAACC,WAAiC,EAAqC;IAC5F,OAAO,IAAI,CAACxD,OAAO,CAAC,eAAe,EAAE;MACnCY,MAAM,EAAE,KAAK;MACbN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAACuB,WAAW;IAClC,CAAC,CAAC;EACJ;EAEA,MAAMC,kBAAkBA,CAACC,SAAmB,EAAkD;IAC5F,OAAO,IAAI,CAAC1D,OAAO,CAAC,qBAAqB,EAAE;MACzCY,MAAM,EAAE,MAAM;MAEdN,IAAI,EAAEoD;IACR,CAAC,CAAC;EACJ;EAGA,MAAMC,aAAaA,CAAA,EAAqC;IACtD,OAAO,IAAI,CAAC3D,OAAO,CAAC,oBAAoB,CAAC;EAC3C;EAEA,MAAM4D,WAAWA,CAACC,SAAmB,EAAqE;IACxGrH,QAAQ,CAAC,qBAAqB,EAAE,GAAG,IAAI,CAACQ,OAAO,SAAS,CAAC;IAGzD,IAAI8G,QAAQ,GAAG,KAAK;IACpB,IAAI;MAEFA,QAAQ,GAAGD,SAAS,CAACE,GAAG,CAAC,QAAQ,CAAC;IACpC,CAAC,CAAC,OAAOjG,KAAK,EAAE;MAEdgG,QAAQ,GAAG,KAAK;IAClB;IAGA,MAAME,eAAe,GAAG,IAAI,CAAC9G,OAAO;IACpC,IAAI4G,QAAQ,EAAE;MACZ,IAAI,CAAC5G,OAAO,GAAG,MAAM;MACrBV,QAAQ,CAAC,oCAAoC,EAAE,IAAI,CAACU,OAAO,CAAC;IAC9D;IAEA,IAAI;MACF,MAAM+G,MAAM,GAAG,MAAM,IAAI,CAACjE,OAAO,CAA8C,SAAS,EAAE;QACxFY,MAAM,EAAE,MAAM;QACdN,IAAI,EAAEuD;MACR,CAAC,CAAC;MACF,OAAOI,MAAM;IACf,CAAC,SAAS;MAER,IAAI,CAAC/G,OAAO,GAAG8G,eAAe;IAChC;EACF;EAEA,MAAME,aAAaA,CAACC,MAInB,EAA8D;IAC7D,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;IACzC,IAAIF,MAAM,EAAE7E,MAAM,EAAE8E,WAAW,CAACE,MAAM,CAAC,QAAQ,EAAEH,MAAM,CAAC7E,MAAM,CAAC;IAC/D,IAAI6E,MAAM,EAAEI,IAAI,EAAEH,WAAW,CAACE,MAAM,CAAC,MAAM,EAAEH,MAAM,CAACI,IAAI,CAACpE,QAAQ,CAAC,CAAC,CAAC;IACpE,IAAIgE,MAAM,EAAEK,KAAK,EAAEJ,WAAW,CAACE,MAAM,CAAC,OAAO,EAAEH,MAAM,CAACK,KAAK,CAACrE,QAAQ,CAAC,CAAC,CAAC;IAEvE,MAAM7C,QAAQ,GAAG,oBAAoB8G,WAAW,CAACjE,QAAQ,CAAC,CAAC,GAAG,IAAIiE,WAAW,CAACjE,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;IACjG,OAAO,IAAI,CAACH,OAAO,CAAC1C,QAAQ,CAAC;EAC/B;EAEA,MAAMmH,eAAeA,CAACC,OAAe,EAA+B;IAClE,MAAMpH,QAAQ,GAAG,mBAAmBoH,OAAO,EAAE;IAC7C7G,OAAO,CAACc,GAAG,CAAC,sCAAsC,EAAErB,QAAQ,CAAC;IAC7D,OAAO,IAAI,CAAC0C,OAAO,CAAC1C,QAAQ,CAAC;EAC/B;EAEA,MAAMqH,mBAAmBA,CAACC,QAAgB,EAAET,MAK3C,EAA8D;IAC7D,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;IACzC,IAAIF,MAAM,EAAE7E,MAAM,EAAE8E,WAAW,CAACE,MAAM,CAAC,QAAQ,EAAEH,MAAM,CAAC7E,MAAM,CAAC;IAC/D,IAAI6E,MAAM,EAAEU,QAAQ,EAAET,WAAW,CAACE,MAAM,CAAC,UAAU,EAAEH,MAAM,CAACU,QAAQ,CAAC;IACrE,IAAIV,MAAM,EAAEI,IAAI,EAAEH,WAAW,CAACE,MAAM,CAAC,MAAM,EAAEH,MAAM,CAACI,IAAI,CAACpE,QAAQ,CAAC,CAAC,CAAC;IACpE,IAAIgE,MAAM,EAAEK,KAAK,EAAEJ,WAAW,CAACE,MAAM,CAAC,OAAO,EAAEH,MAAM,CAACK,KAAK,CAACrE,QAAQ,CAAC,CAAC,CAAC;IAEvE,MAAM7C,QAAQ,GAAG,sBAAsBsH,QAAQ,GAAGR,WAAW,CAACjE,QAAQ,CAAC,CAAC,GAAG,IAAIiE,WAAW,CAACjE,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;IAC9G,OAAO,IAAI,CAACH,OAAO,CAAC1C,QAAQ,CAAC;EAC/B;EAEA,MAAMwH,WAAWA,CAACJ,OAAe,EAAEK,MAAwC,EAA6B;IACtG,OAAO,IAAI,CAAC/E,OAAO,CAAC,WAAW0E,OAAO,OAAO,EAAE;MAC7C9D,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAAC;QAAE8C;MAAO,CAAC;IACjC,CAAC,CAAC;EACJ;EAGA,MAAMC,gBAAgBA,CAACb,MAItB,EAA6B;IAC5B,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;IACzC,IAAIF,MAAM,EAAEI,IAAI,EAAEH,WAAW,CAACE,MAAM,CAAC,MAAM,EAAEH,MAAM,CAACI,IAAI,CAACpE,QAAQ,CAAC,CAAC,CAAC;IACpE,IAAIgE,MAAM,EAAEK,KAAK,EAAEJ,WAAW,CAACE,MAAM,CAAC,OAAO,EAAEH,MAAM,CAACK,KAAK,CAACrE,QAAQ,CAAC,CAAC,CAAC;IACvE,IAAIgE,MAAM,EAAEc,UAAU,EAAEb,WAAW,CAACE,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC;IAEhE,MAAMhH,QAAQ,GAAG,iBAAiB8G,WAAW,CAACjE,QAAQ,CAAC,CAAC,GAAG,IAAIiE,WAAW,CAACjE,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;IAC9F,OAAO,IAAI,CAACH,OAAO,CAAC1C,QAAQ,CAAC;EAC/B;EAEA,MAAM4H,sBAAsBA,CAACC,cAAsB,EAA6B;IAC9E,OAAO,IAAI,CAACnF,OAAO,CAAC,kBAAkBmF,cAAc,OAAO,EAAE;MAC3DvE,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAGA,MAAMwE,eAAeA,CAAA,EAAgC;IACnD,OAAO,IAAI,CAACpF,OAAO,CAAC,gBAAgB,CAAC;EACvC;EAEA,MAAMqF,eAAeA,CAACC,OAAe,EAA6B;IAChE,OAAO,IAAI,CAACtF,OAAO,CAAC,WAAWsF,OAAO,OAAO,EAAE;MAAE1E,MAAM,EAAE;IAAO,CAAC,CAAC;EACpE;EAGA,MAAM2E,gBAAgBA,CAACpB,MAItB,EAA6B;IAC5B,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;IACzC,IAAIF,MAAM,EAAEI,IAAI,EAAEH,WAAW,CAACE,MAAM,CAAC,MAAM,EAAEH,MAAM,CAACI,IAAI,CAACpE,QAAQ,CAAC,CAAC,CAAC;IACpE,IAAIgE,MAAM,EAAEK,KAAK,EAAEJ,WAAW,CAACE,MAAM,CAAC,OAAO,EAAEH,MAAM,CAACK,KAAK,CAACrE,QAAQ,CAAC,CAAC,CAAC;IACvE,IAAIgE,MAAM,EAAEqB,QAAQ,EAAEpB,WAAW,CAACE,MAAM,CAAC,UAAU,EAAEH,MAAM,CAACqB,QAAQ,CAAC;IAErE,MAAMlI,QAAQ,GAAG,iBAAiB8G,WAAW,CAACjE,QAAQ,CAAC,CAAC,GAAG,IAAIiE,WAAW,CAACjE,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;IAC9F,OAAO,IAAI,CAACH,OAAO,CAAC1C,QAAQ,CAAC;EAC/B;EAGA,MAAMmI,YAAYA,CAAA,EAA8B;IAC9C,OAAO,IAAI,CAACzF,OAAO,CAAC,sBAAsB,CAAC;EAC7C;EAEA,MAAM0F,cAAcA,CAACC,GAAW,EAAEC,GAAW,EAA6B;IACxE,OAAO,IAAI,CAAC5F,OAAO,CAAC,kCAAkC2F,GAAG,QAAQC,GAAG,EAAE,CAAC;EACzE;EAGA,MAAMC,oBAAoBA,CAAChE,IAI1B,EAA6B;IAC5B,OAAO,IAAI,CAAC7B,OAAO,CAAC,kBAAkB,EAAE;MACtCY,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAACJ,IAAI;IAC3B,CAAC,CAAC;EACJ;EAEA,MAAMiE,cAAcA,CAACjE,IAIpB,EAA6B;IAC5B,OAAO,IAAI,CAAC7B,OAAO,CAAC,mBAAmB,EAAE;MACvCY,MAAM,EAAE,MAAM;MACdN,IAAI,EAAEjC,IAAI,CAAC4D,SAAS,CAACJ,IAAI;IAC3B,CAAC,CAAC;EACJ;EAGA,MAAMkE,kBAAkBA,CAACC,QAAgB,EA2BrC;IACF,OAAO,IAAI,CAAChG,OAAO,CAAC,sBAAsBgG,QAAQ,EAAE,CAAC;EACvD;EAEA,MAAMC,oBAAoBA,CAACD,QAAgB,EAAE7B,MAG5C,EA4BG;IACF,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAAC,CAAC;IACzC,IAAIF,MAAM,EAAE7E,MAAM,EAAE8E,WAAW,CAACE,MAAM,CAAC,QAAQ,EAAEH,MAAM,CAAC7E,MAAM,CAAC;IAC/D,IAAI6E,MAAM,EAAEqB,QAAQ,EAAEpB,WAAW,CAACE,MAAM,CAAC,UAAU,EAAEH,MAAM,CAACqB,QAAQ,CAAC;IAErE,MAAMlI,QAAQ,GAAG,wBAAwB0I,QAAQ,GAAG5B,WAAW,CAACjE,QAAQ,CAAC,CAAC,GAAG,IAAIiE,WAAW,CAACjE,QAAQ,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;IAChH,OAAO,IAAI,CAACH,OAAO,CAAC1C,QAAQ,CAAC;EAC/B;AACF;AAGA,OAAO,MAAM4I,UAAU,GAAG,IAAItJ,UAAU,CAAC,CAAC;AAG1C,OAAO,MAAMuJ,aAAa,GAAG,MAAOxI,KAAa,IAAoB;EACnE,IAAI;IACF,MAAMlB,YAAY,CAAC2J,OAAO,CAAC,YAAY,EAAEzI,KAAK,CAAC;EACjD,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;EAClD;AACF,CAAC;AAED,OAAO,MAAMuI,eAAe,GAAG,MAAAA,CAAA,KAA2B;EACxD,IAAI;IACF,MAAM5J,YAAY,CAAC6J,UAAU,CAAC,YAAY,CAAC;EAC7C,CAAC,CAAC,OAAOxI,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACpD;AACF,CAAC;AAED,OAAO,MAAMyI,eAAe,GAAG,MAAAA,CAAA,KAA8B;EAC3D,IAAI;IACF,MAAM5I,KAAK,GAAG,MAAMlB,YAAY,CAAC+J,OAAO,CAAC,YAAY,CAAC;IACtD,OAAO,CAAC,CAAC7I,KAAK;EAChB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACtD,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}