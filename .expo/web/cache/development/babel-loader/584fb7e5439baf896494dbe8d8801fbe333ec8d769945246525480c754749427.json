{"ast":null,"code":"'use strict';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"animationName\"];\nimport { convertPropertiesToArrays, kebabizeCamelCase } from \"../../utils/index.js\";\nimport { processKeyframeDefinitions } from \"../animationParser.js\";\nimport { configureWebCSSAnimations, insertCSSAnimation, removeCSSAnimation } from \"../domUtils.js\";\nimport { CSSKeyframesRuleImpl } from \"../keyframes/index.js\";\nimport { maybeAddSuffixes, parseTimingFunction } from \"../utils.js\";\nconst isCSSKeyframesRuleImpl = keyframes => typeof keyframes === 'object' && 'processedKeyframes' in keyframes;\nexport default class CSSAnimationsManager {\n  attachedAnimations = {};\n  constructor(element) {\n    configureWebCSSAnimations();\n    this.element = element;\n  }\n  update(animationProperties) {\n    if (!animationProperties) {\n      this.detach();\n      return;\n    }\n    const _convertPropertiesToA = convertPropertiesToArrays(animationProperties),\n      {\n        animationName: definitions\n      } = _convertPropertiesToA,\n      animationSettings = _objectWithoutPropertiesLoose(_convertPropertiesToA, _excluded);\n    if (definitions.length === 0) {\n      this.detach();\n      return;\n    }\n    const processedAnimations = definitions.map(definition => {\n      if (isCSSKeyframesRuleImpl(definition)) {\n        return {\n          keyframesRule: definition,\n          removable: false\n        };\n      }\n      const keyframes = definition;\n      const processedKeyframes = processKeyframeDefinitions(keyframes);\n      if (this.attachedAnimations[processedKeyframes]) {\n        return {\n          keyframesRule: this.attachedAnimations[processedKeyframes].keyframesRule,\n          removable: true\n        };\n      }\n      return {\n        keyframesRule: new CSSKeyframesRuleImpl(keyframes, processedKeyframes),\n        removable: true\n      };\n    });\n    const animationNames = processedAnimations.map(({\n      keyframesRule: {\n        name\n      }\n    }) => name);\n    this.updateAttachedAnimations(processedAnimations);\n    this.setElementAnimations(animationNames, animationSettings);\n  }\n  unmountCleanup() {\n    setTimeout(this.detach.bind(this));\n  }\n  detach() {\n    const attachedAnimations = Object.values(this.attachedAnimations);\n    if (attachedAnimations.length === 0) {\n      return;\n    }\n    this.element.style.animationDuration = '';\n    this.element.style.animationDelay = '';\n    this.element.style.animationDirection = '';\n    this.element.style.animationFillMode = '';\n    this.element.style.animationPlayState = '';\n    this.element.style.animationTimingFunction = '';\n    attachedAnimations.forEach(({\n      keyframesRule: {\n        name,\n        processedKeyframes\n      },\n      removable\n    }) => {\n      if (removable && processedKeyframes) {\n        removeCSSAnimation(name);\n      }\n    });\n    this.attachedAnimations = {};\n  }\n  updateAttachedAnimations(processedAnimations) {\n    const newAttachedAnimations = {};\n    processedAnimations.forEach(processedAnimation => {\n      const rule = processedAnimation.keyframesRule;\n      if (rule.processedKeyframes) {\n        insertCSSAnimation(rule.name, rule.processedKeyframes);\n      }\n      newAttachedAnimations[rule.processedKeyframes] = processedAnimation;\n    });\n    Object.values(this.attachedAnimations).forEach(({\n      keyframesRule: rule,\n      removable\n    }) => {\n      if (removable && rule.processedKeyframes && !newAttachedAnimations[rule.processedKeyframes]) {\n        removeCSSAnimation(rule.name);\n      }\n    });\n    this.attachedAnimations = newAttachedAnimations;\n  }\n  setElementAnimations(animationNames, animationSettings) {\n    this.element.style.animationName = animationNames.join(',');\n    this.element.style.animationDuration = maybeAddSuffixes(animationSettings, 'animationDuration', 'ms').join(',');\n    this.element.style.animationDelay = maybeAddSuffixes(animationSettings, 'animationDelay', 'ms').join(',');\n    if (animationSettings.animationIterationCount) {\n      this.element.style.animationIterationCount = animationSettings.animationIterationCount.join(',');\n    }\n    if (animationSettings.animationDirection) {\n      this.element.style.animationDirection = animationSettings.animationDirection.map(kebabizeCamelCase).join(',');\n    }\n    if (animationSettings.animationFillMode) {\n      this.element.style.animationFillMode = animationSettings.animationFillMode.join(',');\n    }\n    if (animationSettings.animationPlayState) {\n      this.element.style.animationPlayState = animationSettings.animationPlayState.join(',');\n    }\n    if (animationSettings.animationTimingFunction) {\n      this.element.style.animationTimingFunction = parseTimingFunction(animationSettings.animationTimingFunction);\n    }\n  }\n}","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_excluded","convertPropertiesToArrays","kebabizeCamelCase","processKeyframeDefinitions","configureWebCSSAnimations","insertCSSAnimation","removeCSSAnimation","CSSKeyframesRuleImpl","maybeAddSuffixes","parseTimingFunction","isCSSKeyframesRuleImpl","keyframes","CSSAnimationsManager","attachedAnimations","constructor","element","update","animationProperties","detach","_convertPropertiesToA","animationName","definitions","animationSettings","length","processedAnimations","map","definition","keyframesRule","removable","processedKeyframes","animationNames","name","updateAttachedAnimations","setElementAnimations","unmountCleanup","setTimeout","bind","Object","values","style","animationDuration","animationDelay","animationDirection","animationFillMode","animationPlayState","animationTimingFunction","forEach","newAttachedAnimations","processedAnimation","rule","join","animationIterationCount"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\css\\web\\managers\\CSSAnimationsManager.ts"],"sourcesContent":["'use strict';\nimport type { ReanimatedHTMLElement } from '../../../ReanimatedModule/js-reanimated';\nimport type {\n  ConvertValuesToArrays,\n  CSSAnimationKeyframes,\n  CSSAnimationSettings,\n  ExistingCSSAnimationProperties,\n  ICSSAnimationsManager,\n} from '../../types';\nimport { convertPropertiesToArrays, kebabizeCamelCase } from '../../utils';\nimport { processKeyframeDefinitions } from '../animationParser';\nimport {\n  configureWebCSSAnimations,\n  insertCSSAnimation,\n  removeCSSAnimation,\n} from '../domUtils';\nimport { CSSKeyframesRuleImpl } from '../keyframes';\nimport { maybeAddSuffixes, parseTimingFunction } from '../utils';\n\nconst isCSSKeyframesRuleImpl = (\n  keyframes: ExistingCSSAnimationProperties['animationName']\n): keyframes is CSSKeyframesRuleImpl =>\n  typeof keyframes === 'object' && 'processedKeyframes' in keyframes;\n\ntype ProcessedAnimation = {\n  keyframesRule: CSSKeyframesRuleImpl;\n  removable: boolean;\n};\n\ntype ProcessedSettings = ConvertValuesToArrays<CSSAnimationSettings>;\n\nexport default class CSSAnimationsManager implements ICSSAnimationsManager {\n  private readonly element: ReanimatedHTMLElement;\n\n  // Keys are processed keyframes\n  private attachedAnimations: Record<string, ProcessedAnimation> = {};\n\n  constructor(element: ReanimatedHTMLElement) {\n    configureWebCSSAnimations();\n\n    this.element = element;\n  }\n\n  update(animationProperties: ExistingCSSAnimationProperties | null) {\n    if (!animationProperties) {\n      this.detach();\n      return;\n    }\n\n    const { animationName: definitions, ...animationSettings } =\n      convertPropertiesToArrays(animationProperties);\n\n    if (definitions.length === 0) {\n      this.detach();\n      return;\n    }\n\n    const processedAnimations = definitions.map((definition) => {\n      // If the CSSKeyframesRule instance was provided, we can just use it\n      if (isCSSKeyframesRuleImpl(definition)) {\n        return { keyframesRule: definition, removable: false };\n      }\n\n      // If keyframes was defined as an object, the additional processing is needed\n      const keyframes = definition as CSSAnimationKeyframes;\n      const processedKeyframes = processKeyframeDefinitions(keyframes);\n\n      // If the animation with the same keyframes was already attached, we can reuse it\n      if (this.attachedAnimations[processedKeyframes]) {\n        return {\n          keyframesRule:\n            this.attachedAnimations[processedKeyframes].keyframesRule,\n          removable: true,\n        };\n      }\n\n      // Otherwise, we need to create a new CSSKeyframesRule object\n      return {\n        keyframesRule: new CSSKeyframesRuleImpl(keyframes, processedKeyframes),\n        removable: true,\n      };\n    });\n\n    const animationNames = processedAnimations.map(\n      ({ keyframesRule: { name } }) => name\n    );\n\n    this.updateAttachedAnimations(processedAnimations);\n    this.setElementAnimations(animationNames, animationSettings);\n  }\n\n  unmountCleanup(): void {\n    // We use setTimeout to ensure that the animation is removed after the\n    // component is unmounted (it puts the detach call at the end of the event loop)\n    setTimeout(this.detach.bind(this));\n  }\n\n  private detach() {\n    const attachedAnimations = Object.values(this.attachedAnimations);\n\n    if (attachedAnimations.length === 0) {\n      return;\n    }\n\n    this.element.style.animationDuration = '';\n    this.element.style.animationDelay = '';\n    this.element.style.animationDirection = '';\n    this.element.style.animationFillMode = '';\n    this.element.style.animationPlayState = '';\n    this.element.style.animationTimingFunction = '';\n\n    attachedAnimations.forEach(\n      ({ keyframesRule: { name, processedKeyframes }, removable }) => {\n        if (removable && processedKeyframes) {\n          removeCSSAnimation(name);\n        }\n      }\n    );\n    this.attachedAnimations = {};\n  }\n\n  private updateAttachedAnimations(processedAnimations: ProcessedAnimation[]) {\n    const newAttachedAnimations: Record<string, ProcessedAnimation> = {};\n\n    processedAnimations.forEach((processedAnimation) => {\n      const rule = processedAnimation.keyframesRule;\n      if (rule.processedKeyframes) {\n        // We always call insert as it will insert animation only if it doesn't exist\n        insertCSSAnimation(rule.name, rule.processedKeyframes);\n      }\n      newAttachedAnimations[rule.processedKeyframes] = processedAnimation;\n    });\n\n    Object.values(this.attachedAnimations).forEach(\n      ({ keyframesRule: rule, removable }) => {\n        if (\n          removable &&\n          rule.processedKeyframes &&\n          !newAttachedAnimations[rule.processedKeyframes]\n        ) {\n          removeCSSAnimation(rule.name);\n        }\n      }\n    );\n\n    this.attachedAnimations = newAttachedAnimations;\n  }\n\n  private setElementAnimations(\n    animationNames: string[],\n    animationSettings: ProcessedSettings\n  ) {\n    this.element.style.animationName = animationNames.join(',');\n\n    this.element.style.animationDuration = maybeAddSuffixes(\n      animationSettings,\n      'animationDuration',\n      'ms'\n    ).join(',');\n\n    this.element.style.animationDelay = maybeAddSuffixes(\n      animationSettings,\n      'animationDelay',\n      'ms'\n    ).join(',');\n\n    if (animationSettings.animationIterationCount) {\n      this.element.style.animationIterationCount =\n        animationSettings.animationIterationCount.join(',');\n    }\n\n    if (animationSettings.animationDirection) {\n      this.element.style.animationDirection =\n        animationSettings.animationDirection.map(kebabizeCamelCase).join(',');\n    }\n\n    if (animationSettings.animationFillMode) {\n      this.element.style.animationFillMode =\n        animationSettings.animationFillMode.join(',');\n    }\n\n    if (animationSettings.animationPlayState) {\n      this.element.style.animationPlayState =\n        animationSettings.animationPlayState.join(',');\n    }\n\n    if (animationSettings.animationTimingFunction) {\n      this.element.style.animationTimingFunction = parseTimingFunction(\n        animationSettings.animationTimingFunction\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}