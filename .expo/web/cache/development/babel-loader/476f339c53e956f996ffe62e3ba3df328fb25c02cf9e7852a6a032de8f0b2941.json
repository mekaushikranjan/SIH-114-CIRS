{"ast":null,"code":"'use strict';\n\nimport { logger } from \"../common/index.js\";\nimport { ReanimatedModule } from '../ReanimatedModule';\nexport const DynamicFlags = {\n  EXAMPLE_DYNAMIC_FLAG: false,\n  init() {\n    Object.keys(DynamicFlags).forEach(key => {\n      if (key !== 'init' && key !== 'setFlag') {\n        ReanimatedModule.setDynamicFeatureFlag(key, DynamicFlags[key]);\n      }\n    });\n  },\n  setFlag(name, value) {\n    if (name in DynamicFlags) {\n      DynamicFlags[name] = value;\n      ReanimatedModule.setDynamicFeatureFlag(name, value);\n    } else {\n      logger.warn(`The feature flag: '${name}' no longer exists, you can safely remove invocation of \\`setDynamicFeatureFlag('${name}')\\` from your code.`);\n    }\n  }\n};\nDynamicFlags.init();\nexport function setDynamicFeatureFlag(name, value) {\n  DynamicFlags.setFlag(name, value);\n}\nconst DefaultStaticFeatureFlags = {\n  RUNTIME_TEST_FLAG: false,\n  DISABLE_COMMIT_PAUSING_MECHANISM: false,\n  ANDROID_SYNCHRONOUSLY_UPDATE_UI_PROPS: false,\n  EXPERIMENTAL_CSS_ANIMATIONS_FOR_SVG_COMPONENTS: false,\n  USE_SYNCHRONIZABLE_FOR_MUTABLES: false\n};\nconst staticFeatureFlags = {};\nexport function getStaticFeatureFlag(name) {\n  if (name in staticFeatureFlags) {\n    return staticFeatureFlags[name];\n  }\n  const featureFlagValue = ReanimatedModule.getStaticFeatureFlag(name);\n  staticFeatureFlags[name] = featureFlagValue;\n  return featureFlagValue;\n}","map":{"version":3,"names":["logger","ReanimatedModule","DynamicFlags","EXAMPLE_DYNAMIC_FLAG","init","Object","keys","forEach","key","setDynamicFeatureFlag","setFlag","name","value","warn","DefaultStaticFeatureFlags","RUNTIME_TEST_FLAG","DISABLE_COMMIT_PAUSING_MECHANISM","ANDROID_SYNCHRONOUSLY_UPDATE_UI_PROPS","EXPERIMENTAL_CSS_ANIMATIONS_FOR_SVG_COMPONENTS","USE_SYNCHRONIZABLE_FOR_MUTABLES","staticFeatureFlags","getStaticFeatureFlag","featureFlagValue"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\featureFlags\\index.ts"],"sourcesContent":["'use strict';\nimport { logger } from '../common';\nimport { ReanimatedModule } from '../ReanimatedModule';\nimport type StaticFeatureFlagsJSON from './staticFlags.json';\n\ntype DynamicFlagsType = {\n  EXAMPLE_DYNAMIC_FLAG: boolean;\n  init(): void;\n  setFlag(name: DynamicFlagName, value: boolean): void;\n};\ntype DynamicFlagName = keyof Omit<Omit<DynamicFlagsType, 'setFlag'>, 'init'>;\n\n/** @knipIgnore */\nexport const DynamicFlags: DynamicFlagsType = {\n  EXAMPLE_DYNAMIC_FLAG: false,\n\n  init() {\n    Object.keys(DynamicFlags).forEach((key) => {\n      if (key !== 'init' && key !== 'setFlag') {\n        ReanimatedModule.setDynamicFeatureFlag(\n          key,\n          DynamicFlags[key as DynamicFlagName]\n        );\n      }\n    });\n  },\n  setFlag(name, value) {\n    if (name in DynamicFlags) {\n      DynamicFlags[name] = value;\n      ReanimatedModule.setDynamicFeatureFlag(name, value);\n    } else {\n      logger.warn(\n        `The feature flag: '${name}' no longer exists, you can safely remove invocation of \\`setDynamicFeatureFlag('${name}')\\` from your code.`\n      );\n    }\n  },\n};\nDynamicFlags.init();\n\n// Public API function to update a feature flag\nexport function setDynamicFeatureFlag(\n  name: DynamicFlagName,\n  value: boolean\n): void {\n  DynamicFlags.setFlag(name, value);\n}\n\n/**\n * This constant is needed for typechecking and preserving static typechecks in\n * generated .d.ts files. Without it, the static flags resolve to an object\n * without specific keys.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst DefaultStaticFeatureFlags = {\n  RUNTIME_TEST_FLAG: false,\n  DISABLE_COMMIT_PAUSING_MECHANISM: false,\n  ANDROID_SYNCHRONOUSLY_UPDATE_UI_PROPS: false,\n  EXPERIMENTAL_CSS_ANIMATIONS_FOR_SVG_COMPONENTS: false,\n  USE_SYNCHRONIZABLE_FOR_MUTABLES: false,\n} as const satisfies typeof StaticFeatureFlagsJSON;\n\ntype StaticFeatureFlagsSchema = {\n  -readonly [K in keyof typeof DefaultStaticFeatureFlags]: boolean;\n};\n\nconst staticFeatureFlags: Partial<StaticFeatureFlagsSchema> = {};\n\nexport function getStaticFeatureFlag(\n  name: keyof StaticFeatureFlagsSchema\n): boolean {\n  if (name in staticFeatureFlags) {\n    return staticFeatureFlags[name]!;\n  }\n  const featureFlagValue = ReanimatedModule.getStaticFeatureFlag(name);\n  staticFeatureFlags[name] = featureFlagValue;\n  return featureFlagValue;\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,MAAM,QAAQ,oBAAW;AAClC,SAASC,gBAAgB,QAAQ,qBAAqB;AAWtD,OAAO,MAAMC,YAA8B,GAAG;EAC5CC,oBAAoB,EAAE,KAAK;EAE3BC,IAAIA,CAAA,EAAG;IACLC,MAAM,CAACC,IAAI,CAACJ,YAAY,CAAC,CAACK,OAAO,CAAEC,GAAG,IAAK;MACzC,IAAIA,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,SAAS,EAAE;QACvCP,gBAAgB,CAACQ,qBAAqB,CACpCD,GAAG,EACHN,YAAY,CAACM,GAAG,CAClB,CAAC;MACH;IACF,CAAC,CAAC;EACJ,CAAC;EACDE,OAAOA,CAACC,IAAI,EAAEC,KAAK,EAAE;IACnB,IAAID,IAAI,IAAIT,YAAY,EAAE;MACxBA,YAAY,CAACS,IAAI,CAAC,GAAGC,KAAK;MAC1BX,gBAAgB,CAACQ,qBAAqB,CAACE,IAAI,EAAEC,KAAK,CAAC;IACrD,CAAC,MAAM;MACLZ,MAAM,CAACa,IAAI,CACT,sBAAsBF,IAAI,oFAAoFA,IAAI,sBACpH,CAAC;IACH;EACF;AACF,CAAC;AACDT,YAAY,CAACE,IAAI,CAAC,CAAC;AAGnB,OAAO,SAASK,qBAAqBA,CACnCE,IAAqB,EACrBC,KAAc,EACR;EACNV,YAAY,CAACQ,OAAO,CAACC,IAAI,EAAEC,KAAK,CAAC;AACnC;AAQA,MAAME,yBAAyB,GAAG;EAChCC,iBAAiB,EAAE,KAAK;EACxBC,gCAAgC,EAAE,KAAK;EACvCC,qCAAqC,EAAE,KAAK;EAC5CC,8CAA8C,EAAE,KAAK;EACrDC,+BAA+B,EAAE;AACnC,CAAkD;AAMlD,MAAMC,kBAAqD,GAAG,CAAC,CAAC;AAEhE,OAAO,SAASC,oBAAoBA,CAClCV,IAAoC,EAC3B;EACT,IAAIA,IAAI,IAAIS,kBAAkB,EAAE;IAC9B,OAAOA,kBAAkB,CAACT,IAAI,CAAC;EACjC;EACA,MAAMW,gBAAgB,GAAGrB,gBAAgB,CAACoB,oBAAoB,CAACV,IAAI,CAAC;EACpES,kBAAkB,CAACT,IAAI,CAAC,GAAGW,gBAAgB;EAC3C,OAAOA,gBAAgB;AACzB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}