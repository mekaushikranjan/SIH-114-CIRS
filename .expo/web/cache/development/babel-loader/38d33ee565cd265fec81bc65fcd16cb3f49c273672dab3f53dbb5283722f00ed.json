{"ast":null,"code":"'use strict';\n\nimport { SensorType } from \"./commonTypes.js\";\nimport { makeMutable } from \"./mutables.js\";\nimport { ReanimatedModule } from './ReanimatedModule';\nfunction initSensorData(sensorType) {\n  if (sensorType === SensorType.ROTATION) {\n    return makeMutable({\n      qw: 0,\n      qx: 0,\n      qy: 0,\n      qz: 0,\n      yaw: 0,\n      pitch: 0,\n      roll: 0,\n      interfaceOrientation: 0\n    });\n  } else {\n    return makeMutable({\n      x: 0,\n      y: 0,\n      z: 0,\n      interfaceOrientation: 0\n    });\n  }\n}\nexport default class Sensor {\n  listenersNumber = 0;\n  sensorId = null;\n  constructor(sensorType, config) {\n    this.sensorType = sensorType;\n    this.config = config;\n    this.data = initSensorData(sensorType);\n  }\n  register(eventHandler) {\n    const config = this.config;\n    const sensorType = this.sensorType;\n    this.sensorId = ReanimatedModule.registerSensor(sensorType, config.interval === 'auto' ? -1 : config.interval, config.iosReferenceFrame, eventHandler);\n    return this.sensorId !== -1;\n  }\n  isRunning() {\n    return this.sensorId !== -1 && this.sensorId !== null;\n  }\n  isAvailable() {\n    return this.sensorId !== -1;\n  }\n  getSharedValue() {\n    return this.data;\n  }\n  unregister() {\n    if (this.sensorId !== null && this.sensorId !== -1) {\n      ReanimatedModule.unregisterSensor(this.sensorId);\n    }\n    this.sensorId = null;\n  }\n}","map":{"version":3,"names":["SensorType","makeMutable","ReanimatedModule","initSensorData","sensorType","ROTATION","qw","qx","qy","qz","yaw","pitch","roll","interfaceOrientation","x","y","z","Sensor","listenersNumber","sensorId","constructor","config","data","register","eventHandler","registerSensor","interval","iosReferenceFrame","isRunning","isAvailable","getSharedValue","unregister","unregisterSensor"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\Sensor.ts"],"sourcesContent":["'use strict';\nimport type { SerializableRef, WorkletFunction } from 'react-native-worklets';\n\nimport type {\n  SensorConfig,\n  SharedValue,\n  Value3D,\n  ValueRotation,\n} from './commonTypes';\nimport { SensorType } from './commonTypes';\nimport { makeMutable } from './mutables';\nimport { ReanimatedModule } from './ReanimatedModule';\n\nfunction initSensorData(\n  sensorType: SensorType\n): SharedValue<Value3D | ValueRotation> {\n  if (sensorType === SensorType.ROTATION) {\n    return makeMutable<Value3D | ValueRotation>({\n      qw: 0,\n      qx: 0,\n      qy: 0,\n      qz: 0,\n      yaw: 0,\n      pitch: 0,\n      roll: 0,\n      interfaceOrientation: 0,\n    });\n  } else {\n    return makeMutable<Value3D | ValueRotation>({\n      x: 0,\n      y: 0,\n      z: 0,\n      interfaceOrientation: 0,\n    });\n  }\n}\n\nexport default class Sensor {\n  public listenersNumber = 0;\n  private sensorId: number | null = null;\n  private sensorType: SensorType;\n  private data: SharedValue<Value3D | ValueRotation>;\n  private config: SensorConfig;\n\n  constructor(sensorType: SensorType, config: SensorConfig) {\n    this.sensorType = sensorType;\n    this.config = config;\n    this.data = initSensorData(sensorType);\n  }\n\n  register(\n    eventHandler: SerializableRef<(data: Value3D | ValueRotation) => void>\n  ) {\n    const config = this.config;\n    const sensorType = this.sensorType;\n    this.sensorId = ReanimatedModule.registerSensor(\n      sensorType,\n      config.interval === 'auto' ? -1 : config.interval,\n      config.iosReferenceFrame,\n      eventHandler as SerializableRef<WorkletFunction>\n    );\n    return this.sensorId !== -1;\n  }\n\n  isRunning() {\n    return this.sensorId !== -1 && this.sensorId !== null;\n  }\n\n  isAvailable() {\n    return this.sensorId !== -1;\n  }\n\n  getSharedValue() {\n    return this.data;\n  }\n\n  unregister() {\n    if (this.sensorId !== null && this.sensorId !== -1) {\n      ReanimatedModule.unregisterSensor(this.sensorId);\n    }\n    this.sensorId = null;\n  }\n}\n"],"mappings":"AAAA,YAAY;;AASZ,SAASA,UAAU,QAAQ,kBAAe;AAC1C,SAASC,WAAW,QAAQ,eAAY;AACxC,SAASC,gBAAgB,QAAQ,oBAAoB;AAErD,SAASC,cAAcA,CACrBC,UAAsB,EACgB;EACtC,IAAIA,UAAU,KAAKJ,UAAU,CAACK,QAAQ,EAAE;IACtC,OAAOJ,WAAW,CAA0B;MAC1CK,EAAE,EAAE,CAAC;MACLC,EAAE,EAAE,CAAC;MACLC,EAAE,EAAE,CAAC;MACLC,EAAE,EAAE,CAAC;MACLC,GAAG,EAAE,CAAC;MACNC,KAAK,EAAE,CAAC;MACRC,IAAI,EAAE,CAAC;MACPC,oBAAoB,EAAE;IACxB,CAAC,CAAC;EACJ,CAAC,MAAM;IACL,OAAOZ,WAAW,CAA0B;MAC1Ca,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC;MACJC,CAAC,EAAE,CAAC;MACJH,oBAAoB,EAAE;IACxB,CAAC,CAAC;EACJ;AACF;AAEA,eAAe,MAAMI,MAAM,CAAC;EACnBC,eAAe,GAAG,CAAC;EAClBC,QAAQ,GAAkB,IAAI;EAKtCC,WAAWA,CAAChB,UAAsB,EAAEiB,MAAoB,EAAE;IACxD,IAAI,CAACjB,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACiB,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGnB,cAAc,CAACC,UAAU,CAAC;EACxC;EAEAmB,QAAQA,CACNC,YAAsE,EACtE;IACA,MAAMH,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,MAAMjB,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,IAAI,CAACe,QAAQ,GAAGjB,gBAAgB,CAACuB,cAAc,CAC7CrB,UAAU,EACViB,MAAM,CAACK,QAAQ,KAAK,MAAM,GAAG,CAAC,CAAC,GAAGL,MAAM,CAACK,QAAQ,EACjDL,MAAM,CAACM,iBAAiB,EACxBH,YACF,CAAC;IACD,OAAO,IAAI,CAACL,QAAQ,KAAK,CAAC,CAAC;EAC7B;EAEAS,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACT,QAAQ,KAAK,CAAC,CAAC,IAAI,IAAI,CAACA,QAAQ,KAAK,IAAI;EACvD;EAEAU,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAACV,QAAQ,KAAK,CAAC,CAAC;EAC7B;EAEAW,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAACR,IAAI;EAClB;EAEAS,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAACZ,QAAQ,KAAK,IAAI,IAAI,IAAI,CAACA,QAAQ,KAAK,CAAC,CAAC,EAAE;MAClDjB,gBAAgB,CAAC8B,gBAAgB,CAAC,IAAI,CAACb,QAAQ,CAAC;IAClD;IACA,IAAI,CAACA,QAAQ,GAAG,IAAI;EACtB;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}