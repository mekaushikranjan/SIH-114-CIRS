{"ast":null,"code":"'use strict';\n\nimport { ReanimatedError } from \"../../common/index.js\";\nimport { isTimeUnit, smellsLikeTimingFunction } from \"./guards.js\";\nexport function splitByComma(str) {\n  const parts = [];\n  let current = '';\n  let depth = 0;\n  for (const char of str) {\n    if (char === '(') {\n      depth++;\n    } else if (char === ')') {\n      depth--;\n    } else if (char === ',' && depth === 0) {\n      parts.push(current.trim());\n      current = '';\n      continue;\n    }\n    current += char;\n  }\n  parts.push(current.trim());\n  return parts;\n}\nexport function splitByWhitespace(str) {\n  return str.split(/\\s+(?![^()]*\\))/);\n}\nexport function parseSingleTransitionShorthand(value) {\n  const result = {};\n  const parts = splitByWhitespace(value);\n  for (const part of parts) {\n    if (part === 'all') {\n      result.transitionProperty = 'all';\n      continue;\n    }\n    if (part === 'normal' || part === 'allow-discrete') {\n      result.transitionBehavior = part;\n      continue;\n    }\n    if (isTimeUnit(part)) {\n      const timeUnit = part;\n      if (result.transitionDuration === undefined) {\n        result.transitionDuration = timeUnit;\n        continue;\n      }\n      if (result.transitionDelay === undefined) {\n        result.transitionDelay = timeUnit;\n        continue;\n      }\n    }\n    if (result.transitionTimingFunction === undefined && smellsLikeTimingFunction(part)) {\n      result.transitionTimingFunction = part;\n      continue;\n    }\n    if (result.transitionProperty === undefined) {\n      result.transitionProperty = part;\n      continue;\n    }\n    throw new ReanimatedError(`Invalid transition shorthand: ${value}`);\n  }\n  return result;\n}","map":{"version":3,"names":["ReanimatedError","isTimeUnit","smellsLikeTimingFunction","splitByComma","str","parts","current","depth","char","push","trim","splitByWhitespace","split","parseSingleTransitionShorthand","value","result","part","transitionProperty","transitionBehavior","timeUnit","transitionDuration","undefined","transitionDelay","transitionTimingFunction"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\css\\utils\\parsers.ts"],"sourcesContent":["'use strict';\n\nimport { ReanimatedError } from '../../common';\nimport type { SingleCSSTransitionConfig } from '../types';\nimport { isTimeUnit, smellsLikeTimingFunction } from './guards';\n\nexport function splitByComma(str: string) {\n  // split by comma not enclosed in parentheses\n  const parts: string[] = [];\n  let current = '';\n  let depth = 0;\n  for (const char of str) {\n    if (char === '(') {\n      depth++;\n    } else if (char === ')') {\n      depth--;\n    } else if (char === ',' && depth === 0) {\n      parts.push(current.trim());\n      current = '';\n      continue;\n    }\n    current += char;\n  }\n  parts.push(current.trim());\n  return parts;\n}\n\nexport function splitByWhitespace(str: string) {\n  // split by whitespace not enclosed in parentheses\n  return str.split(/\\s+(?![^()]*\\))/);\n}\n\ntype ParsedShorthandSingleTransitionConfig = Omit<\n  SingleCSSTransitionConfig,\n  'transitionProperty' | 'transitionTimingFunction'\n> & {\n  transitionProperty?: string;\n  transitionTimingFunction?: string;\n};\n\nexport function parseSingleTransitionShorthand(\n  value: string\n): ParsedShorthandSingleTransitionConfig {\n  const result: ParsedShorthandSingleTransitionConfig = {};\n  const parts = splitByWhitespace(value);\n\n  for (const part of parts) {\n    if (part === 'all') {\n      result.transitionProperty = 'all';\n      continue;\n    }\n    if (part === 'normal' || part === 'allow-discrete') {\n      result.transitionBehavior = part;\n      continue;\n    }\n    if (isTimeUnit(part)) {\n      const timeUnit = part;\n      if (result.transitionDuration === undefined) {\n        result.transitionDuration = timeUnit;\n        continue;\n      }\n      if (result.transitionDelay === undefined) {\n        result.transitionDelay = timeUnit;\n        continue;\n      }\n    }\n    if (\n      result.transitionTimingFunction === undefined &&\n      smellsLikeTimingFunction(part)\n    ) {\n      result.transitionTimingFunction = part;\n      continue;\n    }\n    if (result.transitionProperty === undefined) {\n      result.transitionProperty = part;\n      continue;\n    }\n    throw new ReanimatedError(`Invalid transition shorthand: ${value}`);\n  }\n\n  return result;\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,eAAe,QAAQ,uBAAc;AAE9C,SAASC,UAAU,EAAEC,wBAAwB,QAAQ,aAAU;AAE/D,OAAO,SAASC,YAAYA,CAACC,GAAW,EAAE;EAExC,MAAMC,KAAe,GAAG,EAAE;EAC1B,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,KAAK,GAAG,CAAC;EACb,KAAK,MAAMC,IAAI,IAAIJ,GAAG,EAAE;IACtB,IAAII,IAAI,KAAK,GAAG,EAAE;MAChBD,KAAK,EAAE;IACT,CAAC,MAAM,IAAIC,IAAI,KAAK,GAAG,EAAE;MACvBD,KAAK,EAAE;IACT,CAAC,MAAM,IAAIC,IAAI,KAAK,GAAG,IAAID,KAAK,KAAK,CAAC,EAAE;MACtCF,KAAK,CAACI,IAAI,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;MAC1BJ,OAAO,GAAG,EAAE;MACZ;IACF;IACAA,OAAO,IAAIE,IAAI;EACjB;EACAH,KAAK,CAACI,IAAI,CAACH,OAAO,CAACI,IAAI,CAAC,CAAC,CAAC;EAC1B,OAAOL,KAAK;AACd;AAEA,OAAO,SAASM,iBAAiBA,CAACP,GAAW,EAAE;EAE7C,OAAOA,GAAG,CAACQ,KAAK,CAAC,iBAAiB,CAAC;AACrC;AAUA,OAAO,SAASC,8BAA8BA,CAC5CC,KAAa,EAC0B;EACvC,MAAMC,MAA6C,GAAG,CAAC,CAAC;EACxD,MAAMV,KAAK,GAAGM,iBAAiB,CAACG,KAAK,CAAC;EAEtC,KAAK,MAAME,IAAI,IAAIX,KAAK,EAAE;IACxB,IAAIW,IAAI,KAAK,KAAK,EAAE;MAClBD,MAAM,CAACE,kBAAkB,GAAG,KAAK;MACjC;IACF;IACA,IAAID,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,gBAAgB,EAAE;MAClDD,MAAM,CAACG,kBAAkB,GAAGF,IAAI;MAChC;IACF;IACA,IAAIf,UAAU,CAACe,IAAI,CAAC,EAAE;MACpB,MAAMG,QAAQ,GAAGH,IAAI;MACrB,IAAID,MAAM,CAACK,kBAAkB,KAAKC,SAAS,EAAE;QAC3CN,MAAM,CAACK,kBAAkB,GAAGD,QAAQ;QACpC;MACF;MACA,IAAIJ,MAAM,CAACO,eAAe,KAAKD,SAAS,EAAE;QACxCN,MAAM,CAACO,eAAe,GAAGH,QAAQ;QACjC;MACF;IACF;IACA,IACEJ,MAAM,CAACQ,wBAAwB,KAAKF,SAAS,IAC7CnB,wBAAwB,CAACc,IAAI,CAAC,EAC9B;MACAD,MAAM,CAACQ,wBAAwB,GAAGP,IAAI;MACtC;IACF;IACA,IAAID,MAAM,CAACE,kBAAkB,KAAKI,SAAS,EAAE;MAC3CN,MAAM,CAACE,kBAAkB,GAAGD,IAAI;MAChC;IACF;IACA,MAAM,IAAIhB,eAAe,CAAC,iCAAiCc,KAAK,EAAE,CAAC;EACrE;EAEA,OAAOC,MAAM;AACf","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}