{"ast":null,"code":"'use strict';\n\nimport { hasSuffix } from \"../../../common/index.js\";\nimport { hasProp, isConfigPropertyAlias, isDefined, isRecord, kebabizeCamelCase } from \"../../utils/index.js\";\nconst hasValueProcessor = configValue => typeof configValue === 'object' && configValue !== null && 'process' in configValue;\nclass BuilderBase {\n  processedProps = {};\n  constructor(config) {\n    this.config = config;\n  }\n  add(property, value) {\n    const configValue = this.config[property];\n    if (!configValue || !isDefined(value) || configValue === false) {\n      return;\n    }\n    if (configValue === true) {\n      this.maybeAssignProp(property, String(value));\n    } else if (typeof configValue === 'string') {\n      this.maybeAssignProp(property, hasSuffix(value) ? value : `${String(value)}${configValue}`);\n    } else if (isConfigPropertyAlias(configValue)) {\n      this.add(configValue.as, value);\n    } else {\n      this.customProcess(property, value);\n    }\n  }\n  maybeAssignProp(property, value) {\n    this.processedProps[property] ??= value;\n  }\n  maybeAssignProps(properties) {\n    Object.entries(properties).forEach(([key, value]) => this.maybeAssignProp(key, value));\n  }\n  handleProcess(property, value, process) {\n    const processedValue = process ? process(value) : String(value);\n    if (!isDefined(processedValue)) {\n      return;\n    }\n    if (isRecord(processedValue)) {\n      this.maybeAssignProps(processedValue);\n    } else {\n      this.maybeAssignProp(property, processedValue);\n    }\n  }\n}\nclass StyleBuilderImpl extends BuilderBase {\n  ruleBuildersSet = new Set();\n  nameAliases = {};\n  constructor(config, buildHandler) {\n    super(config);\n    this.buildHandler = buildHandler;\n  }\n  buildFrom(props) {\n    Object.entries(props).forEach(([key, value]) => this.add(key, value));\n    return this.build();\n  }\n  build() {\n    this.buildRuleBuilders();\n    const result = this.buildHandler(this.processedProps, this.nameAliases);\n    this.cleanup();\n    return result;\n  }\n  customProcess(property, value) {\n    const configValue = this.config[property];\n    if (typeof configValue !== 'object') {\n      return;\n    }\n    if (isRuleBuilder(configValue)) {\n      this.ruleBuildersSet.add(configValue);\n      configValue.add(property, value);\n    } else {\n      if (hasValueProcessor(configValue)) {\n        this.handleProcess(property, value, configValue.process);\n      } else {\n        this.maybeAssignProp(property, String(value));\n      }\n      if (hasProp(configValue, 'name')) {\n        this.nameAliases[property] = configValue.name;\n      }\n    }\n  }\n  buildRuleBuilders() {\n    this.ruleBuildersSet.forEach(builder => this.maybeAssignProps(builder.build()));\n    this.ruleBuildersSet.clear();\n  }\n  cleanup() {\n    this.processedProps = {};\n    this.nameAliases = {};\n  }\n}\nclass RuleBuilderImpl extends BuilderBase {\n  constructor(config, buildHandler) {\n    super(config);\n    this.buildHandler = buildHandler;\n  }\n  build() {\n    const result = this.buildHandler(this.processedProps);\n    this.cleanup();\n    return result;\n  }\n  customProcess(property, value) {\n    const configValue = this.config[property];\n    if (hasValueProcessor(configValue)) {\n      this.handleProcess(property, value, configValue.process);\n    }\n  }\n  cleanup() {\n    this.processedProps = {};\n  }\n}\nconst isRuleBuilder = value => value instanceof RuleBuilderImpl;\nconst defaultStyleBuildHandler = (props, nameAliases) => {\n  const entries = Object.entries(props);\n  if (entries.length === 0) {\n    return null;\n  }\n  return entries.map(([key, value]) => `${nameAliases[key] ?? kebabizeCamelCase(key)}: ${value}`).join('; ');\n};\nexport function createStyleBuilder(config, buildHandler = defaultStyleBuildHandler) {\n  return new StyleBuilderImpl(config, buildHandler);\n}\nexport function createRuleBuilder(config, buildHandler) {\n  return new RuleBuilderImpl(config, buildHandler);\n}","map":{"version":3,"names":["hasSuffix","hasProp","isConfigPropertyAlias","isDefined","isRecord","kebabizeCamelCase","hasValueProcessor","configValue","BuilderBase","processedProps","constructor","config","add","property","value","maybeAssignProp","String","as","customProcess","maybeAssignProps","properties","Object","entries","forEach","key","handleProcess","process","processedValue","StyleBuilderImpl","ruleBuildersSet","Set","nameAliases","buildHandler","buildFrom","props","build","buildRuleBuilders","result","cleanup","isRuleBuilder","name","builder","clear","RuleBuilderImpl","defaultStyleBuildHandler","length","map","join","createStyleBuilder","createRuleBuilder"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\css\\web\\style\\builderFactories.ts"],"sourcesContent":["'use strict';\n\nimport { hasSuffix } from '../../../common';\nimport type { AnyRecord } from '../../types';\nimport {\n  hasProp,\n  isConfigPropertyAlias,\n  isDefined,\n  isRecord,\n  kebabizeCamelCase,\n} from '../../utils';\nimport type {\n  AnyBuilderConfig,\n  RuleBuilder,\n  RuleBuilderConfig,\n  RuleBuildHandler,\n  StyleBuilder,\n  StyleBuilderConfig,\n  StyleBuildHandler,\n  ValueProcessor,\n} from './types';\n\nconst hasValueProcessor = (\n  configValue: unknown\n): configValue is { process: ValueProcessor<unknown> } =>\n  typeof configValue === 'object' &&\n  configValue !== null &&\n  'process' in configValue;\n\nabstract class BuilderBase<P extends AnyRecord, R> {\n  protected readonly config: AnyBuilderConfig<P>;\n\n  protected processedProps = {} as Record<keyof P, string>;\n\n  constructor(config: AnyBuilderConfig<P>) {\n    this.config = config;\n  }\n\n  add(property: keyof P, value: P[keyof P]) {\n    const configValue = this.config[property];\n\n    if (!configValue || !isDefined(value) || configValue === false) {\n      return;\n    }\n\n    if (configValue === true) {\n      this.maybeAssignProp(property, String(value));\n    } else if (typeof configValue === 'string') {\n      this.maybeAssignProp(\n        property,\n        hasSuffix(value) ? value : `${String(value)}${configValue}`\n      );\n    } else if (isConfigPropertyAlias<P>(configValue)) {\n      this.add(configValue.as, value);\n    } else {\n      this.customProcess(property, value);\n    }\n  }\n\n  abstract build(): R;\n\n  protected abstract customProcess(\n    _property: keyof P,\n    _value: P[keyof P]\n  ): void;\n\n  protected maybeAssignProp(property: keyof P, value: string) {\n    this.processedProps[property] ??= value;\n  }\n\n  protected maybeAssignProps(properties: Record<string, string>) {\n    Object.entries(properties).forEach(([key, value]) =>\n      this.maybeAssignProp(key, value)\n    );\n  }\n\n  protected handleProcess(\n    property: keyof P,\n    value: P[keyof P],\n    process: ValueProcessor<P[keyof P]>\n  ) {\n    const processedValue = process ? process(value) : String(value);\n\n    if (!isDefined(processedValue)) {\n      return;\n    }\n\n    if (isRecord(processedValue)) {\n      this.maybeAssignProps(processedValue);\n    } else {\n      this.maybeAssignProp(property, processedValue);\n    }\n  }\n}\n\nclass StyleBuilderImpl<P extends AnyRecord>\n  extends BuilderBase<P, string | null>\n  implements StyleBuilder<P>\n{\n  private readonly buildHandler: StyleBuildHandler<P>;\n\n  private ruleBuildersSet: Set<RuleBuilder<P>> = new Set();\n  private nameAliases = {} as Record<keyof P, string>;\n\n  constructor(\n    config: StyleBuilderConfig<P>,\n    buildHandler: StyleBuildHandler<P>\n  ) {\n    super(config);\n    this.buildHandler = buildHandler;\n  }\n\n  buildFrom(props: P): string | null {\n    Object.entries(props).forEach(([key, value]) => this.add(key, value));\n    return this.build();\n  }\n\n  override build(): string | null {\n    this.buildRuleBuilders();\n    const result = this.buildHandler(this.processedProps, this.nameAliases);\n    this.cleanup();\n    return result;\n  }\n\n  protected override customProcess(property: keyof P, value: P[keyof P]) {\n    const configValue = this.config[property];\n\n    if (typeof configValue !== 'object') {\n      return;\n    }\n\n    if (isRuleBuilder<P>(configValue)) {\n      this.ruleBuildersSet.add(configValue);\n      configValue.add(property, value);\n    } else {\n      if (hasValueProcessor(configValue)) {\n        this.handleProcess(property, value, configValue.process);\n      } else {\n        this.maybeAssignProp(property, String(value));\n      }\n\n      if (hasProp(configValue, 'name')) {\n        this.nameAliases[property] = configValue.name;\n      }\n    }\n  }\n\n  private buildRuleBuilders() {\n    // Build props which are created from other style properties\n    this.ruleBuildersSet.forEach((builder) =>\n      this.maybeAssignProps(builder.build())\n    );\n    this.ruleBuildersSet.clear();\n  }\n\n  private cleanup() {\n    this.processedProps = {} as Record<keyof P, string>;\n    this.nameAliases = {} as Record<keyof P, string>;\n  }\n}\n\nclass RuleBuilderImpl<P extends AnyRecord>\n  extends BuilderBase<P, Record<string, string>>\n  implements RuleBuilder<P>\n{\n  private readonly buildHandler: RuleBuildHandler<P>;\n\n  constructor(config: RuleBuilderConfig<P>, buildHandler: RuleBuildHandler<P>) {\n    super(config);\n    this.buildHandler = buildHandler;\n  }\n\n  override build(): Record<string, string> {\n    const result = this.buildHandler(this.processedProps);\n    this.cleanup();\n    return result;\n  }\n\n  protected override customProcess(property: keyof P, value: P[keyof P]) {\n    const configValue = this.config[property];\n    if (hasValueProcessor(configValue)) {\n      this.handleProcess(property, value, configValue.process);\n    }\n  }\n\n  private cleanup() {\n    this.processedProps = {} as Record<keyof P, string>;\n  }\n}\n\nconst isRuleBuilder = <P extends AnyRecord>(\n  value: unknown\n): value is RuleBuilder<P> => value instanceof RuleBuilderImpl;\n\nconst defaultStyleBuildHandler: StyleBuildHandler<AnyRecord> = (\n  props,\n  nameAliases\n) => {\n  const entries = Object.entries(props);\n\n  if (entries.length === 0) {\n    return null;\n  }\n\n  return entries\n    .map(\n      ([key, value]) =>\n        `${nameAliases[key] ?? kebabizeCamelCase(key)}: ${value}`\n    )\n    .join('; ');\n};\n\nexport function createStyleBuilder<P extends AnyRecord>(\n  config: StyleBuilderConfig<P>,\n  buildHandler: StyleBuildHandler<P> = defaultStyleBuildHandler\n): StyleBuilder<Partial<P>> {\n  return new StyleBuilderImpl(config, buildHandler);\n}\n\nexport function createRuleBuilder<P extends AnyRecord>(\n  config: RuleBuilderConfig<P>,\n  buildHandler: RuleBuildHandler<P>\n): RuleBuilder<Partial<P>> {\n  return new RuleBuilderImpl(config, buildHandler);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}