{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"shouldActivateOnStart\", \"disallowInterruption\", \"shouldCancelWhenOutside\", \"minDurationMs\", \"maxDist\", \"minPointers\", \"maxPointers\"];\nimport Hammer from '@egjs/hammerjs';\nimport { State } from '../State';\nimport { CONTENT_TOUCHES_DELAY, CONTENT_TOUCHES_QUICK_TAP_END_DELAY } from './constants';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { fireAfterInterval, isValidNumber, isnan } from './utils';\nclass PressGestureHandler extends DiscreteGestureHandler {\n  initialEvent = null;\n  get name() {\n    return 'press';\n  }\n  get minDurationMs() {\n    return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n  }\n  get maxDist() {\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n  get NativeGestureClass() {\n    return Hammer.Press;\n  }\n  shouldDelayTouches = true;\n  simulateCancelEvent(inputData) {\n    this.hasGestureFailed = true;\n    this.cancelEvent(inputData);\n  }\n  updateHasCustomActivationCriteria({\n    shouldCancelWhenOutside,\n    maxDistSq\n  }) {\n    return shouldCancelWhenOutside || !isValidNumber(maxDistSq);\n  }\n  getState(type) {\n    return {\n      [Hammer.INPUT_START]: State.BEGAN,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.CANCELLED\n    }[type];\n  }\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10\n      };\n    }\n    return this.config;\n  }\n  getHammerConfig() {\n    return Object.assign({}, super.getHammerConfig(), {\n      time: this.minDurationMs\n    });\n  }\n  onGestureActivated(ev) {\n    this.onGestureStart(ev);\n  }\n  shouldDelayTouchForEvent({\n    pointerType\n  }) {\n    return this.shouldDelayTouches && pointerType === 'touch';\n  }\n  onGestureStart(ev) {\n    this.isGestureRunning = true;\n    clearTimeout(this.visualFeedbackTimer);\n    this.initialEvent = ev;\n    this.visualFeedbackTimer = fireAfterInterval(() => {\n      this.sendGestureStartedEvent(this.initialEvent);\n      this.initialEvent = null;\n    }, this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY);\n  }\n  sendGestureStartedEvent(ev) {\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.sendEvent(Object.assign({}, ev, {\n      eventType: Hammer.INPUT_MOVE,\n      isFirst: true\n    }));\n  }\n  forceInvalidate(event) {\n    super.forceInvalidate(event);\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.initialEvent = null;\n  }\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n    if (this.isGestureRunning) {\n      if (ev.isFinal) {\n        let timeout;\n        if (this.visualFeedbackTimer) {\n          timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n          this.sendGestureStartedEvent(this.initialEvent);\n          this.initialEvent = null;\n        }\n        fireAfterInterval(() => {\n          this.sendEvent(Object.assign({}, ev, {\n            eventType: Hammer.INPUT_END,\n            isFinal: true\n          }));\n          this.onGestureEnded();\n        }, timeout);\n      } else {\n        this.sendEvent(Object.assign({}, ev, {\n          eventType: Hammer.INPUT_MOVE,\n          isFinal: false\n        }));\n      }\n    }\n  }\n  updateGestureConfig(_ref) {\n    let {\n        shouldActivateOnStart = false,\n        disallowInterruption = false,\n        shouldCancelWhenOutside = true,\n        minDurationMs = Number.NaN,\n        maxDist = Number.NaN,\n        minPointers = 1,\n        maxPointers = 1\n      } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    return super.updateGestureConfig(Object.assign({\n      shouldActivateOnStart,\n      disallowInterruption,\n      shouldCancelWhenOutside,\n      minDurationMs,\n      maxDist,\n      minPointers,\n      maxPointers\n    }, props));\n  }\n}\nexport default PressGestureHandler;","map":{"version":3,"names":["Hammer","State","CONTENT_TOUCHES_DELAY","CONTENT_TOUCHES_QUICK_TAP_END_DELAY","DiscreteGestureHandler","fireAfterInterval","isValidNumber","isnan","PressGestureHandler","initialEvent","name","minDurationMs","config","maxDist","NativeGestureClass","Press","shouldDelayTouches","simulateCancelEvent","inputData","hasGestureFailed","cancelEvent","updateHasCustomActivationCriteria","shouldCancelWhenOutside","maxDistSq","getState","type","INPUT_START","BEGAN","INPUT_MOVE","ACTIVE","INPUT_END","END","INPUT_CANCEL","CANCELLED","getConfig","hasCustomActivationCriteria","getHammerConfig","Object","assign","time","onGestureActivated","ev","onGestureStart","shouldDelayTouchForEvent","pointerType","isGestureRunning","clearTimeout","visualFeedbackTimer","sendGestureStartedEvent","sendEvent","eventType","isFirst","forceInvalidate","event","onRawEvent","isFinal","timeout","onGestureEnded","updateGestureConfig","_ref","shouldActivateOnStart","disallowInterruption","Number","NaN","minPointers","maxPointers","props","_objectWithoutPropertiesLoose","_excluded"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\web_hammer\\PressGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport { State } from '../State';\nimport {\n  CONTENT_TOUCHES_DELAY,\n  CONTENT_TOUCHES_QUICK_TAP_END_DELAY,\n  HammerInputNames,\n} from './constants';\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { Config, HammerInputExt } from './GestureHandler';\nimport { fireAfterInterval, isValidNumber, isnan } from './utils';\n\nclass PressGestureHandler extends DiscreteGestureHandler {\n  private visualFeedbackTimer: any;\n  private initialEvent: HammerInputExt | null = null;\n  get name() {\n    return 'press';\n  }\n\n  get minDurationMs() {\n    // @ts-ignore FIXME(TS)\n    return isnan(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n  }\n\n  get maxDist() {\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Press;\n  }\n\n  shouldDelayTouches = true;\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    // Long press never starts so we can't rely on the running event boolean.\n    this.hasGestureFailed = true;\n    this.cancelEvent(inputData);\n  }\n\n  updateHasCustomActivationCriteria({\n    shouldCancelWhenOutside,\n    maxDistSq,\n  }: Config & { shouldCancelWhenOutside: boolean }) {\n    return shouldCancelWhenOutside || !isValidNumber(maxDistSq);\n  }\n\n  getState(type: keyof typeof HammerInputNames): State {\n    return {\n      [Hammer.INPUT_START]: State.BEGAN,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.CANCELLED,\n    }[type];\n  }\n\n  getConfig() {\n    if (!this.hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10,\n      };\n    }\n    return this.config;\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      // threshold: this.maxDist,\n      time: this.minDurationMs,\n    };\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.onGestureStart(ev);\n  }\n\n  shouldDelayTouchForEvent({ pointerType }: HammerInputExt) {\n    // Don't disable event for mouse input\n    return this.shouldDelayTouches && pointerType === 'touch';\n  }\n\n  onGestureStart(ev: HammerInputExt) {\n    this.isGestureRunning = true;\n    clearTimeout(this.visualFeedbackTimer);\n    this.initialEvent = ev;\n    this.visualFeedbackTimer = fireAfterInterval(\n      () => {\n        this.sendGestureStartedEvent(this.initialEvent as HammerInputExt);\n        this.initialEvent = null;\n      },\n      this.shouldDelayTouchForEvent(ev) && CONTENT_TOUCHES_DELAY\n    );\n  }\n\n  sendGestureStartedEvent(ev: HammerInputExt) {\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.sendEvent({\n      ...ev,\n      eventType: Hammer.INPUT_MOVE,\n      isFirst: true,\n    });\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    super.forceInvalidate(event);\n    clearTimeout(this.visualFeedbackTimer);\n    this.visualFeedbackTimer = null;\n    this.initialEvent = null;\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (this.isGestureRunning) {\n      if (ev.isFinal) {\n        let timeout;\n        if (this.visualFeedbackTimer) {\n          // Aesthetic timing for a quick tap.\n          // We haven't activated the tap right away to emulate iOS `delaysContentTouches`\n          // Now we must send the initial activation event and wait a set amount of time before firing the end event.\n          timeout = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n          this.sendGestureStartedEvent(this.initialEvent as HammerInputExt);\n          this.initialEvent = null;\n        }\n        fireAfterInterval(() => {\n          this.sendEvent({\n            ...ev,\n            eventType: Hammer.INPUT_END,\n            isFinal: true,\n          });\n          // @ts-ignore -- this should explicitly support undefined\n          this.onGestureEnded();\n        }, timeout);\n      } else {\n        this.sendEvent({\n          ...ev,\n          eventType: Hammer.INPUT_MOVE,\n          isFinal: false,\n        });\n      }\n    }\n  }\n\n  updateGestureConfig({\n    shouldActivateOnStart = false,\n    disallowInterruption = false,\n    shouldCancelWhenOutside = true,\n    minDurationMs = Number.NaN,\n    maxDist = Number.NaN,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldActivateOnStart,\n      disallowInterruption,\n      shouldCancelWhenOutside,\n      minDurationMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n}\nexport default PressGestureHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}