{"ast":null,"code":"\"use strict\";\n\nimport { ContinousBaseGesture } from './gesture';\nconst _worklet_16045788923165_init_data = {\n  code: \"function changeEventCalculator_panGestureJs1(current,previous){let changePayload;if(previous===undefined){changePayload={changeX:current.translationX,changeY:current.translationY};}else{changePayload={changeX:current.translationX-previous.translationX,changeY:current.translationY-previous.translationY};}return{...current,...changePayload};}\",\n  location: \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Desktop\\\\civic-reporter-sih\\\\frontend\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\panGesture.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"changeEventCalculator_panGestureJs1\\\",\\\"current\\\",\\\"previous\\\",\\\"changePayload\\\",\\\"undefined\\\",\\\"changeX\\\",\\\"translationX\\\",\\\"changeY\\\",\\\"translationY\\\"],\\\"sources\\\":[\\\"C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/panGesture.js\\\"],\\\"mappings\\\":\\\"AAGA,SAAAA,mCAAwCA,CAAAC,OAAU,CAAAC,QAAA,EAGhD,GAAI,CAAAC,aAAa,CACjB,GAAID,QAAQ,GAAKE,SAAS,CAAE,CAC1BD,aAAa,CAAG,CACdE,OAAO,CAAEJ,OAAO,CAACK,YAAY,CAC7BC,OAAO,CAAEN,OAAO,CAACO,YACnB,CAAC,CACH,CAAC,IAAM,CACLL,aAAa,CAAG,CACdE,OAAO,CAAEJ,OAAO,CAACK,YAAY,CAAGJ,QAAQ,CAACI,YAAY,CACrDC,OAAO,CAAEN,OAAO,CAACO,YAAY,CAAGN,QAAQ,CAACM,YAC3C,CAAC,CACH,CACA,MAAO,CACL,GAAGP,OAAO,CACV,GAAGE,aACL,CAAC,CACH\\\",\\\"ignoreList\\\":[]}\"\n};\nconst changeEventCalculator = function changeEventCalculator_panGestureJs1Factory({\n  _worklet_16045788923165_init_data\n}) {\n  const _e = [new global.Error(), 1, -27];\n  const changeEventCalculator = function (current, previous) {\n    let changePayload;\n    if (previous === undefined) {\n      changePayload = {\n        changeX: current.translationX,\n        changeY: current.translationY\n      };\n    } else {\n      changePayload = {\n        changeX: current.translationX - previous.translationX,\n        changeY: current.translationY - previous.translationY\n      };\n    }\n    return Object.assign({}, current, changePayload);\n  };\n  changeEventCalculator.__closure = {};\n  changeEventCalculator.__workletHash = 16045788923165;\n  changeEventCalculator.__pluginVersion = \"0.5.1\";\n  changeEventCalculator.__initData = _worklet_16045788923165_init_data;\n  changeEventCalculator.__stackDetails = _e;\n  return changeEventCalculator;\n}({\n  _worklet_16045788923165_init_data\n});\nexport class PanGesture extends ContinousBaseGesture {\n  config = {};\n  constructor() {\n    super();\n    this.handlerName = 'PanGestureHandler';\n  }\n  activeOffsetY(offset) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetYStart = offset[0];\n      this.config.activeOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetYStart = offset;\n    } else {\n      this.config.activeOffsetYEnd = offset;\n    }\n    return this;\n  }\n  activeOffsetX(offset) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetXStart = offset[0];\n      this.config.activeOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetXStart = offset;\n    } else {\n      this.config.activeOffsetXEnd = offset;\n    }\n    return this;\n  }\n  failOffsetY(offset) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetYStart = offset[0];\n      this.config.failOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetYStart = offset;\n    } else {\n      this.config.failOffsetYEnd = offset;\n    }\n    return this;\n  }\n  failOffsetX(offset) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetXStart = offset[0];\n      this.config.failOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetXStart = offset;\n    } else {\n      this.config.failOffsetXEnd = offset;\n    }\n    return this;\n  }\n  minPointers(minPointers) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n  maxPointers(maxPointers) {\n    this.config.maxPointers = maxPointers;\n    return this;\n  }\n  minDistance(distance) {\n    this.config.minDist = distance;\n    return this;\n  }\n  minVelocity(velocity) {\n    this.config.minVelocity = velocity;\n    return this;\n  }\n  minVelocityX(velocity) {\n    this.config.minVelocityX = velocity;\n    return this;\n  }\n  minVelocityY(velocity) {\n    this.config.minVelocityY = velocity;\n    return this;\n  }\n  averageTouches(value) {\n    this.config.avgTouches = value;\n    return this;\n  }\n  enableTrackpadTwoFingerGesture(value) {\n    this.config.enableTrackpadTwoFingerGesture = value;\n    return this;\n  }\n  activateAfterLongPress(duration) {\n    this.config.activateAfterLongPress = duration;\n    return this;\n  }\n  onChange(callback) {\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}","map":{"version":3,"names":["ContinousBaseGesture","_worklet_16045788923165_init_data","code","location","sourceMap","changeEventCalculator","changeEventCalculator_panGestureJs1Factory","_e","global","Error","current","previous","changePayload","undefined","changeX","translationX","changeY","translationY","Object","assign","__closure","__workletHash","__pluginVersion","__initData","__stackDetails","PanGesture","config","constructor","handlerName","activeOffsetY","offset","Array","isArray","activeOffsetYStart","activeOffsetYEnd","activeOffsetX","activeOffsetXStart","activeOffsetXEnd","failOffsetY","failOffsetYStart","failOffsetYEnd","failOffsetX","failOffsetXStart","failOffsetXEnd","minPointers","maxPointers","minDistance","distance","minDist","minVelocity","velocity","minVelocityX","minVelocityY","averageTouches","value","avgTouches","enableTrackpadTwoFingerGesture","activateAfterLongPress","duration","onChange","callback","handlers"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\panGesture.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\nimport { PanGestureConfig } from '../PanGestureHandler';\nimport type { PanGestureHandlerEventPayload } from '../GestureHandlerEventPayload';\n\nexport type PanGestureChangeEventPayload = {\n  changeX: number;\n  changeY: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<PanGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<PanGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: PanGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY,\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class PanGesture extends ContinousBaseGesture<\n  PanGestureHandlerEventPayload,\n  PanGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & PanGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'PanGestureHandler';\n  }\n\n  /**\n   * Range along Y axis (in points) where fingers travels without activation of gesture.\n   * @param offset\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#activeoffsetyvalue-number--number\n   */\n  activeOffsetY(\n    offset: number | [activeOffsetYStart: number, activeOffsetYEnd: number]\n  ) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetYStart = offset[0];\n      this.config.activeOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetYStart = offset;\n    } else {\n      this.config.activeOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  /**\n   * Range along X axis (in points) where fingers travels without activation of gesture.\n   * @param offset\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#activeoffsetxvalue-number--number\n   */\n  activeOffsetX(\n    offset: number | [activeOffsetXStart: number, activeOffsetXEnd: number]\n  ) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetXStart = offset[0];\n      this.config.activeOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetXStart = offset;\n    } else {\n      this.config.activeOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  /**\n   * When the finger moves outside this range (in points) along Y axis and gesture hasn't yet activated it will fail recognizing the gesture.\n   * @param offset\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#failoffsetyvalue-number--number\n   */\n  failOffsetY(\n    offset: number | [failOffsetYStart: number, failOffsetYEnd: number]\n  ) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetYStart = offset[0];\n      this.config.failOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetYStart = offset;\n    } else {\n      this.config.failOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  /**\n   * When the finger moves outside this range (in points) along X axis and gesture hasn't yet activated it will fail recognizing the gesture.\n   * @param offset\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#failoffsetxvalue-number--number\n   */\n  failOffsetX(\n    offset: number | [failOffsetXStart: number, failOffsetXEnd: number]\n  ) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetXStart = offset[0];\n      this.config.failOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetXStart = offset;\n    } else {\n      this.config.failOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  /**\n   * A number of fingers that is required to be placed before gesture can activate. Should be a higher or equal to 0 integer.\n   * @param minPointers\n   */\n  minPointers(minPointers: number) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n\n  /**\n   * When the given number of fingers is placed on the screen and gesture hasn't yet activated it will fail recognizing the gesture.\n   * Should be a higher or equal to 0 integer.\n   * @param maxPointers\n   */\n  maxPointers(maxPointers: number) {\n    this.config.maxPointers = maxPointers;\n    return this;\n  }\n\n  /**\n   * Minimum distance the finger (or multiple finger) need to travel before the gesture activates.\n   * Expressed in points.\n   * @param distance\n   */\n  minDistance(distance: number) {\n    this.config.minDist = distance;\n    return this;\n  }\n\n  /**\n   * Minimum velocity the finger has to reach in order to activate handler.\n   * @param velocity\n   */\n  minVelocity(velocity: number) {\n    this.config.minVelocity = velocity;\n    return this;\n  }\n\n  /**\n   * Minimum velocity along X axis the finger has to reach in order to activate handler.\n   * @param velocity\n   */\n  minVelocityX(velocity: number) {\n    this.config.minVelocityX = velocity;\n    return this;\n  }\n\n  /**\n   * Minimum velocity along Y axis the finger has to reach in order to activate handler.\n   * @param velocity\n   */\n  minVelocityY(velocity: number) {\n    this.config.minVelocityY = velocity;\n    return this;\n  }\n\n  /**\n   * #### Android only\n   * Android, by default, will calculate translation values based on the position of the leading pointer (the first one that was placed on the screen).\n   * This modifier allows that behavior to be changed to the one that is default on iOS - the averaged position of all active pointers will be used to calculate the translation values.\n   * @param value\n   */\n  averageTouches(value: boolean) {\n    this.config.avgTouches = value;\n    return this;\n  }\n\n  /**\n   * #### iOS only\n   * Enables two-finger gestures on supported devices, for example iPads with trackpads.\n   * @param value\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture/#enabletrackpadtwofingergesturevalue-boolean-ios-only\n   */\n  enableTrackpadTwoFingerGesture(value: boolean) {\n    this.config.enableTrackpadTwoFingerGesture = value;\n    return this;\n  }\n\n  /**\n   * Duration in milliseconds of the LongPress gesture before Pan is allowed to activate.\n   * @param duration\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture/#activateafterlongpressduration-number\n   */\n  activateAfterLongPress(duration: number) {\n    this.config.activateAfterLongPress = duration;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        PanGestureHandlerEventPayload & PanGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, PanGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type PanGestureType = InstanceType<typeof PanGesture>;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}