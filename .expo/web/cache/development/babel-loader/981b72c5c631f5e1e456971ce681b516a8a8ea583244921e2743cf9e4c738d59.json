{"ast":null,"code":"'use strict';\n\nimport { createSerializable } from 'react-native-worklets';\nimport { SHOULD_BE_USE_WEB } from \"./common/index.js\";\nimport { configureLayoutAnimationBatch } from \"./core.js\";\nfunction createUpdateManager() {\n  const animations = [];\n  const deferredAnimations = [];\n  return {\n    update(batchItem, isUnmounting) {\n      if (isUnmounting) {\n        deferredAnimations.push(batchItem);\n      } else {\n        animations.push(batchItem);\n      }\n      if (animations.length + deferredAnimations.length === 1) {\n        this.flush();\n      }\n    },\n    flush() {\n      configureLayoutAnimationBatch(animations.concat(deferredAnimations));\n      animations.length = 0;\n      deferredAnimations.length = 0;\n    }\n  };\n}\nexport let updateLayoutAnimations;\nif (SHOULD_BE_USE_WEB) {\n  updateLayoutAnimations = () => {};\n} else {\n  const updateLayoutAnimationsManager = createUpdateManager();\n  updateLayoutAnimations = (viewTag, type, config, isUnmounting) => updateLayoutAnimationsManager.update({\n    viewTag,\n    type,\n    config: config ? createSerializable(config) : undefined\n  }, isUnmounting);\n}","map":{"version":3,"names":["createSerializable","SHOULD_BE_USE_WEB","configureLayoutAnimationBatch","createUpdateManager","animations","deferredAnimations","update","batchItem","isUnmounting","push","length","flush","concat","updateLayoutAnimations","updateLayoutAnimationsManager","viewTag","type","config","undefined"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\UpdateLayoutAnimations.ts"],"sourcesContent":["'use strict';\nimport { createSerializable } from 'react-native-worklets';\n\nimport { SHOULD_BE_USE_WEB } from './common';\nimport type {\n  LayoutAnimationBatchItem,\n  LayoutAnimationFunction,\n  LayoutAnimationType,\n} from './commonTypes';\nimport { configureLayoutAnimationBatch } from './core';\n\nfunction createUpdateManager() {\n  const animations: LayoutAnimationBatchItem[] = [];\n  // When a stack is rerendered we reconfigure all the shared elements.\n  // To do that we want them to appear in our batch in the correct order,\n  // so we defer some of the updates to appear at the end of the batch.\n  const deferredAnimations: LayoutAnimationBatchItem[] = [];\n\n  return {\n    update(batchItem: LayoutAnimationBatchItem, isUnmounting?: boolean) {\n      if (isUnmounting) {\n        deferredAnimations.push(batchItem);\n      } else {\n        animations.push(batchItem);\n      }\n      if (animations.length + deferredAnimations.length === 1) {\n        this.flush();\n      }\n    },\n    flush(this: void) {\n      configureLayoutAnimationBatch(animations.concat(deferredAnimations));\n      animations.length = 0;\n      deferredAnimations.length = 0;\n    },\n  };\n}\n\n/**\n * Lets you update the current configuration of the layout animation or shared\n * element transition for a given component. Configurations are batched and\n * applied at the end of the current execution block, right before sending the\n * response back to native.\n *\n * @param viewTag - The tag of the component you'd like to configure.\n * @param type - The type of the animation you'd like to configure -\n *   {@link LayoutAnimationType}.\n * @param config - The animation configuration - {@link LayoutAnimationFunction}\n *   or {@link Keyframe}. Passing `undefined` will remove the animation.\n * @param isUnmounting - Determines whether the configuration should be included\n *   at the end of the batch, after all the non-deferred configurations (even\n *   those that were updated later). This is used to retain the correct ordering\n *   of shared elements. Defaults to `false`.\n */\nexport let updateLayoutAnimations: (\n  viewTag: number,\n  type: LayoutAnimationType,\n  config?: Keyframe | LayoutAnimationFunction,\n  isUnmounting?: boolean\n) => void;\n\nif (SHOULD_BE_USE_WEB) {\n  updateLayoutAnimations = () => {\n    // no-op\n  };\n} else {\n  const updateLayoutAnimationsManager = createUpdateManager();\n  updateLayoutAnimations = (viewTag, type, config, isUnmounting) =>\n    updateLayoutAnimationsManager.update(\n      {\n        viewTag,\n        type,\n        config: config ? createSerializable(config) : undefined,\n      },\n      isUnmounting\n    );\n}\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,kBAAkB,QAAQ,uBAAuB;AAE1D,SAASC,iBAAiB,QAAQ,mBAAU;AAM5C,SAASC,6BAA6B,QAAQ,WAAQ;AAEtD,SAASC,mBAAmBA,CAAA,EAAG;EAC7B,MAAMC,UAAsC,GAAG,EAAE;EAIjD,MAAMC,kBAA8C,GAAG,EAAE;EAEzD,OAAO;IACLC,MAAMA,CAACC,SAAmC,EAAEC,YAAsB,EAAE;MAClE,IAAIA,YAAY,EAAE;QAChBH,kBAAkB,CAACI,IAAI,CAACF,SAAS,CAAC;MACpC,CAAC,MAAM;QACLH,UAAU,CAACK,IAAI,CAACF,SAAS,CAAC;MAC5B;MACA,IAAIH,UAAU,CAACM,MAAM,GAAGL,kBAAkB,CAACK,MAAM,KAAK,CAAC,EAAE;QACvD,IAAI,CAACC,KAAK,CAAC,CAAC;MACd;IACF,CAAC;IACDA,KAAKA,CAAA,EAAa;MAChBT,6BAA6B,CAACE,UAAU,CAACQ,MAAM,CAACP,kBAAkB,CAAC,CAAC;MACpED,UAAU,CAACM,MAAM,GAAG,CAAC;MACrBL,kBAAkB,CAACK,MAAM,GAAG,CAAC;IAC/B;EACF,CAAC;AACH;AAkBA,OAAO,IAAIG,sBAKF;AAET,IAAIZ,iBAAiB,EAAE;EACrBY,sBAAsB,GAAGA,CAAA,KAAM,CAC7B,CACD;AACH,CAAC,MAAM;EACL,MAAMC,6BAA6B,GAAGX,mBAAmB,CAAC,CAAC;EAC3DU,sBAAsB,GAAGA,CAACE,OAAO,EAAEC,IAAI,EAAEC,MAAM,EAAET,YAAY,KAC3DM,6BAA6B,CAACR,MAAM,CAClC;IACES,OAAO;IACPC,IAAI;IACJC,MAAM,EAAEA,MAAM,GAAGjB,kBAAkB,CAACiB,MAAM,CAAC,GAAGC;EAChD,CAAC,EACDV,YACF,CAAC;AACL","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}