{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"onPress\", \"onLongPress\"];\nimport React, { forwardRef, useEffect, useRef } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport RNText from \"react-native-web/dist/exports/Text\";\nimport { GestureObjects as Gesture } from '../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../handlers/gestures/GestureDetector';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport const Text = forwardRef((props, ref) => {\n  const {\n      onPress,\n      onLongPress\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  const textRef = useRef(null);\n  const native = Gesture.Native().runOnJS(true);\n  const refHandler = node => {\n    textRef.current = node;\n    if (ref === null) {\n      return;\n    }\n    if (typeof ref === 'function') {\n      ref(node);\n    } else {\n      ref.current = node;\n    }\n  };\n  refHandler.rngh = true;\n  useEffect(() => {\n    if (Platform.OS !== 'web') {\n      return;\n    }\n    const textElement = ref ? ref.current : textRef.current;\n    textElement?.setAttribute('rnghtext', 'true');\n  }, []);\n  return onPress || onLongPress ? _jsx(GestureDetector, {\n    gesture: native,\n    children: _jsx(RNText, Object.assign({\n      onPress: onPress,\n      onLongPress: onLongPress,\n      ref: refHandler\n    }, rest))\n  }) : _jsx(RNText, Object.assign({\n    ref: ref\n  }, rest));\n});","map":{"version":3,"names":["React","forwardRef","useEffect","useRef","Platform","RNText","GestureObjects","Gesture","GestureDetector","jsx","_jsx","Text","props","ref","onPress","onLongPress","rest","_objectWithoutPropertiesLoose","_excluded","textRef","native","Native","runOnJS","refHandler","node","current","rngh","OS","textElement","setAttribute","gesture","children","Object","assign"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\components\\Text.tsx"],"sourcesContent":["import React, {\n  ForwardedRef,\n  forwardRef,\n  RefObject,\n  useEffect,\n  useRef,\n} from 'react';\nimport {\n  Platform,\n  Text as RNText,\n  TextProps as RNTextProps,\n} from 'react-native';\n\nimport { GestureObjects as Gesture } from '../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../handlers/gestures/GestureDetector';\n\nexport const Text = forwardRef(\n  (\n    props: RNTextProps,\n    ref: ForwardedRef<React.ComponentRef<typeof RNText>>\n  ) => {\n    const { onPress, onLongPress, ...rest } = props;\n\n    const textRef = useRef<RNText | null>(null);\n    const native = Gesture.Native().runOnJS(true);\n\n    const refHandler = (node: any) => {\n      textRef.current = node;\n\n      if (ref === null) {\n        return;\n      }\n\n      if (typeof ref === 'function') {\n        ref(node);\n      } else {\n        ref.current = node;\n      }\n    };\n\n    // This is a special case for `Text` component. After https://github.com/software-mansion/react-native-gesture-handler/pull/3379 we check for\n    // `displayName` field. However, `Text` from RN has this field set to `Text`, but is also present in `RNSVGElements` set.\n    // We don't want to treat our `Text` as the one from `SVG`, therefore we add special field to ref.\n    refHandler.rngh = true;\n\n    useEffect(() => {\n      if (Platform.OS !== 'web') {\n        return;\n      }\n\n      const textElement = ref\n        ? (ref as RefObject<React.ComponentRef<typeof RNText>>).current\n        : textRef.current;\n\n      // At this point we are sure that textElement is div in HTML tree\n      (textElement as unknown as HTMLDivElement)?.setAttribute(\n        'rnghtext',\n        'true'\n      );\n    }, []);\n\n    return onPress || onLongPress ? (\n      <GestureDetector gesture={native}>\n        <RNText\n          onPress={onPress}\n          onLongPress={onLongPress}\n          ref={refHandler}\n          {...rest}\n        />\n      </GestureDetector>\n    ) : (\n      <RNText ref={ref} {...rest} />\n    );\n  }\n);\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type Text = typeof Text & RNText;\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAEVC,UAAU,EAEVC,SAAS,EACTC,MAAM,QACD,OAAO;AAAA,OAAAC,QAAA;AAAA,OAAAC,MAAA;AAOd,SAASC,cAAc,IAAIC,OAAO,QAAQ,qCAAqC;AAC/E,SAASC,eAAe,QAAQ,sCAAsC;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAEvE,OAAO,MAAMC,IAAI,GAAGV,UAAU,CAC5B,CACEW,KAAkB,EAClBC,GAAoD,KACjD;EACH,MAAM;MAAEC,OAAO;MAAEC;IAAqB,CAAC,GAAGH,KAAK;IAAdI,IAAA,GAAAC,6BAAA,CAASL,KAAK,EAAAM,SAAA;EAE/C,MAAMC,OAAO,GAAGhB,MAAM,CAAgB,IAAI,CAAC;EAC3C,MAAMiB,MAAM,GAAGb,OAAO,CAACc,MAAM,CAAC,CAAC,CAACC,OAAO,CAAC,IAAI,CAAC;EAE7C,MAAMC,UAAU,GAAIC,IAAS,IAAK;IAChCL,OAAO,CAACM,OAAO,GAAGD,IAAI;IAEtB,IAAIX,GAAG,KAAK,IAAI,EAAE;MAChB;IACF;IAEA,IAAI,OAAOA,GAAG,KAAK,UAAU,EAAE;MAC7BA,GAAG,CAACW,IAAI,CAAC;IACX,CAAC,MAAM;MACLX,GAAG,CAACY,OAAO,GAAGD,IAAI;IACpB;EACF,CAAC;EAKDD,UAAU,CAACG,IAAI,GAAG,IAAI;EAEtBxB,SAAS,CAAC,MAAM;IACd,IAAIE,QAAQ,CAACuB,EAAE,KAAK,KAAK,EAAE;MACzB;IACF;IAEA,MAAMC,WAAW,GAAGf,GAAG,GAClBA,GAAG,CAAkDY,OAAO,GAC7DN,OAAO,CAACM,OAAO;IAGlBG,WAAW,EAAgCC,YAAY,CACtD,UAAU,EACV,MACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOf,OAAO,IAAIC,WAAW,GAC3BL,IAAA,CAACF,eAAe;IAACsB,OAAO,EAAEV,MAAO;IAAAW,QAAA,EAC/BrB,IAAA,CAACL,MAAM,EAAA2B,MAAA,CAAAC,MAAA;MACLnB,OAAO,EAAEA,OAAQ;MACjBC,WAAW,EAAEA,WAAY;MACzBF,GAAG,EAAEU;IAAW,GACZP,IAAA,CACL;EAAC,CACa,CAAC,GAElBN,IAAA,CAACL,MAAM,EAAA2B,MAAA,CAAAC,MAAA;IAACpB,GAAG,EAAEA;EAAI,GAAKG,IAAA,CAAO,CAC9B;AACH,CACF,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}