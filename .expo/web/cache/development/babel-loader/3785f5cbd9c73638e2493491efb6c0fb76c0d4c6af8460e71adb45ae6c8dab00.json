{"ast":null,"code":"'use strict';\n\nimport { registerCSSKeyframes, unregisterCSSKeyframes } from \"../proxy.js\";\nclass CSSKeyframesRegistry {\n  cssTextToNameMap_ = new Map();\n  nameToKeyframes_ = new Map();\n  get(nameOrCssText) {\n    const result = this.nameToKeyframes_.get(nameOrCssText);\n    if (result) {\n      return result.keyframesRule;\n    }\n    const animationName = this.cssTextToNameMap_.get(nameOrCssText);\n    if (animationName) {\n      return this.nameToKeyframes_.get(animationName)?.keyframesRule;\n    }\n  }\n  add(keyframesRule, viewName, viewTag) {\n    const existingKeyframesEntry = this.nameToKeyframes_.get(keyframesRule.name);\n    const existingComponentEntry = existingKeyframesEntry?.usedBy[viewName];\n    if (existingComponentEntry) {\n      existingComponentEntry.add(viewTag);\n      return;\n    }\n    if (existingKeyframesEntry) {\n      existingKeyframesEntry.usedBy[viewName] = new Set([viewTag]);\n    } else {\n      this.nameToKeyframes_.set(keyframesRule.name, {\n        keyframesRule,\n        usedBy: {\n          [viewName]: new Set([viewTag])\n        }\n      });\n    }\n    this.cssTextToNameMap_.set(keyframesRule.cssText, keyframesRule.name);\n    registerCSSKeyframes(keyframesRule.name, viewName, keyframesRule.getNormalizedKeyframesConfig(viewName));\n  }\n  remove(animationName, viewName, viewTag) {\n    const keyframesEntry = this.nameToKeyframes_.get(animationName);\n    if (!keyframesEntry) {\n      return;\n    }\n    const componentEntry = keyframesEntry.usedBy[viewName];\n    componentEntry.delete(viewTag);\n    if (componentEntry.size === 0) {\n      delete keyframesEntry.usedBy[viewName];\n      unregisterCSSKeyframes(animationName, viewName);\n    }\n    if (Object.keys(keyframesEntry.usedBy).length === 0) {\n      this.nameToKeyframes_.delete(animationName);\n      this.cssTextToNameMap_.delete(keyframesEntry.keyframesRule.cssText);\n    }\n  }\n  clear() {\n    this.nameToKeyframes_.clear();\n    this.cssTextToNameMap_.clear();\n  }\n}\nconst cssKeyframesRegistry = new CSSKeyframesRegistry();\nexport default cssKeyframesRegistry;","map":{"version":3,"names":["registerCSSKeyframes","unregisterCSSKeyframes","CSSKeyframesRegistry","cssTextToNameMap_","Map","nameToKeyframes_","get","nameOrCssText","result","keyframesRule","animationName","add","viewName","viewTag","existingKeyframesEntry","name","existingComponentEntry","usedBy","Set","set","cssText","getNormalizedKeyframesConfig","remove","keyframesEntry","componentEntry","delete","size","Object","keys","length","clear","cssKeyframesRegistry"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\css\\native\\keyframes\\CSSKeyframesRegistry.ts"],"sourcesContent":["'use strict';\nimport { registerCSSKeyframes, unregisterCSSKeyframes } from '../proxy';\nimport type CSSKeyframesRuleImpl from './CSSKeyframesRuleImpl';\n\ntype KeyframesEntry = {\n  keyframesRule: CSSKeyframesRuleImpl;\n  usedBy: Record<string, Set<number>>;\n};\n\n/**\n * This class is responsible for managing the registry of CSS animation\n * keyframes. It keeps track of views that use specific animations and handles\n * native-side registration. Animation keyframes are registered on the native\n * side only when used for the first time and unregistered when removed from the\n * last view that uses them.\n */\nclass CSSKeyframesRegistry {\n  private readonly cssTextToNameMap_: Map<string, string> = new Map();\n  private readonly nameToKeyframes_: Map<string, KeyframesEntry> = new Map();\n\n  get(nameOrCssText: string) {\n    const result = this.nameToKeyframes_.get(nameOrCssText);\n    if (result) {\n      return result.keyframesRule;\n    }\n\n    const animationName = this.cssTextToNameMap_.get(nameOrCssText);\n    if (animationName) {\n      return this.nameToKeyframes_.get(animationName)?.keyframesRule;\n    }\n  }\n\n  add(keyframesRule: CSSKeyframesRuleImpl, viewName: string, viewTag: number) {\n    const existingKeyframesEntry = this.nameToKeyframes_.get(\n      keyframesRule.name\n    );\n    const existingComponentEntry = existingKeyframesEntry?.usedBy[viewName];\n\n    if (existingComponentEntry) {\n      // Just add the view tag to the existing component entry if keyframes\n      // for the specific animation and component name are already registered\n      existingComponentEntry.add(viewTag);\n      return;\n    }\n\n    // Otherwise, we have to register keyframes preprocessed for the specific\n    // component name\n    if (existingKeyframesEntry) {\n      existingKeyframesEntry.usedBy[viewName] = new Set([viewTag]);\n    } else {\n      this.nameToKeyframes_.set(keyframesRule.name, {\n        keyframesRule,\n        usedBy: { [viewName]: new Set([viewTag]) },\n      });\n    }\n\n    // Store the keyframes to name mapping in order to reuse the same\n    // animation name when possible (when the same inline keyframes object\n    // is used)\n    this.cssTextToNameMap_.set(keyframesRule.cssText, keyframesRule.name);\n\n    // Register animation keyframes only if they are not already registered\n    // (when they are added for the first time)\n    registerCSSKeyframes(\n      keyframesRule.name,\n      viewName,\n      keyframesRule.getNormalizedKeyframesConfig(viewName)\n    );\n  }\n\n  remove(animationName: string, viewName: string, viewTag: number) {\n    const keyframesEntry = this.nameToKeyframes_.get(animationName);\n    if (!keyframesEntry) {\n      return;\n    }\n\n    const componentEntry = keyframesEntry.usedBy[viewName];\n    componentEntry.delete(viewTag);\n\n    if (componentEntry.size === 0) {\n      delete keyframesEntry.usedBy[viewName];\n      unregisterCSSKeyframes(animationName, viewName);\n    }\n\n    if (Object.keys(keyframesEntry.usedBy).length === 0) {\n      this.nameToKeyframes_.delete(animationName);\n      this.cssTextToNameMap_.delete(keyframesEntry.keyframesRule.cssText);\n    }\n  }\n\n  clear() {\n    this.nameToKeyframes_.clear();\n    this.cssTextToNameMap_.clear();\n  }\n}\n\nconst cssKeyframesRegistry = new CSSKeyframesRegistry();\n\nexport default cssKeyframesRegistry;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}