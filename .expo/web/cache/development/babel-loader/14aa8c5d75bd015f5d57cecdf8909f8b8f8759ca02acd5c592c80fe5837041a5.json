{"ast":null,"code":"'use strict';\n\nimport { ReanimatedError } from \"../../../../common/index.js\";\nimport { isAngle, isNumber, isNumberArray, isPercentage } from \"../../../utils/index.js\";\nexport const ERROR_MESSAGES = {\n  invalidTransform: transform => `Invalid transform property: ${transform}`\n};\nconst parseTransformProperty = transform => {\n  const [key, valueString] = transform.split(/\\(\\s*/);\n  const values = parseValues(valueString.replace(/\\)$/g, ''));\n  switch (key) {\n    case 'translate':\n      return parseTranslate(values);\n    case 'translateX':\n      return parseTranslateX(values);\n    case 'translateY':\n      return parseTranslateY(values);\n    case 'scale':\n      return parseScale(values);\n    case 'scaleX':\n      return parseScaleX(values);\n    case 'scaleY':\n      return parseScaleY(values);\n    case 'rotate':\n    case 'rotateX':\n    case 'rotateY':\n    case 'rotateZ':\n      return parseRotate(key, values);\n    case 'skew':\n      return parseSkew(values);\n    case 'skewX':\n      return parseSkewX(values);\n    case 'skewY':\n      return parseSkewY(values);\n    case 'matrix':\n      return parseMatrix(values);\n    default:\n      return [];\n  }\n};\nfunction parseValues(valueString) {\n  return valueString.split(',').map(value => {\n    const trimmedValue = value.trim();\n    if (['deg', 'rad', '%'].some(unit => trimmedValue.endsWith(unit))) {\n      return trimmedValue;\n    }\n    const numValue = parseFloat(trimmedValue);\n    return isNaN(numValue) ? trimmedValue : numValue;\n  });\n}\nfunction parseTranslate(values) {\n  if (values.length > 2) {\n    return [];\n  }\n  const result = parseTranslateX([values[0]]).concat(parseTranslateY([values[1] ?? values[0]]));\n  return result.length === 2 ? result : [];\n}\nfunction parseTranslateX(values) {\n  return values.length === 1 && (isNumber(values[0]) || isPercentage(values[0])) ? [{\n    translateX: values[0]\n  }] : [];\n}\nfunction parseTranslateY(values) {\n  return values.length === 1 && (isNumber(values[0]) || isPercentage(values[0])) ? [{\n    translateY: values[0]\n  }] : [];\n}\nfunction parseScale(values) {\n  if (values.length > 2) {\n    return [];\n  }\n  if (values.length === 1) {\n    return isNumber(values[0]) ? [{\n      scale: values[0]\n    }] : [];\n  }\n  const result = parseScaleX([values[0]]).concat(parseScaleY([values[1] ?? values[0]]));\n  return result.length === 2 ? result : [];\n}\nfunction parseScaleX(values) {\n  return values.length === 1 && isNumber(values[0]) ? [{\n    scaleX: values[0]\n  }] : [];\n}\nfunction parseScaleY(values) {\n  return values.length === 1 && isNumber(values[0]) ? [{\n    scaleY: values[0]\n  }] : [];\n}\nfunction parseRotate(key, values) {\n  return values.length === 1 && (isAngle(values[0]) || values[0] === 0) ? [{\n    [key]: values[0] === 0 ? '0deg' : values[0]\n  }] : [];\n}\nfunction parseSkew(values) {\n  if (values.length > 2) {\n    return [];\n  }\n  const result = parseSkewX([values[0]]).concat(parseSkewY([values[1] ?? values[0]]));\n  return result.length === 2 ? result : [];\n}\nfunction parseSkewX(values) {\n  return values.length === 1 && (isAngle(values[0]) || values[0] === 0) ? [{\n    skewX: values[0] === 0 ? '0deg' : values[0]\n  }] : [];\n}\nfunction parseSkewY(values) {\n  return values.length === 1 && (isAngle(values[0]) || values[0] === 0) ? [{\n    skewY: values[0] === 0 ? '0deg' : values[0]\n  }] : [];\n}\nfunction parseMatrix(values) {\n  let matrixValues = [];\n  if (isNumberArray(values)) {\n    if (values.length === 6) {\n      matrixValues = [values[0], values[1], 0, 0, values[2], values[3], 0, 0, 0, 0, 1, 0, values[4], values[5], 0, 1];\n    } else if (values.length === 16) {\n      matrixValues = values;\n    }\n  }\n  return matrixValues.length > 0 ? [{\n    matrix: matrixValues\n  }] : [];\n}\nexport const processTransform = value => {\n  if (typeof value !== 'string') {\n    return value;\n  }\n  return value.split(/\\)\\s*/).filter(Boolean).flatMap(part => {\n    const parsed = parseTransformProperty(part);\n    if (parsed.length === 0) {\n      throw new ReanimatedError(ERROR_MESSAGES.invalidTransform(`${part})`));\n    }\n    return parsed;\n  });\n};","map":{"version":3,"names":["ReanimatedError","isAngle","isNumber","isNumberArray","isPercentage","ERROR_MESSAGES","invalidTransform","transform","parseTransformProperty","key","valueString","split","values","parseValues","replace","parseTranslate","parseTranslateX","parseTranslateY","parseScale","parseScaleX","parseScaleY","parseRotate","parseSkew","parseSkewX","parseSkewY","parseMatrix","map","value","trimmedValue","trim","some","unit","endsWith","numValue","parseFloat","isNaN","length","result","concat","translateX","translateY","scale","scaleX","scaleY","skewX","skewY","matrixValues","matrix","processTransform","filter","Boolean","flatMap","part","parsed"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\css\\native\\style\\processors\\transform.ts"],"sourcesContent":["'use strict';\nimport { ReanimatedError } from '../../../../common';\nimport type { TransformsArray } from '../../../types';\nimport { isAngle, isNumber, isNumberArray, isPercentage } from '../../../utils';\nimport type { ValueProcessor } from '../types';\n\nexport const ERROR_MESSAGES = {\n  invalidTransform: (transform: string) =>\n    `Invalid transform property: ${transform}`,\n};\n\nconst parseTransformProperty = (transform: string): TransformsArray => {\n  const [key, valueString] = transform.split(/\\(\\s*/);\n  const values = parseValues(valueString.replace(/\\)$/g, ''));\n\n  switch (key) {\n    case 'translate':\n      return parseTranslate(values);\n    case 'translateX':\n      return parseTranslateX(values);\n    case 'translateY':\n      return parseTranslateY(values);\n    case 'scale':\n      return parseScale(values);\n    case 'scaleX':\n      return parseScaleX(values);\n    case 'scaleY':\n      return parseScaleY(values);\n    case 'rotate':\n    case 'rotateX':\n    case 'rotateY':\n    case 'rotateZ':\n      return parseRotate(key, values);\n    case 'skew':\n      return parseSkew(values);\n    case 'skewX':\n      return parseSkewX(values);\n    case 'skewY':\n      return parseSkewY(values);\n    case 'matrix':\n      return parseMatrix(values);\n    default:\n      return [];\n  }\n};\n\nfunction parseValues(valueString: string): (string | number)[] {\n  return valueString.split(',').map((value) => {\n    const trimmedValue = value.trim();\n    if (['deg', 'rad', '%'].some((unit) => trimmedValue.endsWith(unit))) {\n      return trimmedValue;\n    }\n    const numValue = parseFloat(trimmedValue);\n    return isNaN(numValue) ? trimmedValue : numValue;\n  });\n}\n\nfunction parseTranslate(values: (number | string)[]): TransformsArray {\n  if (values.length > 2) {\n    return [];\n  }\n  const result = parseTranslateX([values[0]]).concat(\n    parseTranslateY([values[1] ?? values[0]])\n  );\n  return result.length === 2 ? result : [];\n}\n\nfunction parseTranslateX(values: (number | string)[]): TransformsArray {\n  return values.length === 1 && (isNumber(values[0]) || isPercentage(values[0]))\n    ? [{ translateX: values[0] }]\n    : [];\n}\n\nfunction parseTranslateY(values: (number | string)[]): TransformsArray {\n  return values.length === 1 && (isNumber(values[0]) || isPercentage(values[0]))\n    ? [{ translateY: values[0] }]\n    : [];\n}\n\nfunction parseScale(values: (number | string)[]): TransformsArray {\n  if (values.length > 2) {\n    return [];\n  }\n  if (values.length === 1) {\n    return isNumber(values[0]) ? [{ scale: values[0] }] : [];\n  }\n  const result = parseScaleX([values[0]]).concat(\n    parseScaleY([values[1] ?? values[0]])\n  );\n  return result.length === 2 ? result : [];\n}\n\nfunction parseScaleX(values: (number | string)[]): TransformsArray {\n  return values.length === 1 && isNumber(values[0])\n    ? [{ scaleX: values[0] }]\n    : [];\n}\n\nfunction parseScaleY(values: (number | string)[]): TransformsArray {\n  return values.length === 1 && isNumber(values[0])\n    ? [{ scaleY: values[0] }]\n    : [];\n}\n\nfunction parseRotate(\n  key: string,\n  values: (string | number)[]\n): TransformsArray {\n  return values.length === 1 && (isAngle(values[0]) || values[0] === 0)\n    ? ([\n        { [key]: values[0] === 0 ? '0deg' : values[0] },\n      ] as unknown as TransformsArray)\n    : [];\n}\n\nfunction parseSkew(values: (number | string)[]): TransformsArray {\n  if (values.length > 2) {\n    return [];\n  }\n  const result = parseSkewX([values[0]]).concat(\n    parseSkewY([values[1] ?? values[0]])\n  );\n  return result.length === 2 ? result : [];\n}\n\nfunction parseSkewX(values: (number | string)[]): TransformsArray {\n  return values.length === 1 && (isAngle(values[0]) || values[0] === 0)\n    ? [{ skewX: values[0] === 0 ? '0deg' : values[0] }]\n    : [];\n}\n\nfunction parseSkewY(values: (number | string)[]): TransformsArray {\n  return values.length === 1 && (isAngle(values[0]) || values[0] === 0)\n    ? [{ skewY: values[0] === 0 ? '0deg' : values[0] }]\n    : [];\n}\n\nfunction parseMatrix(values: (number | string)[]): TransformsArray {\n  let matrixValues: number[] = [];\n\n  if (isNumberArray(values)) {\n    if (values.length === 6) {\n      // prettier-ignore\n      matrixValues = [\n        values[0], values[1], 0, 0,\n        values[2], values[3], 0, 0,\n        0,         0,         1, 0,\n        values[4], values[5], 0, 1\n      ];\n    } else if (values.length === 16) {\n      matrixValues = values;\n    }\n  }\n\n  return matrixValues.length > 0 ? [{ matrix: matrixValues }] : [];\n}\n\nexport const processTransform: ValueProcessor<TransformsArray | string> = (\n  value\n) => {\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  return value\n    .split(/\\)\\s*/)\n    .filter(Boolean)\n    .flatMap((part) => {\n      const parsed = parseTransformProperty(part);\n\n      if (parsed.length === 0) {\n        throw new ReanimatedError(ERROR_MESSAGES.invalidTransform(`${part})`));\n      }\n\n      return parsed;\n    });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}