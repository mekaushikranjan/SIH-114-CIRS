{"ast":null,"code":"\"use strict\";\nclass Vector {\n  constructor(length) {\n    this.offset = 0;\n    this.length = length;\n    this.elements = new Array(length);\n  }\n  static fromVOL(values, offset, length) {\n    const result = new Vector(0);\n    result.offset = offset;\n    result.length = length;\n    result.elements = values;\n    return result;\n  }\n  get(index) {\n    return this.elements[this.offset + index];\n  }\n  set(index, value) {\n    this.elements[this.offset + index] = value;\n  }\n  dot(other) {\n    let result = 0;\n    for (let i = 0; i < this.length; i++) {\n      result += this.get(i) * other.get(i);\n    }\n    return result;\n  }\n  norm() {\n    return Math.sqrt(this.dot(this));\n  }\n}\nclass Matrix {\n  constructor(rows, columns) {\n    this.columns = columns;\n    this.elements = new Array(rows * columns);\n  }\n  get(row, column) {\n    return this.elements[row * this.columns + column];\n  }\n  set(row, column, value) {\n    this.elements[row * this.columns + column] = value;\n  }\n  getRow(row) {\n    return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n  }\n}\nclass PolynomialFit {\n  constructor(degree) {\n    this.coefficients = new Array(degree + 1);\n  }\n}\nconst precisionErrorTolerance = 1e-10;\nexport default class LeastSquareSolver {\n  constructor(x, y, w) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n  }\n  solve(degree) {\n    if (degree > this.x.length) {\n      return null;\n    }\n    const result = new PolynomialFit(degree);\n    const m = this.x.length;\n    const n = degree + 1;\n    const a = new Matrix(n, m);\n    for (let h = 0; h < m; h++) {\n      a.set(0, h, this.w[h]);\n      for (let i = 1; i < n; i++) {\n        a.set(i, h, a.get(i - 1, h) * this.x[h]);\n      }\n    }\n    const q = new Matrix(n, m);\n    const r = new Matrix(n, m);\n    for (let j = 0; j < n; j += 1) {\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, a.get(j, h));\n      }\n      for (let i = 0; i < j; i += 1) {\n        const dot = q.getRow(j).dot(q.getRow(i));\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n        }\n      }\n      const norm = q.getRow(j).norm();\n      if (norm < precisionErrorTolerance) {\n        return null;\n      }\n      const inverseNorm = 1.0 / norm;\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, q.get(j, h) * inverseNorm);\n      }\n      for (let i = 0; i < n; i += 1) {\n        r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n      }\n    }\n    const wy = new Vector(m);\n    for (let h = 0; h < m; h += 1) {\n      wy.set(h, this.y[h] * this.w[h]);\n    }\n    for (let i = n - 1; i >= 0; i -= 1) {\n      result.coefficients[i] = q.getRow(i).dot(wy);\n      for (let j = n - 1; j > i; j -= 1) {\n        result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n      }\n      result.coefficients[i] /= r.get(i, i);\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["Vector","constructor","length","offset","elements","Array","fromVOL","values","result","get","index","set","value","dot","other","i","norm","Math","sqrt","Matrix","rows","columns","row","column","getRow","PolynomialFit","degree","coefficients","precisionErrorTolerance","LeastSquareSolver","x","y","w","solve","m","n","a","h","q","r","j","inverseNorm","wy"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\web\\tools\\LeastSquareSolver.ts"],"sourcesContent":["// Implementation taken from Flutter's LeastSquareSolver\n// https://github.com/flutter/flutter/blob/master/packages/flutter/lib/src/gestures/lsq_solver.dart\n\nclass Vector {\n  private offset: number;\n  private length: number;\n  private elements: number[];\n\n  constructor(length: number) {\n    this.offset = 0;\n    this.length = length;\n    this.elements = new Array<number>(length);\n  }\n\n  public static fromVOL(\n    values: number[],\n    offset: number,\n    length: number\n  ): Vector {\n    const result = new Vector(0);\n\n    result.offset = offset;\n    result.length = length;\n    result.elements = values;\n\n    return result;\n  }\n\n  public get(index: number): number {\n    return this.elements[this.offset + index];\n  }\n\n  public set(index: number, value: number): void {\n    this.elements[this.offset + index] = value;\n  }\n\n  public dot(other: Vector): number {\n    let result = 0;\n    for (let i = 0; i < this.length; i++) {\n      result += this.get(i) * other.get(i);\n    }\n    return result;\n  }\n\n  public norm() {\n    return Math.sqrt(this.dot(this));\n  }\n}\n\nclass Matrix {\n  private columns: number;\n  private elements: number[];\n\n  constructor(rows: number, columns: number) {\n    this.columns = columns;\n    this.elements = new Array<number>(rows * columns);\n  }\n\n  public get(row: number, column: number): number {\n    return this.elements[row * this.columns + column];\n  }\n\n  public set(row: number, column: number, value: number): void {\n    this.elements[row * this.columns + column] = value;\n  }\n\n  public getRow(row: number): Vector {\n    return Vector.fromVOL(this.elements, row * this.columns, this.columns);\n  }\n}\n\n// An nth degree polynomial fit to a dataset.\nclass PolynomialFit {\n  // The polynomial coefficients of the fit.\n  //\n  // For each `i`, the element `coefficients[i]` is the coefficient of\n  // the `i`-th power of the variable.\n  public coefficients: number[];\n\n  // Creates a polynomial fit of the given degree.\n  //\n  // There are n + 1 coefficients in a fit of degree n.\n  constructor(degree: number) {\n    this.coefficients = new Array<number>(degree + 1);\n  }\n}\n\nconst precisionErrorTolerance = 1e-10;\n\n// Uses the least-squares algorithm to fit a polynomial to a set of data.\nexport default class LeastSquareSolver {\n  // The x-coordinates of each data point.\n  private x: number[];\n  // The y-coordinates of each data point.\n  private y: number[];\n  // The weight to use for each data point.\n  private w: number[];\n\n  // Creates a least-squares solver.\n  //\n  // The [x], [y], and [w] arguments must not be null.\n  constructor(x: number[], y: number[], w: number[]) {\n    this.x = x;\n    this.y = y;\n    this.w = w;\n  }\n\n  // Fits a polynomial of the given degree to the data points.\n  //\n  // When there is not enough data to fit a curve null is returned.\n  public solve(degree: number): PolynomialFit | null {\n    if (degree > this.x.length) {\n      // Not enough data to fit a curve.\n      return null;\n    }\n\n    const result = new PolynomialFit(degree);\n\n    // Shorthands for the purpose of notation equivalence to original C++ code.\n    const m = this.x.length;\n    const n = degree + 1;\n\n    // Expand the X vector to a matrix A, pre-multiplied by the weights.\n    const a = new Matrix(n, m);\n    for (let h = 0; h < m; h++) {\n      a.set(0, h, this.w[h]);\n\n      for (let i = 1; i < n; i++) {\n        a.set(i, h, a.get(i - 1, h) * this.x[h]);\n      }\n    }\n\n    // Apply the Gram-Schmidt process to A to obtain its QR decomposition.\n\n    // Orthonormal basis, column-major ordVectorer.\n    const q = new Matrix(n, m);\n    // Upper triangular matrix, row-major order.\n    const r = new Matrix(n, m);\n\n    for (let j = 0; j < n; j += 1) {\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, a.get(j, h));\n      }\n      for (let i = 0; i < j; i += 1) {\n        const dot = q.getRow(j).dot(q.getRow(i));\n        for (let h = 0; h < m; h += 1) {\n          q.set(j, h, q.get(j, h) - dot * q.get(i, h));\n        }\n      }\n\n      const norm = q.getRow(j).norm();\n      if (norm < precisionErrorTolerance) {\n        // Vectors are linearly dependent or zero so no solution.\n        return null;\n      }\n\n      const inverseNorm = 1.0 / norm;\n      for (let h = 0; h < m; h += 1) {\n        q.set(j, h, q.get(j, h) * inverseNorm);\n      }\n      for (let i = 0; i < n; i += 1) {\n        r.set(j, i, i < j ? 0.0 : q.getRow(j).dot(a.getRow(i)));\n      }\n    }\n\n    // Solve R B = Qt W Y to find B. This is easy because R is upper triangular.\n    // We just work from bottom-right to top-left calculating B's coefficients.\n    const wy = new Vector(m);\n    for (let h = 0; h < m; h += 1) {\n      wy.set(h, this.y[h] * this.w[h]);\n    }\n    for (let i = n - 1; i >= 0; i -= 1) {\n      result.coefficients[i] = q.getRow(i).dot(wy);\n      for (let j = n - 1; j > i; j -= 1) {\n        result.coefficients[i] -= r.get(i, j) * result.coefficients[j];\n      }\n      result.coefficients[i] /= r.get(i, i);\n    }\n\n    return result;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}