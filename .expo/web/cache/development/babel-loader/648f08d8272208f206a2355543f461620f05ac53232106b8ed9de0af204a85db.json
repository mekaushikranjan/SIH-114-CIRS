{"ast":null,"code":"'use strict';\nconst _worklet_3417312074490_init_data = {\n  code: \"function isWorkletFunction_workletFunctionJs1(value){return(typeof value==='function'&&!!value.__workletHash);}\",\n  location: \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Desktop\\\\civic-reporter-sih\\\\frontend\\\\node_modules\\\\react-native-worklets\\\\lib\\\\module\\\\workletFunction.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"isWorkletFunction_workletFunctionJs1\\\",\\\"value\\\",\\\"__workletHash\\\"],\\\"sources\\\":[\\\"C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/node_modules/react-native-worklets/lib/module/workletFunction.js\\\"],\\\"mappings\\\":\\\"AA0BO,SAAAA,oCAAkCA,CAAAC,KAAA,EAKvC,OAEE,MAAO,CAAAA,KAAK,GAAK,UAAU,EAAI,CAAC,CAACA,KAAK,CAACC,aAAA,EAE3C\\\",\\\"ignoreList\\\":[]}\"\n};\nexport const isWorkletFunction = function isWorkletFunction_workletFunctionJs1Factory({\n  _worklet_3417312074490_init_data\n}) {\n  const _e = [new global.Error(), 1, -27];\n  const isWorkletFunction = function (value) {\n    return (typeof value === 'function' && !!value.__workletHash\n    );\n  };\n  isWorkletFunction.__closure = {};\n  isWorkletFunction.__workletHash = 3417312074490;\n  isWorkletFunction.__pluginVersion = \"0.5.1\";\n  isWorkletFunction.__initData = _worklet_3417312074490_init_data;\n  isWorkletFunction.__stackDetails = _e;\n  return isWorkletFunction;\n}({\n  _worklet_3417312074490_init_data\n});","map":{"version":3,"names":["_worklet_3417312074490_init_data","code","location","sourceMap","isWorkletFunction","isWorkletFunction_workletFunctionJs1Factory","_e","global","Error","value","__workletHash","__closure","__pluginVersion","__initData","__stackDetails"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-worklets\\src\\workletFunction.ts"],"sourcesContent":["'use strict';\n\nimport type { WorkletFunction } from './workletTypes';\n\n/**\n * This function allows you to determine if a given function is a worklet. It\n * only works with Reanimated Babel plugin enabled. Unless you are doing\n * something with internals of Reanimated you shouldn't need to use this\n * function.\n *\n * ### Note\n *\n * Do not call it before the worklet is declared, as it will always return false\n * then. E.g.:\n *\n * ```ts\n * isWorkletFunction(myWorklet); // Will always return false.\n *\n * function myWorklet() {\n *   'worklet';\n * }\n * ```\n *\n * ### Maintainer note\n *\n * This function is supposed to be used only in the React Runtime. It always\n * returns `false` in Worklet Runtimes.\n */\nexport function isWorkletFunction<\n  Args extends unknown[] = unknown[],\n  ReturnValue = unknown,\n>(value: unknown): value is WorkletFunction<Args, ReturnValue> {\n  'worklet';\n  // Since host objects always return true for `in` operator, we have to use dot notation to check if the property exists.\n  // See https://github.com/facebook/hermes/blob/340726ef8cf666a7cce75bc60b02fa56b3e54560/lib/VM/JSObject.cpp#L1276.\n\n  return (\n    // `__workletHash` isn't extracted in Worklet Runtimes.\n    typeof value === 'function' &&\n    !!(value as unknown as Record<string, unknown>).__workletHash\n  );\n}\n"],"mappings":"AAAA,YAAY;AAAA,MAAAA,gCAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;AAAA;AA4BZ,aAAAC,iBAAA,GAAO,SAAAC,4CAAA;EAAAL;AAAA;EAAA,MAAAM,EAAA,QAAAC,MAAA,CAAAC,KAAA;EAAA,MAAAJ,iBAAA,YAAAA,CAGLK,KAAc,EAA+C;IAK7D,QAEE,OAAOA,KAAK,KAAK,UAAU,IAC3B,CAAC,CAAEA,KAAK,CAAwCC;IAAA;EAEpD;EAAAN,iBAAA,CAAAO,SAAA;EAAAP,iBAAA,CAAAM,aAAA;EAAAN,iBAAA,CAAAQ,eAAA;EAAAR,iBAAA,CAAAS,UAAA,GAAAb,gCAAA;EAAAI,iBAAA,CAAAU,cAAA,GAAAR,EAAA;EAAA,OAAAF,iBAAA;AAAA,CAbO;EAAAJ;AAAA","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}