{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Desktop\\\\civic-reporter-sih\\\\frontend\\\\node_modules\\\\expo-video\\\\build\\\\VideoView.web.js\";\nimport React, { useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { getSourceUri } from './VideoPlayer.web';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction createAudioContext() {\n  return typeof window !== 'undefined' ? new window.AudioContext() : null;\n}\nfunction createZeroGainNode(audioContext) {\n  const zeroGainNode = audioContext?.createGain() ?? null;\n  if (audioContext && zeroGainNode) {\n    zeroGainNode.gain.value = 0;\n    zeroGainNode.connect(audioContext.destination);\n  }\n  return zeroGainNode;\n}\nfunction mapStyles(style) {\n  const flattenedStyles = StyleSheet.flatten(style);\n  return flattenedStyles;\n}\nexport function isPictureInPictureSupported() {\n  return typeof document === 'object' && typeof document.exitPictureInPicture === 'function';\n}\nexport const VideoView = forwardRef((props, ref) => {\n  const videoRef = useRef(null);\n  const mediaNodeRef = useRef(null);\n  const hasToSetupAudioContext = useRef(false);\n  const fullscreenChangeListeners = useRef(null);\n  const isWaitingForFirstFrame = useRef(false);\n  const audioContextRef = useRef(null);\n  const zeroGainNodeRef = useRef(null);\n  useEffect(() => {\n    if (props.useAudioNodePlayback) {\n      maybeSetupAudioContext();\n      attachAudioNodes();\n    } else {\n      detachAudioNodes();\n    }\n  }, [props.useAudioNodePlayback]);\n  useImperativeHandle(ref, () => ({\n    enterFullscreen: async () => {\n      if (!props.allowsFullscreen || !videoRef.current) {\n        return;\n      }\n      const video = videoRef.current;\n      if (video.requestFullscreen) {\n        await video.requestFullscreen();\n      } else if (video.webkitRequestFullscreen) {\n        await video.webkitRequestFullscreen();\n      } else if (video.webkitEnterFullScreen) {\n        await video.webkitEnterFullScreen();\n      } else if (video.msRequestFullscreen) {\n        await video.msRequestFullscreen();\n      }\n    },\n    exitFullscreen: async () => {\n      await document.exitFullscreen();\n    },\n    startPictureInPicture: async () => {\n      await videoRef.current?.requestPictureInPicture();\n    },\n    stopPictureInPicture: async () => {\n      try {\n        await document.exitPictureInPicture();\n      } catch (e) {\n        if (e instanceof DOMException && e.name === 'InvalidStateError') {\n          console.warn('The VideoView is not in Picture-in-Picture mode.');\n        } else {\n          throw e;\n        }\n      }\n    },\n    nativeRef: videoRef\n  }));\n  useEffect(() => {\n    const onEnter = () => {\n      props.onPictureInPictureStart?.();\n    };\n    const onLeave = () => {\n      props.onPictureInPictureStop?.();\n    };\n    const onLoadStart = () => {\n      isWaitingForFirstFrame.current = true;\n    };\n    const onCanPlay = () => {\n      if (isWaitingForFirstFrame.current) {\n        props.onFirstFrameRender?.();\n      }\n      isWaitingForFirstFrame.current = false;\n    };\n    videoRef.current?.addEventListener('enterpictureinpicture', onEnter);\n    videoRef.current?.addEventListener('leavepictureinpicture', onLeave);\n    videoRef.current?.addEventListener('loadstart', onLoadStart);\n    videoRef.current?.addEventListener('loadeddata', onCanPlay);\n    return () => {\n      videoRef.current?.removeEventListener('enterpictureinpicture', onEnter);\n      videoRef.current?.removeEventListener('leavepictureinpicture', onLeave);\n      videoRef.current?.removeEventListener('loadstart', onLoadStart);\n      videoRef.current?.removeEventListener('loadeddata', onCanPlay);\n    };\n  }, [videoRef, props.onPictureInPictureStop, props.onPictureInPictureStart]);\n  function attachAudioNodes() {\n    if (!props.useAudioNodePlayback) {\n      return;\n    }\n    const audioContext = audioContextRef.current;\n    const zeroGainNode = zeroGainNodeRef.current;\n    const mediaNode = mediaNodeRef.current;\n    if (audioContext && zeroGainNode && mediaNode) {\n      props.player.mountAudioNode(audioContext, zeroGainNode, mediaNode);\n    } else {\n      console.warn(\"Couldn't mount audio node, this might affect the audio playback when using multiple video views with the same player.\");\n    }\n  }\n  function detachAudioNodes() {\n    if (!props.useAudioNodePlayback) {\n      return;\n    }\n    const audioContext = audioContextRef.current;\n    const mediaNode = mediaNodeRef.current;\n    if (audioContext && mediaNode && videoRef.current) {\n      props.player.unmountAudioNode(videoRef.current, audioContext, mediaNode);\n    }\n  }\n  function maybeSetupAudioContext() {\n    if (!hasToSetupAudioContext.current || !navigator.userActivation.hasBeenActive || !videoRef.current || !props.useAudioNodePlayback) {\n      return;\n    }\n    const audioContext = createAudioContext();\n    detachAudioNodes();\n    audioContextRef.current = audioContext;\n    zeroGainNodeRef.current = createZeroGainNode(audioContextRef.current);\n    mediaNodeRef.current = audioContext ? audioContext.createMediaElementSource(videoRef.current) : null;\n    attachAudioNodes();\n    hasToSetupAudioContext.current = false;\n  }\n  function fullscreenListener() {\n    if (document.fullscreenElement === videoRef.current) {\n      props.onFullscreenEnter?.();\n    } else {\n      props.onFullscreenExit?.();\n    }\n  }\n  function setupFullscreenListener() {\n    cleanupFullscreenListener();\n    const video = videoRef.current;\n    if (!video) return;\n    const fullscreenListeners = {\n      default: fullscreenListener,\n      safariEnter: () => props.onFullscreenEnter?.(),\n      safariExit: () => props.onFullscreenExit?.(),\n      msListener: fullscreenListener\n    };\n    fullscreenChangeListeners.current = fullscreenListeners;\n    video.addEventListener('fullscreenchange', fullscreenListeners.default);\n    video.addEventListener('webkitbeginfullscreen', fullscreenListeners.safariEnter);\n    video.addEventListener('webkitendfullscreen', fullscreenListeners.safariExit);\n    document.addEventListener('MSFullscreenChange', fullscreenListeners.msListener);\n  }\n  function cleanupFullscreenListener() {\n    const video = videoRef.current;\n    if (!video || !fullscreenChangeListeners.current) return;\n    video.removeEventListener('fullscreenchange', fullscreenChangeListeners.current.default);\n    video.removeEventListener('webkitbeginfullscreen', fullscreenChangeListeners.current?.safariEnter);\n    video.removeEventListener('webkitendfullscreen', fullscreenChangeListeners.current.safariExit);\n    document.removeEventListener('MSFullscreenChange', fullscreenChangeListeners.current.msListener);\n  }\n  useEffect(() => {\n    if (videoRef.current) {\n      props.player?.mountVideoView(videoRef.current);\n    }\n    setupFullscreenListener();\n    attachAudioNodes();\n    return () => {\n      if (videoRef.current) {\n        props.player?.unmountVideoView(videoRef.current);\n      }\n      cleanupFullscreenListener();\n      detachAudioNodes();\n    };\n  }, [props.player]);\n  return _jsxDEV(\"video\", {\n    controls: props.nativeControls ?? true,\n    controlsList: props.allowsFullscreen ? undefined : 'nofullscreen',\n    crossOrigin: props.crossOrigin,\n    style: Object.assign({}, mapStyles(props.style), {\n      objectFit: props.contentFit\n    }),\n    onPlay: () => {\n      maybeSetupAudioContext();\n    },\n    onVolumeChange: () => {\n      maybeSetupAudioContext();\n    },\n    ref: newRef => {\n      if (newRef && !newRef.isEqualNode(videoRef.current)) {\n        videoRef.current = newRef;\n        hasToSetupAudioContext.current = props.useAudioNodePlayback ?? false;\n        maybeSetupAudioContext();\n      }\n    },\n    disablePictureInPicture: !props.allowsPictureInPicture,\n    playsInline: props.playsInline,\n    src: getSourceUri(props.player?.src) ?? ''\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 13\n  }, this);\n});\nexport default VideoView;","map":{"version":3,"names":["React","useEffect","useRef","forwardRef","useImperativeHandle","StyleSheet","getSourceUri","jsxDEV","_jsxDEV","createAudioContext","window","AudioContext","createZeroGainNode","audioContext","zeroGainNode","createGain","gain","value","connect","destination","mapStyles","style","flattenedStyles","flatten","isPictureInPictureSupported","document","exitPictureInPicture","VideoView","props","ref","videoRef","mediaNodeRef","hasToSetupAudioContext","fullscreenChangeListeners","isWaitingForFirstFrame","audioContextRef","zeroGainNodeRef","useAudioNodePlayback","maybeSetupAudioContext","attachAudioNodes","detachAudioNodes","enterFullscreen","allowsFullscreen","current","video","requestFullscreen","webkitRequestFullscreen","webkitEnterFullScreen","msRequestFullscreen","exitFullscreen","startPictureInPicture","requestPictureInPicture","stopPictureInPicture","e","DOMException","name","console","warn","nativeRef","onEnter","onPictureInPictureStart","onLeave","onPictureInPictureStop","onLoadStart","onCanPlay","onFirstFrameRender","addEventListener","removeEventListener","mediaNode","player","mountAudioNode","unmountAudioNode","navigator","userActivation","hasBeenActive","createMediaElementSource","fullscreenListener","fullscreenElement","onFullscreenEnter","onFullscreenExit","setupFullscreenListener","cleanupFullscreenListener","fullscreenListeners","default","safariEnter","safariExit","msListener","mountVideoView","unmountVideoView","controls","nativeControls","controlsList","undefined","crossOrigin","Object","assign","objectFit","contentFit","onPlay","onVolumeChange","newRef","isEqualNode","disablePictureInPicture","allowsPictureInPicture","playsInline","src","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\expo-video\\src\\VideoView.web.tsx"],"sourcesContent":["import React, { useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport VideoPlayer, { getSourceUri } from './VideoPlayer.web';\nimport type { VideoViewProps } from './VideoView.types';\n\ntype FullscreenChangeListeners = {\n  default: () => void;\n  safariEnter: () => void;\n  safariExit: () => void;\n  msListener: () => void;\n};\n\nfunction createAudioContext(): AudioContext | null {\n  return typeof window !== 'undefined' ? new window.AudioContext() : null;\n}\n\nfunction createZeroGainNode(audioContext: AudioContext | null): GainNode | null {\n  const zeroGainNode = audioContext?.createGain() ?? null;\n\n  if (audioContext && zeroGainNode) {\n    zeroGainNode.gain.value = 0;\n    zeroGainNode.connect(audioContext.destination);\n  }\n  return zeroGainNode;\n}\n\nfunction mapStyles(style: VideoViewProps['style']): React.CSSProperties {\n  const flattenedStyles = StyleSheet.flatten(style);\n  // Looking through react-native-web source code they also just pass styles directly without further conversions, so it's just a cast.\n  return flattenedStyles as React.CSSProperties;\n}\n\nexport function isPictureInPictureSupported(): boolean {\n  return typeof document === 'object' && typeof document.exitPictureInPicture === 'function';\n}\n\nexport const VideoView = forwardRef((props: { player?: VideoPlayer } & VideoViewProps, ref) => {\n  const videoRef = useRef<null | HTMLVideoElement>(null);\n  const mediaNodeRef = useRef<null | MediaElementAudioSourceNode>(null);\n  const hasToSetupAudioContext = useRef(false);\n  const fullscreenChangeListeners = useRef<null | FullscreenChangeListeners>(null);\n  const isWaitingForFirstFrame = useRef(false);\n\n  /**\n   * Audio context is used to mute all but one video when multiple video views are playing from one player simultaneously.\n   * Using audio context nodes allows muting videos without displaying the mute icon in the video player.\n   * We have to keep the context that called createMediaElementSource(videoRef), as the method can't be called\n   * for the second time with another context and there is no way to unbind the video and audio context afterward.\n   */\n  const audioContextRef = useRef<null | AudioContext>(null);\n  const zeroGainNodeRef = useRef<null | GainNode>(null);\n\n  useEffect(() => {\n    if (props.useAudioNodePlayback) {\n      maybeSetupAudioContext();\n      attachAudioNodes();\n    } else {\n      detachAudioNodes();\n    }\n  }, [props.useAudioNodePlayback]);\n\n  useImperativeHandle(ref, () => ({\n    enterFullscreen: async () => {\n      if (!props.allowsFullscreen || !videoRef.current) {\n        return;\n      }\n      // Cast the video to any to avoid ts errors. Methods such as webkitRequestFullscreen,\n      // webkitEnterFullScreen, msRequestFullscreen are not typed even though they exist.\n      const video = videoRef.current as any;\n\n      if (video.requestFullscreen) {\n        await video.requestFullscreen();\n      } else if (video.webkitRequestFullscreen) {\n        // @ts-ignore webkitRequestFullscreen can exist on Apple devices\n        await video.webkitRequestFullscreen();\n      } else if (video.webkitEnterFullScreen) {\n        await video.webkitEnterFullScreen();\n      } else if (video.msRequestFullscreen) {\n        await video.msRequestFullscreen();\n      }\n    },\n    exitFullscreen: async () => {\n      await document.exitFullscreen();\n    },\n    startPictureInPicture: async () => {\n      await videoRef.current?.requestPictureInPicture();\n    },\n    stopPictureInPicture: async () => {\n      try {\n        await document.exitPictureInPicture();\n      } catch (e) {\n        if (e instanceof DOMException && e.name === 'InvalidStateError') {\n          console.warn('The VideoView is not in Picture-in-Picture mode.');\n        } else {\n          throw e;\n        }\n      }\n    },\n    nativeRef: videoRef,\n  }));\n\n  useEffect(() => {\n    const onEnter = () => {\n      props.onPictureInPictureStart?.();\n    };\n    const onLeave = () => {\n      props.onPictureInPictureStop?.();\n    };\n    const onLoadStart = () => {\n      isWaitingForFirstFrame.current = true;\n    };\n    const onCanPlay = () => {\n      if (isWaitingForFirstFrame.current) {\n        props.onFirstFrameRender?.();\n      }\n      isWaitingForFirstFrame.current = false;\n    };\n    videoRef.current?.addEventListener('enterpictureinpicture', onEnter);\n    videoRef.current?.addEventListener('leavepictureinpicture', onLeave);\n    videoRef.current?.addEventListener('loadstart', onLoadStart);\n    videoRef.current?.addEventListener('loadeddata', onCanPlay);\n\n    return () => {\n      videoRef.current?.removeEventListener('enterpictureinpicture', onEnter);\n      videoRef.current?.removeEventListener('leavepictureinpicture', onLeave);\n      videoRef.current?.removeEventListener('loadstart', onLoadStart);\n      videoRef.current?.removeEventListener('loadeddata', onCanPlay);\n    };\n  }, [videoRef, props.onPictureInPictureStop, props.onPictureInPictureStart]);\n\n  // Adds the video view as a candidate for being the audio source for the player (when multiple views play from one\n  // player only one will emit audio).\n  function attachAudioNodes() {\n    if (!props.useAudioNodePlayback) {\n      return;\n    }\n    const audioContext = audioContextRef.current;\n    const zeroGainNode = zeroGainNodeRef.current;\n    const mediaNode = mediaNodeRef.current;\n\n    if (audioContext && zeroGainNode && mediaNode) {\n      props.player.mountAudioNode(audioContext, zeroGainNode, mediaNode);\n    } else {\n      console.warn(\n        \"Couldn't mount audio node, this might affect the audio playback when using multiple video views with the same player.\"\n      );\n    }\n  }\n\n  function detachAudioNodes() {\n    if (!props.useAudioNodePlayback) {\n      return;\n    }\n    const audioContext = audioContextRef.current;\n    const mediaNode = mediaNodeRef.current;\n    if (audioContext && mediaNode && videoRef.current) {\n      props.player.unmountAudioNode(videoRef.current, audioContext, mediaNode);\n    }\n  }\n\n  function maybeSetupAudioContext() {\n    if (\n      !hasToSetupAudioContext.current ||\n      !navigator.userActivation.hasBeenActive ||\n      !videoRef.current ||\n      !props.useAudioNodePlayback\n    ) {\n      return;\n    }\n    const audioContext = createAudioContext();\n\n    detachAudioNodes();\n    audioContextRef.current = audioContext;\n    zeroGainNodeRef.current = createZeroGainNode(audioContextRef.current);\n    mediaNodeRef.current = audioContext\n      ? audioContext.createMediaElementSource(videoRef.current)\n      : null;\n    attachAudioNodes();\n    hasToSetupAudioContext.current = false;\n  }\n\n  function fullscreenListener() {\n    if (document.fullscreenElement === videoRef.current) {\n      props.onFullscreenEnter?.();\n    } else {\n      props.onFullscreenExit?.();\n    }\n  }\n\n  function setupFullscreenListener() {\n    cleanupFullscreenListener();\n    const video = videoRef.current;\n    if (!video) return;\n    const fullscreenListeners: FullscreenChangeListeners = {\n      default: fullscreenListener,\n      safariEnter: () => props.onFullscreenEnter?.(),\n      safariExit: () => props.onFullscreenExit?.(),\n      msListener: fullscreenListener,\n    };\n\n    fullscreenChangeListeners.current = fullscreenListeners;\n\n    // Standard Fullscreen API\n    video.addEventListener('fullscreenchange', fullscreenListeners.default);\n\n    // Safari (webkit)\n    video.addEventListener('webkitbeginfullscreen', fullscreenListeners.safariEnter);\n    video.addEventListener('webkitendfullscreen', fullscreenListeners.safariExit);\n\n    // IE11 (ms)\n    document.addEventListener('MSFullscreenChange', fullscreenListeners.msListener);\n  }\n\n  function cleanupFullscreenListener() {\n    const video = videoRef.current;\n    if (!video || !fullscreenChangeListeners.current) return;\n\n    video.removeEventListener('fullscreenchange', fullscreenChangeListeners.current.default);\n    video.removeEventListener(\n      'webkitbeginfullscreen',\n      fullscreenChangeListeners.current?.safariEnter\n    );\n    video.removeEventListener('webkitendfullscreen', fullscreenChangeListeners.current.safariExit);\n    document.removeEventListener(\n      'MSFullscreenChange',\n      fullscreenChangeListeners.current.msListener\n    );\n  }\n\n  useEffect(() => {\n    if (videoRef.current) {\n      props.player?.mountVideoView(videoRef.current);\n    }\n    setupFullscreenListener();\n    attachAudioNodes();\n\n    return () => {\n      if (videoRef.current) {\n        props.player?.unmountVideoView(videoRef.current);\n      }\n      cleanupFullscreenListener();\n      detachAudioNodes();\n    };\n  }, [props.player]);\n\n  return (\n    <video\n      controls={props.nativeControls ?? true}\n      controlsList={props.allowsFullscreen ? undefined : 'nofullscreen'}\n      crossOrigin={props.crossOrigin}\n      style={{\n        ...mapStyles(props.style),\n        objectFit: props.contentFit,\n      }}\n      onPlay={() => {\n        maybeSetupAudioContext();\n      }}\n      // The player can autoplay when muted, unmuting by a user should create the audio context\n      onVolumeChange={() => {\n        maybeSetupAudioContext();\n      }}\n      ref={(newRef) => {\n        // This is called with a null value before `player.unmountVideoView` is called,\n        // we can't assign null to videoRef if we want to unmount it from the player.\n        if (newRef && !newRef.isEqualNode(videoRef.current)) {\n          videoRef.current = newRef;\n          hasToSetupAudioContext.current = props.useAudioNodePlayback ?? false;\n          maybeSetupAudioContext();\n        }\n      }}\n      disablePictureInPicture={!props.allowsPictureInPicture}\n      playsInline={props.playsInline}\n      src={getSourceUri(props.player?.src) ?? ''}\n    />\n  );\n});\n\nexport default VideoView;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}