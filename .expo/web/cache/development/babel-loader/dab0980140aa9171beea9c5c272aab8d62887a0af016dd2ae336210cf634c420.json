{"ast":null,"code":"\"use strict\";\n\nconst numberAsInset = value => ({\n  left: value,\n  right: value,\n  top: value,\n  bottom: value\n});\nconst addInsets = (a, b) => ({\n  left: (a.left ?? 0) + (b.left ?? 0),\n  right: (a.right ?? 0) + (b.right ?? 0),\n  top: (a.top ?? 0) + (b.top ?? 0),\n  bottom: (a.bottom ?? 0) + (b.bottom ?? 0)\n});\nconst touchDataToPressEvent = (data, timestamp, targetId) => ({\n  identifier: data.id,\n  locationX: data.x,\n  locationY: data.y,\n  pageX: data.absoluteX,\n  pageY: data.absoluteY,\n  target: targetId,\n  timestamp: timestamp,\n  touches: [],\n  changedTouches: []\n});\nconst gestureToPressEvent = (event, timestamp, targetId) => ({\n  identifier: event.handlerTag,\n  locationX: event.x,\n  locationY: event.y,\n  pageX: event.absoluteX,\n  pageY: event.absoluteY,\n  target: targetId,\n  timestamp: timestamp,\n  touches: [],\n  changedTouches: []\n});\nconst isTouchWithinInset = (dimensions, inset, touch) => (touch?.locationX ?? 0) < (inset.right ?? 0) + dimensions.width && (touch?.locationY ?? 0) < (inset.bottom ?? 0) + dimensions.height && (touch?.locationX ?? 0) > -(inset.left ?? 0) && (touch?.locationY ?? 0) > -(inset.top ?? 0);\nconst gestureToPressableEvent = event => {\n  const timestamp = Date.now();\n  const targetId = 0;\n  const pressEvent = gestureToPressEvent(event, timestamp, targetId);\n  return {\n    nativeEvent: {\n      touches: [pressEvent],\n      changedTouches: [pressEvent],\n      identifier: pressEvent.identifier,\n      locationX: event.x,\n      locationY: event.y,\n      pageX: event.absoluteX,\n      pageY: event.absoluteY,\n      target: targetId,\n      timestamp: timestamp,\n      force: undefined\n    }\n  };\n};\nconst gestureTouchToPressableEvent = event => {\n  const timestamp = Date.now();\n  const targetId = 0;\n  const touchesList = event.allTouches.map(touch => touchDataToPressEvent(touch, timestamp, targetId));\n  const changedTouchesList = event.changedTouches.map(touch => touchDataToPressEvent(touch, timestamp, targetId));\n  return {\n    nativeEvent: {\n      touches: touchesList,\n      changedTouches: changedTouchesList,\n      identifier: event.handlerTag,\n      locationX: event.allTouches.at(0)?.x ?? -1,\n      locationY: event.allTouches.at(0)?.y ?? -1,\n      pageX: event.allTouches.at(0)?.absoluteX ?? -1,\n      pageY: event.allTouches.at(0)?.absoluteY ?? -1,\n      target: targetId,\n      timestamp: timestamp,\n      force: undefined\n    }\n  };\n};\nexport { numberAsInset, addInsets, isTouchWithinInset, gestureToPressableEvent, gestureTouchToPressableEvent };","map":{"version":3,"names":["numberAsInset","value","left","right","top","bottom","addInsets","a","b","touchDataToPressEvent","data","timestamp","targetId","identifier","id","locationX","x","locationY","y","pageX","absoluteX","pageY","absoluteY","target","touches","changedTouches","gestureToPressEvent","event","handlerTag","isTouchWithinInset","dimensions","inset","touch","width","height","gestureToPressableEvent","Date","now","pressEvent","nativeEvent","force","undefined","gestureTouchToPressableEvent","touchesList","allTouches","map","changedTouchesList","at"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\components\\Pressable\\utils.ts"],"sourcesContent":["import { Insets } from 'react-native';\nimport {\n  HoverGestureHandlerEventPayload,\n  LongPressGestureHandlerEventPayload,\n} from '../../handlers/GestureHandlerEventPayload';\nimport {\n  TouchData,\n  GestureStateChangeEvent,\n  GestureTouchEvent,\n} from '../../handlers/gestureHandlerCommon';\nimport {\n  PressableDimensions,\n  InnerPressableEvent,\n  PressableEvent,\n} from './PressableProps';\n\nconst numberAsInset = (value: number): Insets => ({\n  left: value,\n  right: value,\n  top: value,\n  bottom: value,\n});\n\nconst addInsets = (a: Insets, b: Insets): Insets => ({\n  left: (a.left ?? 0) + (b.left ?? 0),\n  right: (a.right ?? 0) + (b.right ?? 0),\n  top: (a.top ?? 0) + (b.top ?? 0),\n  bottom: (a.bottom ?? 0) + (b.bottom ?? 0),\n});\n\nconst touchDataToPressEvent = (\n  data: TouchData,\n  timestamp: number,\n  targetId: number\n): InnerPressableEvent => ({\n  identifier: data.id,\n  locationX: data.x,\n  locationY: data.y,\n  pageX: data.absoluteX,\n  pageY: data.absoluteY,\n  target: targetId,\n  timestamp: timestamp,\n  touches: [], // Always empty - legacy compatibility\n  changedTouches: [], // Always empty - legacy compatibility\n});\n\nconst gestureToPressEvent = (\n  event: GestureStateChangeEvent<\n    HoverGestureHandlerEventPayload | LongPressGestureHandlerEventPayload\n  >,\n  timestamp: number,\n  targetId: number\n): InnerPressableEvent => ({\n  identifier: event.handlerTag,\n  locationX: event.x,\n  locationY: event.y,\n  pageX: event.absoluteX,\n  pageY: event.absoluteY,\n  target: targetId,\n  timestamp: timestamp,\n  touches: [], // Always empty - legacy compatibility\n  changedTouches: [], // Always empty - legacy compatibility\n});\n\nconst isTouchWithinInset = (\n  dimensions: PressableDimensions,\n  inset: Insets,\n  touch?: InnerPressableEvent\n) =>\n  (touch?.locationX ?? 0) < (inset.right ?? 0) + dimensions.width &&\n  (touch?.locationY ?? 0) < (inset.bottom ?? 0) + dimensions.height &&\n  (touch?.locationX ?? 0) > -(inset.left ?? 0) &&\n  (touch?.locationY ?? 0) > -(inset.top ?? 0);\n\nconst gestureToPressableEvent = (\n  event: GestureStateChangeEvent<\n    HoverGestureHandlerEventPayload | LongPressGestureHandlerEventPayload\n  >\n): PressableEvent => {\n  const timestamp = Date.now();\n\n  // As far as I can see, there isn't a conventional way of getting targetId with the data we get\n  const targetId = 0;\n\n  const pressEvent = gestureToPressEvent(event, timestamp, targetId);\n\n  return {\n    nativeEvent: {\n      touches: [pressEvent],\n      changedTouches: [pressEvent],\n      identifier: pressEvent.identifier,\n      locationX: event.x,\n      locationY: event.y,\n      pageX: event.absoluteX,\n      pageY: event.absoluteY,\n      target: targetId,\n      timestamp: timestamp,\n      force: undefined,\n    },\n  };\n};\n\nconst gestureTouchToPressableEvent = (\n  event: GestureTouchEvent\n): PressableEvent => {\n  const timestamp = Date.now();\n\n  // As far as I can see, there isn't a conventional way of getting targetId with the data we get\n  const targetId = 0;\n\n  const touchesList = event.allTouches.map((touch: TouchData) =>\n    touchDataToPressEvent(touch, timestamp, targetId)\n  );\n  const changedTouchesList = event.changedTouches.map((touch: TouchData) =>\n    touchDataToPressEvent(touch, timestamp, targetId)\n  );\n\n  return {\n    nativeEvent: {\n      touches: touchesList,\n      changedTouches: changedTouchesList,\n      identifier: event.handlerTag,\n      locationX: event.allTouches.at(0)?.x ?? -1,\n      locationY: event.allTouches.at(0)?.y ?? -1,\n      pageX: event.allTouches.at(0)?.absoluteX ?? -1,\n      pageY: event.allTouches.at(0)?.absoluteY ?? -1,\n      target: targetId,\n      timestamp: timestamp,\n      force: undefined,\n    },\n  };\n};\n\nexport {\n  numberAsInset,\n  addInsets,\n  isTouchWithinInset,\n  gestureToPressableEvent,\n  gestureTouchToPressableEvent,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}