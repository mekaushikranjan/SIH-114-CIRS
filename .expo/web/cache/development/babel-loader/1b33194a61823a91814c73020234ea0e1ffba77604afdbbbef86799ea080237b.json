{"ast":null,"code":"'use strict';\n\nimport { getNormalizedCSSTransitionConfigUpdates, normalizeCSSTransitionProperties } from \"../normalization/index.js\";\nimport { registerCSSTransition, unregisterCSSTransition, updateCSSTransition } from \"../proxy.js\";\nexport default class CSSTransitionsManager {\n  transitionConfig = null;\n  constructor(shadowNodeWrapper, viewTag) {\n    this.viewTag = viewTag;\n    this.shadowNodeWrapper = shadowNodeWrapper;\n  }\n  update(transitionProperties) {\n    if (!transitionProperties) {\n      this.detach();\n      return;\n    }\n    const transitionConfig = normalizeCSSTransitionProperties(transitionProperties);\n    if (!transitionConfig) {\n      this.detach();\n      return;\n    }\n    if (this.transitionConfig) {\n      const configUpdates = getNormalizedCSSTransitionConfigUpdates(this.transitionConfig, transitionConfig);\n      if (Object.keys(configUpdates).length > 0) {\n        this.transitionConfig = transitionConfig;\n        updateCSSTransition(this.viewTag, configUpdates);\n      }\n    } else {\n      this.attachTransition(transitionConfig);\n    }\n  }\n  unmountCleanup() {}\n  detach() {\n    if (this.transitionConfig) {\n      unregisterCSSTransition(this.viewTag);\n      this.transitionConfig = null;\n    }\n  }\n  attachTransition(transitionConfig) {\n    if (!this.transitionConfig) {\n      registerCSSTransition(this.shadowNodeWrapper, transitionConfig);\n      this.transitionConfig = transitionConfig;\n    }\n  }\n}","map":{"version":3,"names":["getNormalizedCSSTransitionConfigUpdates","normalizeCSSTransitionProperties","registerCSSTransition","unregisterCSSTransition","updateCSSTransition","CSSTransitionsManager","transitionConfig","constructor","shadowNodeWrapper","viewTag","update","transitionProperties","detach","configUpdates","Object","keys","length","attachTransition","unmountCleanup"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\css\\native\\managers\\CSSTransitionsManager.ts"],"sourcesContent":["'use strict';\nimport type { ShadowNodeWrapper } from '../../../commonTypes';\nimport type {\n  CSSTransitionProperties,\n  ICSSTransitionsManager,\n} from '../../types';\nimport {\n  getNormalizedCSSTransitionConfigUpdates,\n  normalizeCSSTransitionProperties,\n} from '../normalization';\nimport {\n  registerCSSTransition,\n  unregisterCSSTransition,\n  updateCSSTransition,\n} from '../proxy';\nimport type { NormalizedCSSTransitionConfig } from '../types';\n\nexport default class CSSTransitionsManager implements ICSSTransitionsManager {\n  private readonly viewTag: number;\n  private readonly shadowNodeWrapper: ShadowNodeWrapper;\n\n  private transitionConfig: NormalizedCSSTransitionConfig | null = null;\n\n  constructor(shadowNodeWrapper: ShadowNodeWrapper, viewTag: number) {\n    this.viewTag = viewTag;\n    this.shadowNodeWrapper = shadowNodeWrapper;\n  }\n\n  update(transitionProperties: CSSTransitionProperties | null): void {\n    if (!transitionProperties) {\n      this.detach();\n      return;\n    }\n\n    const transitionConfig =\n      normalizeCSSTransitionProperties(transitionProperties);\n    if (!transitionConfig) {\n      this.detach();\n      return;\n    }\n\n    if (this.transitionConfig) {\n      const configUpdates = getNormalizedCSSTransitionConfigUpdates(\n        this.transitionConfig,\n        transitionConfig\n      );\n\n      if (Object.keys(configUpdates).length > 0) {\n        this.transitionConfig = transitionConfig;\n        updateCSSTransition(this.viewTag, configUpdates);\n      }\n    } else {\n      this.attachTransition(transitionConfig);\n    }\n  }\n\n  unmountCleanup(): void {\n    // noop\n  }\n\n  private detach() {\n    if (this.transitionConfig) {\n      unregisterCSSTransition(this.viewTag);\n      this.transitionConfig = null;\n    }\n  }\n\n  private attachTransition(transitionConfig: NormalizedCSSTransitionConfig) {\n    if (!this.transitionConfig) {\n      registerCSSTransition(this.shadowNodeWrapper, transitionConfig);\n      this.transitionConfig = transitionConfig;\n    }\n  }\n}\n"],"mappings":"AAAA,YAAY;;AAMZ,SACEA,uCAAuC,EACvCC,gCAAgC,QAC3B,2BAAkB;AACzB,SACEC,qBAAqB,EACrBC,uBAAuB,EACvBC,mBAAmB,QACd,aAAU;AAGjB,eAAe,MAAMC,qBAAqB,CAAmC;EAInEC,gBAAgB,GAAyC,IAAI;EAErEC,WAAWA,CAACC,iBAAoC,EAAEC,OAAe,EAAE;IACjE,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACD,iBAAiB,GAAGA,iBAAiB;EAC5C;EAEAE,MAAMA,CAACC,oBAAoD,EAAQ;IACjE,IAAI,CAACA,oBAAoB,EAAE;MACzB,IAAI,CAACC,MAAM,CAAC,CAAC;MACb;IACF;IAEA,MAAMN,gBAAgB,GACpBL,gCAAgC,CAACU,oBAAoB,CAAC;IACxD,IAAI,CAACL,gBAAgB,EAAE;MACrB,IAAI,CAACM,MAAM,CAAC,CAAC;MACb;IACF;IAEA,IAAI,IAAI,CAACN,gBAAgB,EAAE;MACzB,MAAMO,aAAa,GAAGb,uCAAuC,CAC3D,IAAI,CAACM,gBAAgB,EACrBA,gBACF,CAAC;MAED,IAAIQ,MAAM,CAACC,IAAI,CAACF,aAAa,CAAC,CAACG,MAAM,GAAG,CAAC,EAAE;QACzC,IAAI,CAACV,gBAAgB,GAAGA,gBAAgB;QACxCF,mBAAmB,CAAC,IAAI,CAACK,OAAO,EAAEI,aAAa,CAAC;MAClD;IACF,CAAC,MAAM;MACL,IAAI,CAACI,gBAAgB,CAACX,gBAAgB,CAAC;IACzC;EACF;EAEAY,cAAcA,CAAA,EAAS,CACrB;EAGMN,MAAMA,CAAA,EAAG;IACf,IAAI,IAAI,CAACN,gBAAgB,EAAE;MACzBH,uBAAuB,CAAC,IAAI,CAACM,OAAO,CAAC;MACrC,IAAI,CAACH,gBAAgB,GAAG,IAAI;IAC9B;EACF;EAEQW,gBAAgBA,CAACX,gBAA+C,EAAE;IACxE,IAAI,CAAC,IAAI,CAACA,gBAAgB,EAAE;MAC1BJ,qBAAqB,CAAC,IAAI,CAACM,iBAAiB,EAAEF,gBAAgB,CAAC;MAC/D,IAAI,CAACA,gBAAgB,GAAGA,gBAAgB;IAC1C;EACF;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}