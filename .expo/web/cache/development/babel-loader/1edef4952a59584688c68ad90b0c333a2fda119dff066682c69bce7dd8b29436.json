{"ast":null,"code":"\"use strict\";\n\nimport { ContinousBaseGesture } from './gesture';\nconst _worklet_16688592687092_init_data = {\n  code: \"function changeEventCalculator_forceTouchGestureJs1(current,previous){let changePayload;if(previous===undefined){changePayload={forceChange:current.force};}else{changePayload={forceChange:current.force-previous.force};}return{...current,...changePayload};}\",\n  location: \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Desktop\\\\civic-reporter-sih\\\\frontend\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\forceTouchGesture.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"changeEventCalculator_forceTouchGestureJs1\\\",\\\"current\\\",\\\"previous\\\",\\\"changePayload\\\",\\\"undefined\\\",\\\"forceChange\\\",\\\"force\\\"],\\\"sources\\\":[\\\"C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/forceTouchGesture.js\\\"],\\\"mappings\\\":\\\"AAIA,SAAAA,2CAAAC,OAAA,CAAAC,QAAA,MAAAC,aAAA,CACA,GAAAD,QAAA,GAAAE,SAAA,EACAD,aAAA,E,yBAEA,EAGE,KAAI,CACJA,aAAY,CAAK,CACfE,WAAa,CAAAJ,OAAG,CAAAK,KAAA,CAAAJ,QAAA,CAAAI,K,GAGlB,MAAO,CACL,GAAAL,OAAA,C,GACEE,a\\\",\\\"ignoreList\\\":[]}\"\n};\nconst changeEventCalculator = function changeEventCalculator_forceTouchGestureJs1Factory({\n  _worklet_16688592687092_init_data\n}) {\n  const _e = [new global.Error(), 1, -27];\n  const changeEventCalculator = function (current, previous) {\n    let changePayload;\n    if (previous === undefined) {\n      changePayload = {\n        forceChange: current.force\n      };\n    } else {\n      changePayload = {\n        forceChange: current.force - previous.force\n      };\n    }\n    return Object.assign({}, current, changePayload);\n  };\n  changeEventCalculator.__closure = {};\n  changeEventCalculator.__workletHash = 16688592687092;\n  changeEventCalculator.__pluginVersion = \"0.5.1\";\n  changeEventCalculator.__initData = _worklet_16688592687092_init_data;\n  changeEventCalculator.__stackDetails = _e;\n  return changeEventCalculator;\n}({\n  _worklet_16688592687092_init_data\n});\nexport class ForceTouchGesture extends ContinousBaseGesture {\n  config = {};\n  constructor() {\n    super();\n    this.handlerName = 'ForceTouchGestureHandler';\n  }\n  minForce(force) {\n    this.config.minForce = force;\n    return this;\n  }\n  maxForce(force) {\n    this.config.maxForce = force;\n    return this;\n  }\n  feedbackOnActivation(value) {\n    this.config.feedbackOnActivation = value;\n    return this;\n  }\n  onChange(callback) {\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}","map":{"version":3,"names":["ContinousBaseGesture","_worklet_16688592687092_init_data","code","location","sourceMap","changeEventCalculator","changeEventCalculator_forceTouchGestureJs1Factory","_e","global","Error","current","previous","changePayload","undefined","forceChange","force","Object","assign","__closure","__workletHash","__pluginVersion","__initData","__stackDetails","ForceTouchGesture","config","constructor","handlerName","minForce","maxForce","feedbackOnActivation","value","onChange","callback","handlers"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\forceTouchGesture.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport { ForceTouchGestureConfig } from '../ForceTouchGestureHandler';\nimport type { ForceTouchGestureHandlerEventPayload } from '../GestureHandlerEventPayload';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\n/**\n * @deprecated ForceTouch gesture is deprecated and will be removed in the future.\n */\nexport type ForceTouchGestureChangeEventPayload = {\n  forceChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<ForceTouchGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: ForceTouchGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      forceChange: current.force,\n    };\n  } else {\n    changePayload = {\n      forceChange: current.force - previous.force,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\n/**\n * @deprecated ForceTouch gesture is deprecated and will be removed in the future.\n */\nexport class ForceTouchGesture extends ContinousBaseGesture<\n  ForceTouchGestureHandlerEventPayload,\n  ForceTouchGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & ForceTouchGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'ForceTouchGestureHandler';\n  }\n\n  /**\n   * A minimal pressure that is required before gesture can activate.\n   * Should be a value from range [0.0, 1.0]. Default is 0.2.\n   * @param force\n   */\n  minForce(force: number) {\n    this.config.minForce = force;\n    return this;\n  }\n\n  /**\n   * A maximal pressure that could be applied for gesture.\n   * If the pressure is greater, gesture fails. Should be a value from range [0.0, 1.0].\n   * @param force\n   */\n  maxForce(force: number) {\n    this.config.maxForce = force;\n    return this;\n  }\n\n  /**\n   * Value defining if haptic feedback has to be performed on activation.\n   * @param value\n   */\n  feedbackOnActivation(value: boolean) {\n    this.config.feedbackOnActivation = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        GestureUpdateEvent<\n          ForceTouchGestureHandlerEventPayload &\n            ForceTouchGestureChangeEventPayload\n        >\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\n/**\n * @deprecated ForceTouch gesture is deprecated and will be removed in the future.\n */\nexport type ForceTouchGestureType = InstanceType<typeof ForceTouchGesture>;\n"],"mappings":";;AAAA,SAA4BA,oBAAoB,QAAQ,WAAW;AAAA,MAAAC,iCAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;AAAA;AAAA,MAAAC,qBAAA,GAYnE,SAAAC,kDAAA;EAAAL;AAAA;EAAA,MAAAM,EAAA,QAAAC,MAAA,CAAAC,KAAA;EAAA,MAAAJ,qBAAA,YAAAA,CACEK,OAAiE,EACjEC,QAAmE,EACnE;IAEA,IAAIC,aAAkD;IACtD,IAAID,QAAQ,KAAKE,SAAS,EAAE;MAC1BD,aAAa,GAAG;QACdE,WAAW,EAAEJ,OAAO,CAACK;MACvB,CAAC;IACH,CAAC,MAAM;MACLH,aAAa,GAAG;QACdE,WAAW,EAAEJ,OAAO,CAACK,KAAK,GAAGJ,QAAQ,CAACI;MACxC,CAAC;IACH;IAEA,OAAAC,MAAA,CAAAC,MAAA,KAAYP,OAAO,EAAKE,aAAA;EAC1B;EAAAP,qBAAA,CAAAa,SAAA;EAAAb,qBAAA,CAAAc,aAAA;EAAAd,qBAAA,CAAAe,eAAA;EAAAf,qBAAA,CAAAgB,UAAA,GAAApB,iCAAA;EAAAI,qBAAA,CAAAiB,cAAA,GAAAf,EAAA;EAAA,OAAAF,qBAAA;AAAA,CAjBA;EAAAJ;AAAA;AAsBA,OAAO,MAAMsB,iBAAiB,SAASvB,oBAAoB,CAGzD;EACOwB,MAAM,GAAgD,CAAC,CAAC;EAE/DC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAEP,IAAI,CAACC,WAAW,GAAG,0BAA0B;EAC/C;EAOAC,QAAQA,CAACZ,KAAa,EAAE;IACtB,IAAI,CAACS,MAAM,CAACG,QAAQ,GAAGZ,KAAK;IAC5B,OAAO,IAAI;EACb;EAOAa,QAAQA,CAACb,KAAa,EAAE;IACtB,IAAI,CAACS,MAAM,CAACI,QAAQ,GAAGb,KAAK;IAC5B,OAAO,IAAI;EACb;EAMAc,oBAAoBA,CAACC,KAAc,EAAE;IACnC,IAAI,CAACN,MAAM,CAACK,oBAAoB,GAAGC,KAAK;IACxC,OAAO,IAAI;EACb;EAEAC,QAAQA,CACNC,QAOS,EACT;IAEA,IAAI,CAACC,QAAQ,CAAC5B,qBAAqB,GAAGA,qBAAqB;IAC3D,OAAO,KAAK,CAAC0B,QAAQ,CAACC,QAAQ,CAAC;EACjC;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}