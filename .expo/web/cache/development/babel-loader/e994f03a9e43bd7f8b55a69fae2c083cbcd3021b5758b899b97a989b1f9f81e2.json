{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"enabled\"];\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { State } from '../../State';\nimport { DEFAULT_TOUCH_SLOP } from '../constants';\nimport GestureHandler from './GestureHandler';\nexport default class NativeViewGestureHandler extends GestureHandler {\n  shouldActivateOnStart = false;\n  disallowInterruption = false;\n  startX = 0;\n  startY = 0;\n  minDistSq = DEFAULT_TOUCH_SLOP * DEFAULT_TOUCH_SLOP;\n  init(ref, propsRef) {\n    super.init(ref, propsRef);\n    this.shouldCancelWhenOutside = true;\n    if (Platform.OS !== 'web') {\n      return;\n    }\n    const view = this.delegate.view;\n    this.restoreViewStyles(view);\n    this.buttonRole = view.getAttribute('role') === 'button';\n  }\n  updateGestureConfig(_ref) {\n    let {\n        enabled = true\n      } = _ref,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n    super.updateGestureConfig(Object.assign({\n      enabled: enabled\n    }, props));\n    if (this.config.shouldActivateOnStart !== undefined) {\n      this.shouldActivateOnStart = this.config.shouldActivateOnStart;\n    }\n    if (this.config.disallowInterruption !== undefined) {\n      this.disallowInterruption = this.config.disallowInterruption;\n    }\n    const view = this.delegate.view;\n    this.restoreViewStyles(view);\n  }\n  restoreViewStyles(view) {\n    if (!view) {\n      return;\n    }\n    view.style['touchAction'] = 'auto';\n    view.style['WebkitTouchCallout'] = 'auto';\n  }\n  onPointerDown(event) {\n    this.tracker.addToTracker(event);\n    super.onPointerDown(event);\n    this.newPointerAction();\n    this.tryToSendTouchEvent(event);\n  }\n  onPointerAdd(event) {\n    this.tracker.addToTracker(event);\n    super.onPointerAdd(event);\n    this.newPointerAction();\n  }\n  newPointerAction() {\n    const lastCoords = this.tracker.getAbsoluteCoordsAverage();\n    this.startX = lastCoords.x;\n    this.startY = lastCoords.y;\n    if (this.state !== State.UNDETERMINED) {\n      return;\n    }\n    this.begin();\n    const view = this.delegate.view;\n    const isRNGHText = view.hasAttribute('rnghtext');\n    if (this.buttonRole || isRNGHText) {\n      this.activate();\n    }\n  }\n  onPointerMove(event) {\n    this.tracker.track(event);\n    const lastCoords = this.tracker.getAbsoluteCoordsAverage();\n    const dx = this.startX - lastCoords.x;\n    const dy = this.startY - lastCoords.y;\n    const distSq = dx * dx + dy * dy;\n    if (distSq >= this.minDistSq) {\n      if (this.buttonRole && this.state === State.ACTIVE) {\n        this.cancel();\n      } else if (!this.buttonRole && this.state === State.BEGAN) {\n        this.activate();\n      }\n    }\n  }\n  onPointerLeave() {\n    if (this.state === State.BEGAN || this.state === State.ACTIVE) {\n      this.cancel();\n    }\n  }\n  onPointerUp(event) {\n    super.onPointerUp(event);\n    this.onUp(event);\n  }\n  onPointerRemove(event) {\n    super.onPointerRemove(event);\n    this.onUp(event);\n  }\n  onUp(event) {\n    this.tracker.removeFromTracker(event.pointerId);\n    if (this.tracker.trackedPointersCount === 0) {\n      if (this.state === State.ACTIVE) {\n        this.end();\n      } else {\n        this.fail();\n      }\n    }\n  }\n  shouldRecognizeSimultaneously(handler) {\n    if (super.shouldRecognizeSimultaneously(handler)) {\n      return true;\n    }\n    if (handler instanceof NativeViewGestureHandler && handler.state === State.ACTIVE && handler.disallowsInterruption()) {\n      return false;\n    }\n    const canBeInterrupted = !this.disallowInterruption;\n    if (this.state === State.ACTIVE && handler.state === State.ACTIVE && canBeInterrupted) {\n      return false;\n    }\n    return this.state === State.ACTIVE && canBeInterrupted && handler.handlerTag > 0;\n  }\n  shouldBeCancelledByOther(_handler) {\n    return !this.disallowInterruption;\n  }\n  disallowsInterruption() {\n    return this.disallowInterruption;\n  }\n  isButton() {\n    return this.buttonRole;\n  }\n}","map":{"version":3,"names":["State","DEFAULT_TOUCH_SLOP","GestureHandler","NativeViewGestureHandler","shouldActivateOnStart","disallowInterruption","startX","startY","minDistSq","init","ref","propsRef","shouldCancelWhenOutside","Platform","OS","view","delegate","restoreViewStyles","buttonRole","getAttribute","updateGestureConfig","_ref","enabled","props","_objectWithoutPropertiesLoose","_excluded","Object","assign","config","undefined","style","onPointerDown","event","tracker","addToTracker","newPointerAction","tryToSendTouchEvent","onPointerAdd","lastCoords","getAbsoluteCoordsAverage","x","y","state","UNDETERMINED","begin","isRNGHText","hasAttribute","activate","onPointerMove","track","dx","dy","distSq","ACTIVE","cancel","BEGAN","onPointerLeave","onPointerUp","onUp","onPointerRemove","removeFromTracker","pointerId","trackedPointersCount","end","fail","shouldRecognizeSimultaneously","handler","disallowsInterruption","canBeInterrupted","handlerTag","shouldBeCancelledByOther","_handler","isButton"],"sources":["C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/node_modules/react-native-gesture-handler/lib/module/web/handlers/NativeViewGestureHandler.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport { State } from '../../State';\nimport { DEFAULT_TOUCH_SLOP } from '../constants';\nimport { AdaptedEvent, Config } from '../interfaces';\n\nimport GestureHandler from './GestureHandler';\nexport default class NativeViewGestureHandler extends GestureHandler {\n  private buttonRole!: boolean;\n\n  // TODO: Implement logic for activation on start\n  // @ts-ignore Logic yet to be implemented\n  private shouldActivateOnStart = false;\n  private disallowInterruption = false;\n\n  private startX = 0;\n  private startY = 0;\n  private minDistSq = DEFAULT_TOUCH_SLOP * DEFAULT_TOUCH_SLOP;\n\n  public init(ref: number, propsRef: React.RefObject<unknown>): void {\n    super.init(ref, propsRef);\n\n    this.shouldCancelWhenOutside = true;\n\n    if (Platform.OS !== 'web') {\n      return;\n    }\n\n    const view = this.delegate.view as HTMLElement;\n\n    this.restoreViewStyles(view);\n    this.buttonRole = view.getAttribute('role') === 'button';\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n\n    if (this.config.shouldActivateOnStart !== undefined) {\n      this.shouldActivateOnStart = this.config.shouldActivateOnStart;\n    }\n    if (this.config.disallowInterruption !== undefined) {\n      this.disallowInterruption = this.config.disallowInterruption;\n    }\n\n    const view = this.delegate.view as HTMLElement;\n    this.restoreViewStyles(view);\n  }\n\n  private restoreViewStyles(view: HTMLElement) {\n    if (!view) {\n      return;\n    }\n\n    view.style['touchAction'] = 'auto';\n    // @ts-ignore Turns on defualt touch behavior on Safari\n    view.style['WebkitTouchCallout'] = 'auto';\n  }\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerDown(event);\n    this.newPointerAction();\n\n    this.tryToSendTouchEvent(event);\n  }\n\n  protected onPointerAdd(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerAdd(event);\n    this.newPointerAction();\n  }\n\n  private newPointerAction(): void {\n    const lastCoords = this.tracker.getAbsoluteCoordsAverage();\n    this.startX = lastCoords.x;\n    this.startY = lastCoords.y;\n\n    if (this.state !== State.UNDETERMINED) {\n      return;\n    }\n\n    this.begin();\n\n    const view = this.delegate.view as HTMLElement;\n    const isRNGHText = view.hasAttribute('rnghtext');\n\n    if (this.buttonRole || isRNGHText) {\n      this.activate();\n    }\n  }\n\n  protected onPointerMove(event: AdaptedEvent): void {\n    this.tracker.track(event);\n\n    const lastCoords = this.tracker.getAbsoluteCoordsAverage();\n    const dx = this.startX - lastCoords.x;\n    const dy = this.startY - lastCoords.y;\n    const distSq = dx * dx + dy * dy;\n\n    if (distSq >= this.minDistSq) {\n      if (this.buttonRole && this.state === State.ACTIVE) {\n        this.cancel();\n      } else if (!this.buttonRole && this.state === State.BEGAN) {\n        this.activate();\n      }\n    }\n  }\n\n  protected onPointerLeave(): void {\n    if (this.state === State.BEGAN || this.state === State.ACTIVE) {\n      this.cancel();\n    }\n  }\n\n  protected onPointerUp(event: AdaptedEvent): void {\n    super.onPointerUp(event);\n    this.onUp(event);\n  }\n\n  protected onPointerRemove(event: AdaptedEvent): void {\n    super.onPointerRemove(event);\n    this.onUp(event);\n  }\n\n  private onUp(event: AdaptedEvent): void {\n    this.tracker.removeFromTracker(event.pointerId);\n\n    if (this.tracker.trackedPointersCount === 0) {\n      if (this.state === State.ACTIVE) {\n        this.end();\n      } else {\n        this.fail();\n      }\n    }\n  }\n\n  public shouldRecognizeSimultaneously(handler: GestureHandler): boolean {\n    if (super.shouldRecognizeSimultaneously(handler)) {\n      return true;\n    }\n\n    if (\n      handler instanceof NativeViewGestureHandler &&\n      handler.state === State.ACTIVE &&\n      handler.disallowsInterruption()\n    ) {\n      return false;\n    }\n\n    const canBeInterrupted = !this.disallowInterruption;\n\n    if (\n      this.state === State.ACTIVE &&\n      handler.state === State.ACTIVE &&\n      canBeInterrupted\n    ) {\n      return false;\n    }\n\n    return (\n      this.state === State.ACTIVE && canBeInterrupted && handler.handlerTag > 0\n    );\n  }\n\n  public shouldBeCancelledByOther(_handler: GestureHandler): boolean {\n    return !this.disallowInterruption;\n  }\n\n  public disallowsInterruption(): boolean {\n    return this.disallowInterruption;\n  }\n\n  public isButton(): boolean {\n    return this.buttonRole;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}