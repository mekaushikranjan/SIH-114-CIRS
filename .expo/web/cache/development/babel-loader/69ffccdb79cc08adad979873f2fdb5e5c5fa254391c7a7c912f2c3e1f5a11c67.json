{"ast":null,"code":"'use strict';\n\nimport { useRef, useState } from 'react';\nimport { createSerializable, serializableMappingCache } from 'react-native-worklets';\nimport { SHOULD_BE_USE_WEB } from \"../common/constants.js\";\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport { makeMutable } from \"../mutables.js\";\nimport { findNodeHandle } from '../platformFunctions/findNodeHandle';\nfunction getComponentOrScrollable(ref) {\n  return ref.getNativeScrollRef?.() ?? ref.getScrollableNode?.() ?? ref;\n}\nfunction useAnimatedRefBase(getWrapper) {\n  const observers = useRef(new Map()).current;\n  const wrapperRef = useRef(null);\n  const resultRef = useRef(null);\n  if (!resultRef.current) {\n    const fun = ref => {\n      if (ref) {\n        wrapperRef.current = getWrapper(ref);\n        fun.getTag = () => findNodeHandle(getComponentOrScrollable(ref));\n        fun.current = ref;\n        if (observers.size) {\n          const currentTag = fun?.getTag?.() ?? null;\n          observers.forEach((cleanup, observer) => {\n            cleanup?.();\n            observers.set(observer, observer(currentTag));\n          });\n        }\n      }\n      return wrapperRef.current;\n    };\n    fun.observe = observer => {\n      const cleanup = observer(fun?.getTag?.() ?? null);\n      observers.set(observer, cleanup);\n      return () => {\n        observers.get(observer)?.();\n        observers.delete(observer);\n      };\n    };\n    fun.current = null;\n    resultRef.current = fun;\n  }\n  return resultRef.current;\n}\nconst _worklet_15975255867835_init_data = {\n  code: \"function useAnimatedRefJs1(){const{sharedWrapper}=this.__closure;return function(){return sharedWrapper.value;};}\",\n  location: \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Desktop\\\\civic-reporter-sih\\\\frontend\\\\node_modules\\\\react-native-reanimated\\\\lib\\\\module\\\\hook\\\\useAnimatedRef.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"useAnimatedRefJs1\\\",\\\"sharedWrapper\\\",\\\"__closure\\\",\\\"value\\\"],\\\"sources\\\":[\\\"C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/node_modules/react-native-reanimated/lib/module/hook/useAnimatedRef.js\\\"],\\\"mappings\\\":\\\"AA4Dc,SAAAA,iBAAMA,CAAA,QAAAC,aAAA,OAAAC,SAAA,CAGZ,MAAO,kBAAM,CAAAD,aAAa,CAACE,KAAK,GAClC\\\",\\\"ignoreList\\\":[]}\"\n};\nfunction useAnimatedRefNative() {\n  const [sharedWrapper] = useState(() => makeMutable(null));\n  const resultRef = useAnimatedRefBase(ref => {\n    const currentWrapper = getShadowNodeWrapperFromRef(getComponentOrScrollable(ref));\n    sharedWrapper.value = currentWrapper;\n    return currentWrapper;\n  });\n  if (!serializableMappingCache.get(resultRef)) {\n    const animatedRefSerializableHandle = createSerializable({\n      __init: function useAnimatedRefJs1Factory({\n        _worklet_15975255867835_init_data,\n        sharedWrapper\n      }) {\n        const _e = [new global.Error(), -2, -27];\n        const useAnimatedRefJs1 = function () {\n          return () => sharedWrapper.value;\n        };\n        useAnimatedRefJs1.__closure = {\n          sharedWrapper\n        };\n        useAnimatedRefJs1.__workletHash = 15975255867835;\n        useAnimatedRefJs1.__pluginVersion = \"0.5.1\";\n        useAnimatedRefJs1.__initData = _worklet_15975255867835_init_data;\n        useAnimatedRefJs1.__stackDetails = _e;\n        return useAnimatedRefJs1;\n      }({\n        _worklet_15975255867835_init_data,\n        sharedWrapper\n      })\n    });\n    serializableMappingCache.set(resultRef, animatedRefSerializableHandle);\n  }\n  return resultRef;\n}\nfunction useAnimatedRefWeb() {\n  return useAnimatedRefBase(ref => getComponentOrScrollable(ref));\n}\nexport const useAnimatedRef = SHOULD_BE_USE_WEB ? useAnimatedRefWeb : useAnimatedRefNative;","map":{"version":3,"names":["useRef","useState","createSerializable","serializableMappingCache","SHOULD_BE_USE_WEB","getShadowNodeWrapperFromRef","makeMutable","findNodeHandle","getComponentOrScrollable","ref","getNativeScrollRef","getScrollableNode","useAnimatedRefBase","getWrapper","observers","Map","current","wrapperRef","resultRef","fun","getTag","size","currentTag","forEach","cleanup","observer","set","observe","get","delete","_worklet_15975255867835_init_data","code","location","sourceMap","useAnimatedRefNative","sharedWrapper","currentWrapper","value","animatedRefSerializableHandle","__init","useAnimatedRefJs1Factory","_e","global","Error","useAnimatedRefJs1","__closure","__workletHash","__pluginVersion","__initData","__stackDetails","useAnimatedRefWeb","useAnimatedRef"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\hook\\useAnimatedRef.ts"],"sourcesContent":["'use strict';\nimport { useRef, useState } from 'react';\nimport {\n  createSerializable,\n  serializableMappingCache,\n} from 'react-native-worklets';\n\nimport { SHOULD_BE_USE_WEB } from '../common/constants';\nimport type { ShadowNodeWrapper, WrapperRef } from '../commonTypes';\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport { makeMutable } from '../mutables';\nimport { findNodeHandle } from '../platformFunctions/findNodeHandle';\nimport type {\n  AnimatedRef,\n  AnimatedRefObserver,\n  AnimatedRefOnUI,\n  MaybeObserverCleanup,\n} from './commonTypes';\n\nfunction getComponentOrScrollable(ref: WrapperRef) {\n  return ref.getNativeScrollRef?.() ?? ref.getScrollableNode?.() ?? ref;\n}\n\nfunction useAnimatedRefBase<TRef extends WrapperRef>(\n  getWrapper: (ref: TRef) => ShadowNodeWrapper\n): AnimatedRef<TRef> {\n  const observers = useRef<Map<AnimatedRefObserver, MaybeObserverCleanup>>(\n    new Map()\n  ).current;\n  const wrapperRef = useRef<ShadowNodeWrapper | null>(null);\n  const resultRef = useRef<AnimatedRef<TRef> | null>(null);\n\n  if (!resultRef.current) {\n    const fun = <AnimatedRef<TRef>>((ref) => {\n      if (ref) {\n        wrapperRef.current = getWrapper(ref);\n\n        // We have to unwrap the tag from the shadow node wrapper.\n        fun.getTag = () => findNodeHandle(getComponentOrScrollable(ref));\n        fun.current = ref;\n\n        if (observers.size) {\n          const currentTag = fun?.getTag?.() ?? null;\n          observers.forEach((cleanup, observer) => {\n            // Perform the cleanup before calling the observer again.\n            // This ensures that all events that were set up in the observer\n            // are cleaned up before the observer sets up new events during\n            // the next call.\n            cleanup?.();\n            observers.set(observer, observer(currentTag));\n          });\n        }\n      }\n\n      return wrapperRef.current;\n    });\n\n    fun.observe = (observer: AnimatedRefObserver) => {\n      // Call observer immediately to get the initial value\n      const cleanup = observer(fun?.getTag?.() ?? null);\n      observers.set(observer, cleanup);\n\n      return () => {\n        observers.get(observer)?.();\n        observers.delete(observer);\n      };\n    };\n\n    fun.current = null;\n    resultRef.current = fun;\n  }\n\n  return resultRef.current;\n}\n\nfunction useAnimatedRefNative<\n  TRef extends WrapperRef = React.Component,\n>(): AnimatedRef<TRef> {\n  const [sharedWrapper] = useState(() =>\n    makeMutable<ShadowNodeWrapper | null>(null)\n  );\n\n  const resultRef = useAnimatedRefBase<TRef>((ref) => {\n    const currentWrapper = getShadowNodeWrapperFromRef(\n      getComponentOrScrollable(ref)\n    );\n\n    sharedWrapper.value = currentWrapper;\n\n    return currentWrapper;\n  });\n\n  if (!serializableMappingCache.get(resultRef)) {\n    const animatedRefSerializableHandle = createSerializable({\n      __init: (): AnimatedRefOnUI => {\n        'worklet';\n        return () => sharedWrapper.value;\n      },\n    });\n    serializableMappingCache.set(resultRef, animatedRefSerializableHandle);\n  }\n\n  return resultRef;\n}\n\nfunction useAnimatedRefWeb<\n  TRef extends WrapperRef = React.Component,\n>(): AnimatedRef<TRef> {\n  return useAnimatedRefBase<TRef>((ref) => getComponentOrScrollable(ref));\n}\n\n/**\n * Lets you get a reference of a view that you can use inside a worklet.\n *\n * @returns An object with a `.current` property which contains an instance of\n *   the reference object.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef\n */\nexport const useAnimatedRef = SHOULD_BE_USE_WEB\n  ? useAnimatedRefWeb\n  : useAnimatedRefNative;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}