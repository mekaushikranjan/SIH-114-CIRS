{"ast":null,"code":"\"use strict\";\n\nimport { ContinousBaseGesture } from './gesture';\nconst _worklet_495088703249_init_data = {\n  code: \"function changeEventCalculator_rotationGestureJs1(current,previous){let changePayload;if(previous===undefined){changePayload={rotationChange:current.rotation};}else{changePayload={rotationChange:current.rotation-previous.rotation};}return{...current,...changePayload};}\",\n  location: \"C:\\\\Users\\\\prana\\\\OneDrive\\\\Desktop\\\\civic-reporter-sih\\\\frontend\\\\node_modules\\\\react-native-gesture-handler\\\\lib\\\\module\\\\handlers\\\\gestures\\\\rotationGesture.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"changeEventCalculator_rotationGestureJs1\\\",\\\"current\\\",\\\"previous\\\",\\\"changePayload\\\",\\\"undefined\\\",\\\"rotationChange\\\",\\\"rotation\\\"],\\\"sources\\\":[\\\"C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/rotationGesture.js\\\"],\\\"mappings\\\":\\\"AAGA,SAAAA,wCAAgDA,CAAAC,OAAE,CAAAC,QAAA,EAGhD,GAAI,CAAAC,aAAa,CACjB,GAAID,QAAQ,GAAKE,SAAS,CAAE,CAC1BD,aAAa,CAAG,CACdE,cAAc,CAAEJ,OAAO,CAACK,QAC1B,CAAC,CACH,CAAC,IAAM,CACLH,aAAa,CAAG,CACdE,cAAc,CAAEJ,OAAO,CAACK,QAAQ,CAAGJ,QAAQ,CAACI,QAC9C,CAAC,CACH,CACA,MAAO,CACL,GAAGL,OAAO,CACV,GAAGE,aACL,CAAC,CACH\\\",\\\"ignoreList\\\":[]}\"\n};\nconst changeEventCalculator = function changeEventCalculator_rotationGestureJs1Factory({\n  _worklet_495088703249_init_data\n}) {\n  const _e = [new global.Error(), 1, -27];\n  const changeEventCalculator = function (current, previous) {\n    let changePayload;\n    if (previous === undefined) {\n      changePayload = {\n        rotationChange: current.rotation\n      };\n    } else {\n      changePayload = {\n        rotationChange: current.rotation - previous.rotation\n      };\n    }\n    return Object.assign({}, current, changePayload);\n  };\n  changeEventCalculator.__closure = {};\n  changeEventCalculator.__workletHash = 495088703249;\n  changeEventCalculator.__pluginVersion = \"0.5.1\";\n  changeEventCalculator.__initData = _worklet_495088703249_init_data;\n  changeEventCalculator.__stackDetails = _e;\n  return changeEventCalculator;\n}({\n  _worklet_495088703249_init_data\n});\nexport class RotationGesture extends ContinousBaseGesture {\n  constructor() {\n    super();\n    this.handlerName = 'RotationGestureHandler';\n  }\n  onChange(callback) {\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}","map":{"version":3,"names":["ContinousBaseGesture","_worklet_495088703249_init_data","code","location","sourceMap","changeEventCalculator","changeEventCalculator_rotationGestureJs1Factory","_e","global","Error","current","previous","changePayload","undefined","rotationChange","rotation","Object","assign","__closure","__workletHash","__pluginVersion","__initData","__stackDetails","RotationGesture","constructor","handlerName","onChange","callback","handlers"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\rotationGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport type { RotationGestureHandlerEventPayload } from '../GestureHandlerEventPayload';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\ntype RotationGestureChangeEventPayload = {\n  rotationChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<RotationGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<RotationGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: RotationGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation,\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class RotationGesture extends ContinousBaseGesture<\n  RotationGestureHandlerEventPayload,\n  RotationGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'RotationGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        RotationGestureHandlerEventPayload & RotationGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type RotationGestureType = InstanceType<typeof RotationGesture>;\n"],"mappings":";;AAAA,SAASA,oBAAoB,QAAQ,WAAW;AAAA,MAAAC,+BAAA;EAAAC,IAAA;EAAAC,QAAA;EAAAC,SAAA;AAAA;AAAA,MAAAC,qBAAA,GAQhD,SAAAC,gDAAA;EAAAL;AAAA;EAAA,MAAAM,EAAA,QAAAC,MAAA,CAAAC,KAAA;EAAA,MAAAJ,qBAAA,YAAAA,CACEK,OAA+D,EAC/DC,QAAiE,EACjE;IAEA,IAAIC,aAAgD;IACpD,IAAID,QAAQ,KAAKE,SAAS,EAAE;MAC1BD,aAAa,GAAG;QACdE,cAAc,EAAEJ,OAAO,CAACK;MAC1B,CAAC;IACH,CAAC,MAAM;MACLH,aAAa,GAAG;QACdE,cAAc,EAAEJ,OAAO,CAACK,QAAQ,GAAGJ,QAAQ,CAACI;MAC9C,CAAC;IACH;IAEA,OAAAC,MAAA,CAAAC,MAAA,KAAYP,OAAO,EAAKE,aAAA;EAC1B;EAAAP,qBAAA,CAAAa,SAAA;EAAAb,qBAAA,CAAAc,aAAA;EAAAd,qBAAA,CAAAe,eAAA;EAAAf,qBAAA,CAAAgB,UAAA,GAAApB,+BAAA;EAAAI,qBAAA,CAAAiB,cAAA,GAAAf,EAAA;EAAA,OAAAF,qBAAA;AAAA,CAjBA;EAAAJ;AAAA;AAmBA,OAAO,MAAMsB,eAAe,SAASvB,oBAAoB,CAGvD;EACAwB,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAEP,IAAI,CAACC,WAAW,GAAG,wBAAwB;EAC7C;EAEAC,QAAQA,CACNC,QAIS,EACT;IAEA,IAAI,CAACC,QAAQ,CAACvB,qBAAqB,GAAGA,qBAAqB;IAC3D,OAAO,KAAK,CAACqB,QAAQ,CAACC,QAAQ,CAAC;EACjC;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}