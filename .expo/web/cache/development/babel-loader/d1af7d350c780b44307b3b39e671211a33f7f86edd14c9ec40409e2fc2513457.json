{"ast":null,"code":"'use strict';\n\nimport { initialUpdaterRun } from \"../animation/index.js\";\nimport { isSharedValue } from \"../isSharedValue.js\";\nimport { WorkletEventHandler } from \"../WorkletEventHandler.js\";\nimport { getInlineStyle, hasInlineStyles } from \"./InlinePropManager.js\";\nimport { flattenArray, has } from \"./utils.js\";\nfunction dummyListener() {}\nexport class PropsFilter {\n  _initialPropsMap = new Map();\n  filterNonAnimatedProps(component) {\n    const inputProps = component.props;\n    const props = {};\n    for (const key in inputProps) {\n      const value = inputProps[key];\n      if (key === 'style') {\n        const styleProp = inputProps.style;\n        const styles = flattenArray(styleProp ?? []);\n        const processedStyle = styles.map(style => {\n          if (style?.viewDescriptors) {\n            const handle = style;\n            if (component._isFirstRender) {\n              this._initialPropsMap.set(handle, Object.assign({}, handle.initial.value, initialUpdaterRun(handle.initial.updater)));\n            }\n            return this._initialPropsMap.get(handle) ?? {};\n          } else if (hasInlineStyles(style)) {\n            return getInlineStyle(style, component._isFirstRender);\n          } else {\n            return style;\n          }\n        });\n        props[key] = processedStyle;\n      } else if (key === 'animatedProps') {\n        const animatedPropsProp = inputProps.animatedProps;\n        const animatedPropsArray = flattenArray(animatedPropsProp ?? []);\n        animatedPropsArray.forEach(animatedProps => {\n          if (animatedProps?.viewDescriptors && animatedProps.initial) {\n            Object.keys(animatedProps.initial.value).forEach(initialValueKey => {\n              props[initialValueKey] = animatedProps.initial?.value[initialValueKey];\n            });\n          }\n        });\n      } else if (has('workletEventHandler', value) && value.workletEventHandler instanceof WorkletEventHandler) {\n        if (value.workletEventHandler.eventNames.length > 0) {\n          value.workletEventHandler.eventNames.forEach(eventName => {\n            props[eventName] = has('listeners', value.workletEventHandler) ? value.workletEventHandler.listeners[eventName] : dummyListener;\n          });\n        } else {\n          props[key] = dummyListener;\n        }\n      } else if (isSharedValue(value)) {\n        if (component._isFirstRender) {\n          props[key] = value.value;\n        }\n      } else {\n        props[key] = value;\n      }\n    }\n    return props;\n  }\n}","map":{"version":3,"names":["initialUpdaterRun","isSharedValue","WorkletEventHandler","getInlineStyle","hasInlineStyles","flattenArray","has","dummyListener","PropsFilter","_initialPropsMap","Map","filterNonAnimatedProps","component","inputProps","props","key","value","styleProp","style","styles","processedStyle","map","viewDescriptors","handle","_isFirstRender","set","Object","assign","initial","updater","get","animatedPropsProp","animatedProps","animatedPropsArray","forEach","keys","initialValueKey","workletEventHandler","eventNames","length","eventName","listeners"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\createAnimatedComponent\\PropsFilter.tsx"],"sourcesContent":["'use strict';\n\nimport { initialUpdaterRun } from '../animation';\nimport type { StyleProps } from '../commonTypes';\nimport type { AnimatedStyleHandle } from '../hook/commonTypes';\nimport { isSharedValue } from '../isSharedValue';\nimport { WorkletEventHandler } from '../WorkletEventHandler';\nimport type {\n  AnimatedComponentProps,\n  AnimatedComponentType,\n  AnimatedProps,\n  InitialComponentProps,\n  IPropsFilter,\n} from './commonTypes';\nimport { getInlineStyle, hasInlineStyles } from './InlinePropManager';\nimport { flattenArray, has } from './utils';\n\nfunction dummyListener() {\n  // empty listener we use to assign to listener properties for which animated\n  // event is used.\n}\n\nexport class PropsFilter implements IPropsFilter {\n  private _initialPropsMap = new Map<AnimatedStyleHandle, StyleProps>();\n\n  public filterNonAnimatedProps(\n    component: AnimatedComponentType\n  ): Record<string, unknown> {\n    const inputProps =\n      component.props as AnimatedComponentProps<InitialComponentProps>;\n    const props: Record<string, unknown> = {};\n\n    for (const key in inputProps) {\n      const value = inputProps[key];\n      if (key === 'style') {\n        const styleProp = inputProps.style;\n        const styles = flattenArray<StyleProps>(styleProp ?? []);\n\n        const processedStyle: StyleProps[] = styles.map((style) => {\n          if (style?.viewDescriptors) {\n            const handle = style as AnimatedStyleHandle;\n\n            if (component._isFirstRender) {\n              this._initialPropsMap.set(handle, {\n                ...handle.initial.value,\n                ...initialUpdaterRun(handle.initial.updater),\n              } as StyleProps);\n            }\n\n            return this._initialPropsMap.get(handle) ?? {};\n          } else if (hasInlineStyles(style)) {\n            return getInlineStyle(style, component._isFirstRender);\n          } else {\n            return style;\n          }\n        });\n        // keep styles as they were passed by the user\n        // it will help other libs to interpret styles correctly\n        props[key] = processedStyle;\n      } else if (key === 'animatedProps') {\n        const animatedPropsProp = inputProps.animatedProps;\n        const animatedPropsArray = flattenArray<\n          Partial<AnimatedComponentProps<AnimatedProps>>\n        >(animatedPropsProp ?? []);\n\n        animatedPropsArray.forEach((animatedProps) => {\n          if (animatedProps?.viewDescriptors && animatedProps.initial) {\n            Object.keys(animatedProps.initial.value).forEach(\n              (initialValueKey) => {\n                props[initialValueKey] =\n                  animatedProps.initial?.value[initialValueKey];\n              }\n            );\n          }\n        });\n      } else if (\n        has('workletEventHandler', value) &&\n        value.workletEventHandler instanceof WorkletEventHandler\n      ) {\n        if (value.workletEventHandler.eventNames.length > 0) {\n          value.workletEventHandler.eventNames.forEach((eventName) => {\n            props[eventName] = has('listeners', value.workletEventHandler)\n              ? (\n                  value.workletEventHandler.listeners as Record<string, unknown>\n                )[eventName]\n              : dummyListener;\n          });\n        } else {\n          props[key] = dummyListener;\n        }\n      } else if (isSharedValue(value)) {\n        if (component._isFirstRender) {\n          props[key] = value.value;\n        }\n      } else {\n        props[key] = value;\n      }\n    }\n    return props;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}