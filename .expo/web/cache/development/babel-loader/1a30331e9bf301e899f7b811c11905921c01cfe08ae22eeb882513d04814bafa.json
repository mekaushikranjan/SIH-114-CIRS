{"ast":null,"code":"'use strict';\n\nimport { SHOULD_BE_USE_WEB } from \"../common/index.js\";\nimport { useAnimatedStyle } from \"./useAnimatedStyle.js\";\nfunction useAnimatedPropsJS(updater, deps, adapters) {\n  return useAnimatedStyle(updater, deps, adapters, true);\n}\nconst useAnimatedPropsNative = useAnimatedStyle;\nexport const useAnimatedProps = SHOULD_BE_USE_WEB ? useAnimatedPropsJS : useAnimatedPropsNative;","map":{"version":3,"names":["SHOULD_BE_USE_WEB","useAnimatedStyle","useAnimatedPropsJS","updater","deps","adapters","useAnimatedPropsNative","useAnimatedProps"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\hook\\useAnimatedProps.ts"],"sourcesContent":["'use strict';\nimport { SHOULD_BE_USE_WEB } from '../common';\nimport type { AnimatedPropsAdapterFunction } from '../commonTypes';\nimport type { DependencyList, UseAnimatedStyleInternal } from './commonTypes';\nimport { useAnimatedStyle } from './useAnimatedStyle';\n\n// TODO: we should make sure that when useAP is used we are not assigning styles\n\ntype UseAnimatedProps = <Props extends object>(\n  updater: () => Partial<Props>,\n  dependencies?: DependencyList | null,\n  adapters?:\n    | AnimatedPropsAdapterFunction\n    | AnimatedPropsAdapterFunction[]\n    | null,\n  isAnimatedProps?: boolean\n) => Partial<Props>;\n\nfunction useAnimatedPropsJS<Props extends object>(\n  updater: () => Props,\n  deps?: DependencyList | null,\n  adapters?:\n    | AnimatedPropsAdapterFunction\n    | AnimatedPropsAdapterFunction[]\n    | null\n) {\n  return (useAnimatedStyle as UseAnimatedStyleInternal<Props>)(\n    updater,\n    deps,\n    adapters,\n    true\n  );\n}\n\nconst useAnimatedPropsNative = useAnimatedStyle;\n\n/**\n * Lets you create an animated props object which can be animated using shared\n * values.\n *\n * @param updater - A function returning an object with properties you want to\n *   animate.\n * @param dependencies - An optional array of dependencies. Only relevant when\n *   using Reanimated without the Babel plugin on the Web.\n * @param adapters - An optional function or array of functions allowing to\n *   adopt prop naming between JS and the native side.\n * @returns An animated props object which has to be passed to `animatedProps`\n *   property of an Animated component that you want to animate.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedProps\n */\nexport const useAnimatedProps: UseAnimatedProps = SHOULD_BE_USE_WEB\n  ? (useAnimatedPropsJS as UseAnimatedProps)\n  : useAnimatedPropsNative;\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,iBAAiB,QAAQ,oBAAW;AAG7C,SAASC,gBAAgB,QAAQ,uBAAoB;AAcrD,SAASC,kBAAkBA,CACzBC,OAAoB,EACpBC,IAA4B,EAC5BC,QAGQ,EACR;EACA,OAAQJ,gBAAgB,CACtBE,OAAO,EACPC,IAAI,EACJC,QAAQ,EACR,IACF,CAAC;AACH;AAEA,MAAMC,sBAAsB,GAAGL,gBAAgB;AAgB/C,OAAO,MAAMM,gBAAkC,GAAGP,iBAAiB,GAC9DE,kBAAkB,GACnBI,sBAAsB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}