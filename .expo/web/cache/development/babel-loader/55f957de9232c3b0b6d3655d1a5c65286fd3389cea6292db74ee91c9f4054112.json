{"ast":null,"code":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { tokenStorage } from './tokenStorage';\nimport { store } from '../store/store';\nimport { logout } from '../store/slices/authSlice';\nexport const authDebug = {\n  async completeAuthReset() {\n    try {\n      console.log('üîÑ Starting complete authentication reset...');\n      const allKeys = await AsyncStorage.getAllKeys();\n      console.log('üìã All AsyncStorage keys:', allKeys);\n      const authKeys = allKeys.filter(key => key.includes('auth') || key.includes('token') || key.includes('user') || key.includes('firebase') || key.includes('worker') || key.includes('fallback') || key.includes('mock'));\n      console.log('üîë Auth-related keys to remove:', authKeys);\n      if (authKeys.length > 0) {\n        await AsyncStorage.multiRemove(authKeys);\n        console.log('‚úÖ Removed auth-related keys');\n      }\n      await tokenStorage.clearAuthData();\n      await AsyncStorage.clear();\n      console.log('üí• Cleared all AsyncStorage data');\n      console.log('üîÑ Clearing Redux auth state...');\n      store.dispatch(logout());\n      console.log('‚úÖ Redux auth state cleared');\n      console.log('‚úÖ Complete authentication reset successful');\n    } catch (error) {\n      console.error('‚ùå Error during complete auth reset:', error);\n      throw error;\n    }\n  },\n  async debugAuthState() {\n    try {\n      console.log('üîç Debugging current authentication state...');\n      const token = await tokenStorage.getToken();\n      const user = await tokenStorage.getUser();\n      console.log('Token from tokenStorage:', token ? token.substring(0, 30) + '...' : 'null');\n      console.log('User from tokenStorage:', user);\n      const reduxState = store.getState();\n      console.log('Redux auth state:', {\n        isAuthenticated: reduxState.auth.isAuthenticated,\n        token: reduxState.auth.token ? reduxState.auth.token.substring(0, 30) + '...' : 'null',\n        user: reduxState.auth.user ? {\n          id: reduxState.auth.user.id,\n          email: reduxState.auth.user.email\n        } : 'null'\n      });\n      const allKeys = await AsyncStorage.getAllKeys();\n      const allData = {};\n      for (const key of allKeys) {\n        const value = await AsyncStorage.getItem(key);\n        allData[key] = value;\n      }\n      console.log('üìã All AsyncStorage data:', allData);\n      const tokenLikeKeys = allKeys.filter(key => key.toLowerCase().includes('token') || key.toLowerCase().includes('auth'));\n      console.log('üîë Token-like keys:', tokenLikeKeys);\n      for (const key of tokenLikeKeys) {\n        const value = await AsyncStorage.getItem(key);\n        console.log(`${key}:`, value ? value.substring(0, 50) + '...' : 'null');\n      }\n    } catch (error) {\n      console.error('‚ùå Error during auth debug:', error);\n    }\n  },\n  async forceLogout() {\n    try {\n      console.log('üö™ Forcing complete logout...');\n      await this.completeAuthReset();\n      console.log('‚úÖ Force logout complete - app should redirect to login');\n    } catch (error) {\n      console.error('‚ùå Error during force logout:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["AsyncStorage","tokenStorage","store","logout","authDebug","completeAuthReset","console","log","allKeys","getAllKeys","authKeys","filter","key","includes","length","multiRemove","clearAuthData","clear","dispatch","error","debugAuthState","token","getToken","user","getUser","substring","reduxState","getState","isAuthenticated","auth","id","email","allData","value","getItem","tokenLikeKeys","toLowerCase","forceLogout"],"sources":["C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/src/utils/authDebug.ts"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { tokenStorage } from './tokenStorage';\nimport { store } from '../store/store';\nimport { logout } from '../store/slices/authSlice';\n\nexport const authDebug = {\n  // Complete authentication reset - clears everything\n  async completeAuthReset(): Promise<void> {\n    try {\n      console.log('üîÑ Starting complete authentication reset...');\n      \n      // Get all keys from AsyncStorage\n      const allKeys = await AsyncStorage.getAllKeys();\n      console.log('üìã All AsyncStorage keys:', allKeys);\n      \n      // Filter auth-related keys\n      const authKeys = allKeys.filter(key => \n        key.includes('auth') || \n        key.includes('token') || \n        key.includes('user') || \n        key.includes('firebase') ||\n        key.includes('worker') ||\n        key.includes('fallback') ||\n        key.includes('mock')\n      );\n      \n      console.log('üîë Auth-related keys to remove:', authKeys);\n      \n      // Remove all auth-related keys\n      if (authKeys.length > 0) {\n        await AsyncStorage.multiRemove(authKeys);\n        console.log('‚úÖ Removed auth-related keys');\n      }\n      \n      // Also use our tokenStorage clear method\n      await tokenStorage.clearAuthData();\n      \n      // Clear all AsyncStorage (nuclear option)\n      await AsyncStorage.clear();\n      console.log('üí• Cleared all AsyncStorage data');\n      \n      // Clear Redux state as well\n      console.log('üîÑ Clearing Redux auth state...');\n      store.dispatch(logout());\n      console.log('‚úÖ Redux auth state cleared');\n      \n      console.log('‚úÖ Complete authentication reset successful');\n    } catch (error) {\n      console.error('‚ùå Error during complete auth reset:', error);\n      throw error;\n    }\n  },\n\n  // Debug current auth state\n  async debugAuthState(): Promise<void> {\n    try {\n      console.log('üîç Debugging current authentication state...');\n      \n      // Check tokenStorage\n      const token = await tokenStorage.getToken();\n      const user = await tokenStorage.getUser();\n      \n      console.log('Token from tokenStorage:', token ? token.substring(0, 30) + '...' : 'null');\n      console.log('User from tokenStorage:', user);\n      \n      // Check Redux state\n      const reduxState = store.getState();\n      console.log('Redux auth state:', {\n        isAuthenticated: reduxState.auth.isAuthenticated,\n        token: reduxState.auth.token ? reduxState.auth.token.substring(0, 30) + '...' : 'null',\n        user: reduxState.auth.user ? { id: reduxState.auth.user.id, email: reduxState.auth.user.email } : 'null'\n      });\n      \n      // Check all AsyncStorage keys\n      const allKeys = await AsyncStorage.getAllKeys();\n      const allData: Record<string, string | null> = {};\n      \n      for (const key of allKeys) {\n        const value = await AsyncStorage.getItem(key);\n        allData[key] = value;\n      }\n      \n      console.log('üìã All AsyncStorage data:', allData);\n      \n      // Look for any token-like values\n      const tokenLikeKeys = allKeys.filter(key => \n        key.toLowerCase().includes('token') || \n        key.toLowerCase().includes('auth')\n      );\n      \n      console.log('üîë Token-like keys:', tokenLikeKeys);\n      for (const key of tokenLikeKeys) {\n        const value = await AsyncStorage.getItem(key);\n        console.log(`${key}:`, value ? value.substring(0, 50) + '...' : 'null');\n      }\n      \n    } catch (error) {\n      console.error('‚ùå Error during auth debug:', error);\n    }\n  },\n\n  // Force logout and clear everything\n  async forceLogout(): Promise<void> {\n    try {\n      console.log('üö™ Forcing complete logout...');\n      \n      await this.completeAuthReset();\n      \n      // The app should automatically redirect to login after this\n      console.log('‚úÖ Force logout complete - app should redirect to login');\n      \n    } catch (error) {\n      console.error('‚ùå Error during force logout:', error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}