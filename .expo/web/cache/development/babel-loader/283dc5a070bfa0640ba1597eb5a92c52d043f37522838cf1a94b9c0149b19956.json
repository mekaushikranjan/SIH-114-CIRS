{"ast":null,"code":"\"use strict\";\n\nimport * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\nimport { NativeViewGestureHandler, nativeViewProps } from './NativeViewGestureHandler';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst NATIVE_WRAPPER_PROPS_FILTER = [...nativeViewProps, 'onGestureHandlerEvent', 'onGestureHandlerStateChange'];\nexport default function createNativeWrapper(Component, config = {}) {\n  const ComponentWrapper = React.forwardRef((props, ref) => {\n    const {\n      gestureHandlerProps,\n      childProps\n    } = Object.keys(props).reduce((res, key) => {\n      const allowedKeys = NATIVE_WRAPPER_PROPS_FILTER;\n      if (allowedKeys.includes(key)) {\n        res.gestureHandlerProps[key] = props[key];\n      } else {\n        res.childProps[key] = props[key];\n      }\n      return res;\n    }, {\n      gestureHandlerProps: Object.assign({}, config),\n      childProps: {\n        enabled: props.enabled,\n        hitSlop: props.hitSlop,\n        testID: props.testID\n      }\n    });\n    const _ref = useRef(null);\n    const _gestureHandlerRef = useRef(null);\n    useImperativeHandle(ref, () => {\n      const node = _gestureHandlerRef.current;\n      if (_ref.current && node) {\n        _ref.current.handlerTag = node.handlerTag;\n        return _ref.current;\n      }\n      return null;\n    }, [_ref, _gestureHandlerRef]);\n    return _jsx(NativeViewGestureHandler, Object.assign({}, gestureHandlerProps, {\n      ref: _gestureHandlerRef,\n      children: _jsx(Component, Object.assign({}, childProps, {\n        ref: _ref\n      }))\n    }));\n  });\n  ComponentWrapper.displayName = Component?.displayName || Component?.render?.name || typeof Component === 'string' && Component || 'ComponentWrapper';\n  return ComponentWrapper;\n}","map":{"version":3,"names":["React","useImperativeHandle","useRef","NativeViewGestureHandler","nativeViewProps","jsx","_jsx","NATIVE_WRAPPER_PROPS_FILTER","createNativeWrapper","Component","config","ComponentWrapper","forwardRef","props","ref","gestureHandlerProps","childProps","Object","keys","reduce","res","key","allowedKeys","includes","assign","enabled","hitSlop","testID","_ref","_gestureHandlerRef","node","current","handlerTag","children","displayName","render","name"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\handlers\\createNativeWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\n\nimport {\n  NativeViewGestureHandler,\n  NativeViewGestureHandlerProps,\n  nativeViewProps,\n} from './NativeViewGestureHandler';\n\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n  ...nativeViewProps,\n  'onGestureHandlerEvent',\n  'onGestureHandlerStateChange',\n] as const;\n\nexport default function createNativeWrapper<P>(\n  Component: React.ComponentType<P>,\n  config: Readonly<NativeViewGestureHandlerProps> = {}\n) {\n  const ComponentWrapper = React.forwardRef<\n    React.ComponentType<any>,\n    P & NativeViewGestureHandlerProps\n  >((props, ref) => {\n    // Filter out props that should be passed to gesture handler wrapper\n    const { gestureHandlerProps, childProps } = Object.keys(props).reduce(\n      (res, key) => {\n        // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info\n        const allowedKeys: readonly string[] = NATIVE_WRAPPER_PROPS_FILTER;\n        if (allowedKeys.includes(key)) {\n          // @ts-ignore FIXME(TS)\n          res.gestureHandlerProps[key] = props[key];\n        } else {\n          // @ts-ignore FIXME(TS)\n          res.childProps[key] = props[key];\n        }\n        return res;\n      },\n      {\n        gestureHandlerProps: { ...config }, // Watch out not to modify config\n        childProps: {\n          enabled: props.enabled,\n          hitSlop: props.hitSlop,\n          testID: props.testID,\n        } as P,\n      }\n    );\n    const _ref = useRef<React.ComponentType<P>>(null);\n    const _gestureHandlerRef = useRef<React.ComponentType<P>>(null);\n    useImperativeHandle(\n      ref,\n      // @ts-ignore TODO(TS) decide how nulls work in this context\n      () => {\n        const node = _gestureHandlerRef.current;\n        // Add handlerTag for relations config\n        if (_ref.current && node) {\n          // @ts-ignore FIXME(TS) think about createHandler return type\n          _ref.current.handlerTag = node.handlerTag;\n          return _ref.current;\n        }\n        return null;\n      },\n      [_ref, _gestureHandlerRef]\n    );\n    return (\n      <NativeViewGestureHandler\n        {...gestureHandlerProps}\n        // @ts-ignore TODO(TS)\n        ref={_gestureHandlerRef}>\n        <Component {...childProps} ref={_ref} />\n      </NativeViewGestureHandler>\n    );\n  });\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  ComponentWrapper.displayName =\n    Component?.displayName ||\n    // @ts-ignore if render doesn't exist it will return undefined and go further\n    Component?.render?.name ||\n    (typeof Component === 'string' && Component) ||\n    'ComponentWrapper';\n\n  return ComponentWrapper;\n}\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,mBAAmB,EAAEC,MAAM,QAAQ,OAAO;AAEnD,SACEC,wBAAwB,EAExBC,eAAe,QACV,4BAA4B;AAEnC,SAAAC,GAAA,IAAAC,IAAA;AAOA,MAAMC,2BAA2B,GAAG,CAClC,GAAGH,eAAe,EAClB,uBAAuB,EACvB,6BAA6B,CACrB;AAEV,eAAe,SAASI,mBAAmBA,CACzCC,SAAiC,EACjCC,MAA+C,GAAG,CAAC,CAAC,EACpD;EACA,MAAMC,gBAAgB,GAAGX,KAAK,CAACY,UAAU,CAGvC,CAACC,KAAK,EAAEC,GAAG,KAAK;IAEhB,MAAM;MAAEC,mBAAmB;MAAEC;IAAW,CAAC,GAAGC,MAAM,CAACC,IAAI,CAACL,KAAK,CAAC,CAACM,MAAM,CACnE,CAACC,GAAG,EAAEC,GAAG,KAAK;MAEZ,MAAMC,WAA8B,GAAGf,2BAA2B;MAClE,IAAIe,WAAW,CAACC,QAAQ,CAACF,GAAG,CAAC,EAAE;QAE7BD,GAAG,CAACL,mBAAmB,CAACM,GAAG,CAAC,GAAGR,KAAK,CAACQ,GAAG,CAAC;MAC3C,CAAC,MAAM;QAELD,GAAG,CAACJ,UAAU,CAACK,GAAG,CAAC,GAAGR,KAAK,CAACQ,GAAG,CAAC;MAClC;MACA,OAAOD,GAAG;IACZ,CAAC,EACD;MACEL,mBAAmB,EAAAE,MAAA,CAAAO,MAAA,KAAOd,MAAA,CAAQ;MAClCM,UAAU,EAAE;QACVS,OAAO,EAAEZ,KAAK,CAACY,OAAO;QACtBC,OAAO,EAAEb,KAAK,CAACa,OAAO;QACtBC,MAAM,EAAEd,KAAK,CAACc;MAChB;IACF,CACF,CAAC;IACD,MAAMC,IAAI,GAAG1B,MAAM,CAAyB,IAAI,CAAC;IACjD,MAAM2B,kBAAkB,GAAG3B,MAAM,CAAyB,IAAI,CAAC;IAC/DD,mBAAmB,CACjBa,GAAG,EAEH,MAAM;MACJ,MAAMgB,IAAI,GAAGD,kBAAkB,CAACE,OAAO;MAEvC,IAAIH,IAAI,CAACG,OAAO,IAAID,IAAI,EAAE;QAExBF,IAAI,CAACG,OAAO,CAACC,UAAU,GAAGF,IAAI,CAACE,UAAU;QACzC,OAAOJ,IAAI,CAACG,OAAO;MACrB;MACA,OAAO,IAAI;IACb,CAAC,EACD,CAACH,IAAI,EAAEC,kBAAkB,CAC3B,CAAC;IACD,OACEvB,IAAA,CAACH,wBAAwB,EAAAc,MAAA,CAAAO,MAAA,KACnBT,mBAAmB;MAEvBD,GAAG,EAAEe,kBAAmB;MAAAI,QAAA,EACxB3B,IAAA,CAACG,SAAS,EAAAQ,MAAA,CAAAO,MAAA,KAAKR,UAAU;QAAEF,GAAG,EAAEc;MAAA,EAAO;IAAA,EACf,CAAC;EAE/B,CAAC,CAAC;EAGFjB,gBAAgB,CAACuB,WAAW,GAC1BzB,SAAS,EAAEyB,WAAW,IAEtBzB,SAAS,EAAE0B,MAAM,EAAEC,IAAI,IACtB,OAAO3B,SAAS,KAAK,QAAQ,IAAIA,SAAU,IAC5C,kBAAkB;EAEpB,OAAOE,gBAAgB;AACzB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}