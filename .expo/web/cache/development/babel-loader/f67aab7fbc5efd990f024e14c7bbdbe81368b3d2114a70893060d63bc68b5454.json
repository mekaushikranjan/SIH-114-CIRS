{"ast":null,"code":"\"use strict\";\n\nimport { getNextHandlerTag } from '../getNextHandlerTag';\nimport { isRemoteDebuggingEnabled } from '../../utils';\nexport const CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10\n};\nexport class Gesture {}\nlet nextGestureId = 0;\nexport class BaseGesture extends Gesture {\n  gestureId = -1;\n  handlerTag = -1;\n  handlerName = '';\n  config = {};\n  handlers = {\n    gestureId: -1,\n    handlerTag: -1,\n    isWorklet: []\n  };\n  constructor() {\n    super();\n    this.gestureId = nextGestureId++;\n    this.handlers.gestureId = this.gestureId;\n  }\n  addDependency(key, gesture) {\n    const value = this.config[key];\n    this.config[key] = value ? Array().concat(value, gesture) : [gesture];\n  }\n  withRef(ref) {\n    this.config.ref = ref;\n    return this;\n  }\n  isWorklet(callback) {\n    return callback.__workletHash !== undefined;\n  }\n  onBegin(callback) {\n    this.handlers.onBegin = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n    return this;\n  }\n  onStart(callback) {\n    this.handlers.onStart = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n    return this;\n  }\n  onEnd(callback) {\n    this.handlers.onEnd = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n    return this;\n  }\n  onFinalize(callback) {\n    this.handlers.onFinalize = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n    return this;\n  }\n  onTouchesDown(callback) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesDown = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);\n    return this;\n  }\n  onTouchesMove(callback) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesMove = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);\n    return this;\n  }\n  onTouchesUp(callback) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesUp = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);\n    return this;\n  }\n  onTouchesCancelled(callback) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesCancelled = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);\n    return this;\n  }\n  enabled(enabled) {\n    this.config.enabled = enabled;\n    return this;\n  }\n  shouldCancelWhenOutside(value) {\n    this.config.shouldCancelWhenOutside = value;\n    return this;\n  }\n  hitSlop(hitSlop) {\n    this.config.hitSlop = hitSlop;\n    return this;\n  }\n  activeCursor(activeCursor) {\n    this.config.activeCursor = activeCursor;\n    return this;\n  }\n  mouseButton(mouseButton) {\n    this.config.mouseButton = mouseButton;\n    return this;\n  }\n  runOnJS(runOnJS) {\n    this.config.runOnJS = runOnJS;\n    return this;\n  }\n  simultaneousWithExternalGesture(...gestures) {\n    for (const gesture of gestures) {\n      this.addDependency('simultaneousWith', gesture);\n    }\n    return this;\n  }\n  requireExternalGestureToFail(...gestures) {\n    for (const gesture of gestures) {\n      this.addDependency('requireToFail', gesture);\n    }\n    return this;\n  }\n  blocksExternalGesture(...gestures) {\n    for (const gesture of gestures) {\n      this.addDependency('blocksHandlers', gesture);\n    }\n    return this;\n  }\n  withTestId(id) {\n    this.config.testId = id;\n    return this;\n  }\n  cancelsTouchesInView(value) {\n    this.config.cancelsTouchesInView = value;\n    return this;\n  }\n  initialize() {\n    this.handlerTag = getNextHandlerTag();\n    this.handlers = Object.assign({}, this.handlers, {\n      handlerTag: this.handlerTag\n    });\n    if (this.config.ref) {\n      this.config.ref.current = this;\n    }\n  }\n  toGestureArray() {\n    return [this];\n  }\n  prepare() {}\n  get shouldUseReanimated() {\n    return this.config.runOnJS !== true && !this.handlers.isWorklet.includes(false) && !isRemoteDebuggingEnabled();\n  }\n}\nexport class ContinousBaseGesture extends BaseGesture {\n  onUpdate(callback) {\n    this.handlers.onUpdate = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n    return this;\n  }\n  onChange(callback) {\n    this.handlers.onChange = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n    return this;\n  }\n  manualActivation(manualActivation) {\n    this.config.manualActivation = manualActivation;\n    return this;\n  }\n}","map":{"version":3,"names":["getNextHandlerTag","isRemoteDebuggingEnabled","CALLBACK_TYPE","UNDEFINED","BEGAN","START","UPDATE","CHANGE","END","FINALIZE","TOUCHES_DOWN","TOUCHES_MOVE","TOUCHES_UP","TOUCHES_CANCELLED","Gesture","nextGestureId","BaseGesture","gestureId","handlerTag","handlerName","config","handlers","isWorklet","constructor","addDependency","key","gesture","value","Array","concat","withRef","ref","callback","__workletHash","undefined","onBegin","onStart","onEnd","onFinalize","onTouchesDown","needsPointerData","onTouchesMove","onTouchesUp","onTouchesCancelled","enabled","shouldCancelWhenOutside","hitSlop","activeCursor","mouseButton","runOnJS","simultaneousWithExternalGesture","gestures","requireExternalGestureToFail","blocksExternalGesture","withTestId","id","testId","cancelsTouchesInView","initialize","Object","assign","current","toGestureArray","prepare","shouldUseReanimated","includes","ContinousBaseGesture","onUpdate","onChange","manualActivation"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\handlers\\gestures\\gesture.ts"],"sourcesContent":["import {\n  HitSlop,\n  CommonGestureConfig,\n  GestureTouchEvent,\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n  ActiveCursor,\n  MouseButton,\n} from '../gestureHandlerCommon';\nimport { getNextHandlerTag } from '../getNextHandlerTag';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport type {\n  FlingGestureHandlerEventPayload,\n  ForceTouchGestureHandlerEventPayload,\n  LongPressGestureHandlerEventPayload,\n  PanGestureHandlerEventPayload,\n  PinchGestureHandlerEventPayload,\n  RotationGestureHandlerEventPayload,\n  TapGestureHandlerEventPayload,\n  NativeViewGestureHandlerPayload,\n  HoverGestureHandlerEventPayload,\n} from '../GestureHandlerEventPayload';\nimport { isRemoteDebuggingEnabled } from '../../utils';\n\nexport type GestureType =\n  | BaseGesture<Record<string, unknown>>\n  | BaseGesture<Record<string, never>>\n  | BaseGesture<TapGestureHandlerEventPayload>\n  | BaseGesture<PanGestureHandlerEventPayload>\n  | BaseGesture<LongPressGestureHandlerEventPayload>\n  | BaseGesture<RotationGestureHandlerEventPayload>\n  | BaseGesture<PinchGestureHandlerEventPayload>\n  | BaseGesture<FlingGestureHandlerEventPayload>\n  | BaseGesture<ForceTouchGestureHandlerEventPayload>\n  | BaseGesture<NativeViewGestureHandlerPayload>\n  | BaseGesture<HoverGestureHandlerEventPayload>;\n\nexport type GestureRef =\n  | number\n  | GestureType\n  | React.RefObject<GestureType | undefined>\n  | React.RefObject<React.ComponentType | undefined>; // Allow adding a ref to a gesture handler\nexport interface BaseGestureConfig\n  extends CommonGestureConfig,\n    Record<string, unknown> {\n  ref?: React.MutableRefObject<GestureType | undefined>;\n  requireToFail?: GestureRef[];\n  simultaneousWith?: GestureRef[];\n  blocksHandlers?: GestureRef[];\n  needsPointerData?: boolean;\n  manualActivation?: boolean;\n  runOnJS?: boolean;\n  testId?: string;\n  cancelsTouchesInView?: boolean;\n}\n\ntype TouchEventHandlerType = (\n  event: GestureTouchEvent,\n  stateManager: GestureStateManagerType\n) => void;\n\nexport type HandlerCallbacks<EventPayloadT extends Record<string, unknown>> = {\n  gestureId: number;\n  handlerTag: number;\n  onBegin?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onStart?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onEnd?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onFinalize?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onUpdate?: (event: GestureUpdateEvent<EventPayloadT>) => void;\n  onChange?: (event: any) => void;\n  onTouchesDown?: TouchEventHandlerType;\n  onTouchesMove?: TouchEventHandlerType;\n  onTouchesUp?: TouchEventHandlerType;\n  onTouchesCancelled?: TouchEventHandlerType;\n  changeEventCalculator?: (\n    current: GestureUpdateEvent<Record<string, unknown>>,\n    previous?: GestureUpdateEvent<Record<string, unknown>>\n  ) => GestureUpdateEvent<Record<string, unknown>>;\n  isWorklet: boolean[];\n};\n\nexport const CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10,\n} as const;\n\n// Allow using CALLBACK_TYPE as object and type\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type CALLBACK_TYPE = (typeof CALLBACK_TYPE)[keyof typeof CALLBACK_TYPE];\n\nexport abstract class Gesture {\n  /**\n   * Return array of gestures, providing the same interface for creating and updating\n   * handlers, no matter which object was used to create gesture instance.\n   */\n  abstract toGestureArray(): GestureType[];\n\n  /**\n   * Assign handlerTag to the gesture instance and set ref.current (if a ref is set)\n   */\n  abstract initialize(): void;\n\n  /**\n   * Make sure that values of properties defining relations are arrays. Do any necessary\n   * preprocessing required to configure relations between handlers. Called just before\n   * updating the handler on the native side.\n   */\n  abstract prepare(): void;\n}\n\nlet nextGestureId = 0;\nexport abstract class BaseGesture<\n  EventPayloadT extends Record<string, unknown>,\n> extends Gesture {\n  private gestureId = -1;\n  public handlerTag = -1;\n  public handlerName = '';\n  public config: BaseGestureConfig = {};\n  public handlers: HandlerCallbacks<EventPayloadT> = {\n    gestureId: -1,\n    handlerTag: -1,\n    isWorklet: [],\n  };\n\n  constructor() {\n    super();\n\n    // Used to check whether the gesture config has been updated when wrapping it\n    // with `useMemo`. Since every config will have a unique id, when the dependencies\n    // don't change, the config won't be recreated and the id will stay the same.\n    // If the id is different, it means that the config has changed and the gesture\n    // needs to be updated.\n    this.gestureId = nextGestureId++;\n    this.handlers.gestureId = this.gestureId;\n  }\n\n  private addDependency(\n    key: 'simultaneousWith' | 'requireToFail' | 'blocksHandlers',\n    gesture: Exclude<GestureRef, number>\n  ) {\n    const value = this.config[key];\n    this.config[key] = value\n      ? Array<GestureRef>().concat(value, gesture)\n      : [gesture];\n  }\n\n  /**\n   * Sets a `ref` to the gesture object, allowing for interoperability with the old API.\n   * @param ref\n   */\n  withRef(ref: React.MutableRefObject<GestureType | undefined>) {\n    this.config.ref = ref;\n    return this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  protected isWorklet(callback: Function) {\n    // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    return callback.__workletHash !== undefined;\n  }\n\n  /**\n   * Set the callback that is being called when given gesture handler starts receiving touches.\n   * At the moment of this callback the handler is in `BEGAN` state and we don't know yet if it will recognize the gesture at all.\n   * @param callback\n   */\n  onBegin(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onBegin = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the callback that is being called when the gesture is recognized by the handler and it transitions to the `ACTIVE` state.\n   * @param callback\n   */\n  onStart(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onStart = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the callback that is being called when the gesture that was recognized by the handler finishes and handler reaches `END` state.\n   * It will be called only if the handler was previously in the `ACTIVE` state.\n   * @param callback\n   */\n  onEnd(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onEnd = callback;\n    // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the callback that is being called when the handler finalizes handling gesture - the gesture was recognized and has finished or it failed to recognize.\n   * @param callback\n   */\n  onFinalize(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onFinalize = callback;\n    // @ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the `onTouchesDown` callback which is called every time a pointer is placed on the screen.\n   * @param callback\n   */\n  onTouchesDown(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesDown = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  /**\n   * Set the `onTouchesMove` callback which is called every time a pointer is moved on the screen.\n   * @param callback\n   */\n  onTouchesMove(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesMove = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  /**\n   * Set the `onTouchesUp` callback which is called every time a pointer is lifted from the screen.\n   * @param callback\n   */\n  onTouchesUp(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesUp = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  /**\n   * Set the `onTouchesCancelled` callback which is called every time a pointer stops being tracked, for example when the gesture finishes.\n   * @param callback\n   */\n  onTouchesCancelled(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesCancelled = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] =\n      this.isWorklet(callback);\n\n    return this;\n  }\n\n  /**\n   * Indicates whether the given handler should be analyzing stream of touch events or not.\n   * @param enabled\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#enabledvalue-boolean\n   */\n  enabled(enabled: boolean) {\n    this.config.enabled = enabled;\n    return this;\n  }\n\n  /**\n   * When true the handler will cancel or fail recognition (depending on its current state) whenever the finger leaves the area of the connected view.\n   * @param value\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#shouldcancelwhenoutsidevalue-boolean\n   */\n  shouldCancelWhenOutside(value: boolean) {\n    this.config.shouldCancelWhenOutside = value;\n    return this;\n  }\n\n  /**\n   * This parameter enables control over what part of the connected view area can be used to begin recognizing the gesture.\n   * When a negative number is provided the bounds of the view will reduce the area by the given number of points in each of the sides evenly.\n   * @param hitSlop\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#hitslopsettings\n   */\n  hitSlop(hitSlop: HitSlop) {\n    this.config.hitSlop = hitSlop;\n    return this;\n  }\n\n  /**\n   * #### Web only\n   * This parameter allows to specify which `cursor` should be used when gesture activates.\n   * Supports all CSS cursor values (e.g. `\"grab\"`, `\"zoom-in\"`). Default value is set to `\"auto\"`.\n   * @param activeCursor\n   */\n  activeCursor(activeCursor: ActiveCursor) {\n    this.config.activeCursor = activeCursor;\n    return this;\n  }\n\n  /**\n   * #### Web & Android only\n   * Allows users to choose which mouse button should handler respond to.\n   * Arguments can be combined using `|` operator, e.g. `mouseButton(MouseButton.LEFT | MouseButton.RIGHT)`.\n   * Default value is set to `MouseButton.LEFT`.\n   * @param mouseButton\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/gestures/pan-gesture#mousebuttonvalue-mousebutton-web--android-only\n   */\n  mouseButton(mouseButton: MouseButton) {\n    this.config.mouseButton = mouseButton;\n    return this;\n  }\n\n  /**\n   * When `react-native-reanimated` is installed, the callbacks passed to the gestures are automatically workletized and run on the UI thread when called.\n   * This option allows for changing this behavior: when `true`, all the callbacks will be run on the JS thread instead of the UI thread, regardless of whether they are worklets or not.\n   * Defaults to `false`.\n   * @param runOnJS\n   */\n  runOnJS(runOnJS: boolean) {\n    this.config.runOnJS = runOnJS;\n    return this;\n  }\n\n  /**\n   * Allows gestures across different components to be recognized simultaneously.\n   * @param gestures\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#simultaneouswithexternalgesture\n   */\n  simultaneousWithExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('simultaneousWith', gesture);\n    }\n    return this;\n  }\n\n  /**\n   * Allows to delay activation of the handler until all handlers passed as arguments to this method fail (or don't begin at all).\n   * @param gestures\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#requireexternalgesturetofail\n   */\n  requireExternalGestureToFail(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('requireToFail', gesture);\n    }\n    return this;\n  }\n\n  /**\n   * Works similarily to `requireExternalGestureToFail` but the direction of the relation is reversed - instead of being one-to-many relation, it's many-to-one.\n   * @param gestures\n   * @see https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/gesture-composition/#blocksexternalgesture\n   */\n  blocksExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('blocksHandlers', gesture);\n    }\n    return this;\n  }\n\n  /**\n   * Sets a `testID` property for gesture object, allowing for querying for it in tests.\n   * @param id\n   */\n  withTestId(id: string) {\n    this.config.testId = id;\n    return this;\n  }\n\n  /**\n   * #### iOS only\n   * When `true`, the handler will cancel touches for native UI components (`UIButton`, `UISwitch`, etc) it's attached to when it becomes `ACTIVE`.\n   * Default value is `true`.\n   * @param value\n   */\n  cancelsTouchesInView(value: boolean) {\n    this.config.cancelsTouchesInView = value;\n    return this;\n  }\n\n  initialize() {\n    this.handlerTag = getNextHandlerTag();\n\n    this.handlers = { ...this.handlers, handlerTag: this.handlerTag };\n\n    if (this.config.ref) {\n      this.config.ref.current = this as GestureType;\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return [this as GestureType];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  prepare() {}\n\n  get shouldUseReanimated(): boolean {\n    // Use Reanimated when runOnJS isn't set explicitly,\n    // all defined callbacks are worklets\n    // and remote debugging is disabled\n    return (\n      this.config.runOnJS !== true &&\n      !this.handlers.isWorklet.includes(false) &&\n      !isRemoteDebuggingEnabled()\n    );\n  }\n}\n\nexport abstract class ContinousBaseGesture<\n  EventPayloadT extends Record<string, unknown>,\n  EventChangePayloadT extends Record<string, unknown>,\n> extends BaseGesture<EventPayloadT> {\n  /**\n   * Set the callback that is being called every time the gesture receives an update while it's active.\n   * @param callback\n   */\n  onUpdate(callback: (event: GestureUpdateEvent<EventPayloadT>) => void) {\n    this.handlers.onUpdate = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * Set the callback that is being called every time the gesture receives an update while it's active.\n   * This callback will receive information about change in value in relation to the last received event.\n   * @param callback\n   */\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<EventPayloadT & EventChangePayloadT>\n    ) => void\n  ) {\n    this.handlers.onChange = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n    return this;\n  }\n\n  /**\n   * When `true` the handler will not activate by itself even if its activation criteria are met.\n   * Instead you can manipulate its state using state manager.\n   * @param manualActivation\n   */\n  manualActivation(manualActivation: boolean) {\n    this.config.manualActivation = manualActivation;\n    return this;\n  }\n}\n"],"mappings":";;AASA,SAASA,iBAAiB,QAAQ,sBAAsB;AAaxD,SAASC,wBAAwB,QAAQ,aAAa;AAiEtD,OAAO,MAAMC,aAAa,GAAG;EAC3BC,SAAS,EAAE,CAAC;EACZC,KAAK,EAAE,CAAC;EACRC,KAAK,EAAE,CAAC;EACRC,MAAM,EAAE,CAAC;EACTC,MAAM,EAAE,CAAC;EACTC,GAAG,EAAE,CAAC;EACNC,QAAQ,EAAE,CAAC;EACXC,YAAY,EAAE,CAAC;EACfC,YAAY,EAAE,CAAC;EACfC,UAAU,EAAE,CAAC;EACbC,iBAAiB,EAAE;AACrB,CAAU;AAMV,OAAO,MAAeC,OAAO,CAAC;AAoB9B,IAAIC,aAAa,GAAG,CAAC;AACrB,OAAO,MAAeC,WAAW,SAEvBF,OAAO,CAAC;EACRG,SAAS,GAAG,CAAC,CAAC;EACfC,UAAU,GAAG,CAAC,CAAC;EACfC,WAAW,GAAG,EAAE;EAChBC,MAAM,GAAsB,CAAC,CAAC;EAC9BC,QAAQ,GAAoC;IACjDJ,SAAS,EAAE,CAAC,CAAC;IACbC,UAAU,EAAE,CAAC,CAAC;IACdI,SAAS,EAAE;EACb,CAAC;EAEDC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAOP,IAAI,CAACN,SAAS,GAAGF,aAAa,EAAE;IAChC,IAAI,CAACM,QAAQ,CAACJ,SAAS,GAAG,IAAI,CAACA,SAAS;EAC1C;EAEQO,aAAaA,CACnBC,GAA4D,EAC5DC,OAAoC,EACpC;IACA,MAAMC,KAAK,GAAG,IAAI,CAACP,MAAM,CAACK,GAAG,CAAC;IAC9B,IAAI,CAACL,MAAM,CAACK,GAAG,CAAC,GAAGE,KAAK,GACpBC,KAAK,CAAa,CAAC,CAACC,MAAM,CAACF,KAAK,EAAED,OAAO,CAAC,GAC1C,CAACA,OAAO,CAAC;EACf;EAMAI,OAAOA,CAACC,GAAoD,EAAE;IAC5D,IAAI,CAACX,MAAM,CAACW,GAAG,GAAGA,GAAG;IACrB,OAAO,IAAI;EACb;EAGUT,SAASA,CAACU,QAAkB,EAAE;IAEtC,OAAOA,QAAQ,CAACC,aAAa,KAAKC,SAAS;EAC7C;EAOAC,OAAOA,CAACH,QAAiE,EAAE;IACzE,IAAI,CAACX,QAAQ,CAACc,OAAO,GAAGH,QAAQ;IAChC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACpB,aAAa,CAACE,KAAK,CAAC,GAAG,IAAI,CAACkB,SAAS,CAACU,QAAQ,CAAC;IACvE,OAAO,IAAI;EACb;EAMAI,OAAOA,CAACJ,QAAiE,EAAE;IACzE,IAAI,CAACX,QAAQ,CAACe,OAAO,GAAGJ,QAAQ;IAChC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACpB,aAAa,CAACG,KAAK,CAAC,GAAG,IAAI,CAACiB,SAAS,CAACU,QAAQ,CAAC;IACvE,OAAO,IAAI;EACb;EAOAK,KAAKA,CACHL,QAGS,EACT;IACA,IAAI,CAACX,QAAQ,CAACgB,KAAK,GAAGL,QAAQ;IAE9B,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACpB,aAAa,CAACM,GAAG,CAAC,GAAG,IAAI,CAACc,SAAS,CAACU,QAAQ,CAAC;IACrE,OAAO,IAAI;EACb;EAMAM,UAAUA,CACRN,QAGS,EACT;IACA,IAAI,CAACX,QAAQ,CAACiB,UAAU,GAAGN,QAAQ;IAEnC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACpB,aAAa,CAACO,QAAQ,CAAC,GAAG,IAAI,CAACa,SAAS,CAACU,QAAQ,CAAC;IAC1E,OAAO,IAAI;EACb;EAMAO,aAAaA,CAACP,QAA+B,EAAE;IAC7C,IAAI,CAACZ,MAAM,CAACoB,gBAAgB,GAAG,IAAI;IACnC,IAAI,CAACnB,QAAQ,CAACkB,aAAa,GAAGP,QAAQ;IACtC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACpB,aAAa,CAACQ,YAAY,CAAC,GACjD,IAAI,CAACY,SAAS,CAACU,QAAQ,CAAC;IAE1B,OAAO,IAAI;EACb;EAMAS,aAAaA,CAACT,QAA+B,EAAE;IAC7C,IAAI,CAACZ,MAAM,CAACoB,gBAAgB,GAAG,IAAI;IACnC,IAAI,CAACnB,QAAQ,CAACoB,aAAa,GAAGT,QAAQ;IACtC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACpB,aAAa,CAACS,YAAY,CAAC,GACjD,IAAI,CAACW,SAAS,CAACU,QAAQ,CAAC;IAE1B,OAAO,IAAI;EACb;EAMAU,WAAWA,CAACV,QAA+B,EAAE;IAC3C,IAAI,CAACZ,MAAM,CAACoB,gBAAgB,GAAG,IAAI;IACnC,IAAI,CAACnB,QAAQ,CAACqB,WAAW,GAAGV,QAAQ;IACpC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACpB,aAAa,CAACU,UAAU,CAAC,GAC/C,IAAI,CAACU,SAAS,CAACU,QAAQ,CAAC;IAE1B,OAAO,IAAI;EACb;EAMAW,kBAAkBA,CAACX,QAA+B,EAAE;IAClD,IAAI,CAACZ,MAAM,CAACoB,gBAAgB,GAAG,IAAI;IACnC,IAAI,CAACnB,QAAQ,CAACsB,kBAAkB,GAAGX,QAAQ;IAC3C,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACpB,aAAa,CAACW,iBAAiB,CAAC,GACtD,IAAI,CAACS,SAAS,CAACU,QAAQ,CAAC;IAE1B,OAAO,IAAI;EACb;EAOAY,OAAOA,CAACA,OAAgB,EAAE;IACxB,IAAI,CAACxB,MAAM,CAACwB,OAAO,GAAGA,OAAO;IAC7B,OAAO,IAAI;EACb;EAOAC,uBAAuBA,CAAClB,KAAc,EAAE;IACtC,IAAI,CAACP,MAAM,CAACyB,uBAAuB,GAAGlB,KAAK;IAC3C,OAAO,IAAI;EACb;EAQAmB,OAAOA,CAACA,OAAgB,EAAE;IACxB,IAAI,CAAC1B,MAAM,CAAC0B,OAAO,GAAGA,OAAO;IAC7B,OAAO,IAAI;EACb;EAQAC,YAAYA,CAACA,YAA0B,EAAE;IACvC,IAAI,CAAC3B,MAAM,CAAC2B,YAAY,GAAGA,YAAY;IACvC,OAAO,IAAI;EACb;EAUAC,WAAWA,CAACA,WAAwB,EAAE;IACpC,IAAI,CAAC5B,MAAM,CAAC4B,WAAW,GAAGA,WAAW;IACrC,OAAO,IAAI;EACb;EAQAC,OAAOA,CAACA,OAAgB,EAAE;IACxB,IAAI,CAAC7B,MAAM,CAAC6B,OAAO,GAAGA,OAAO;IAC7B,OAAO,IAAI;EACb;EAOAC,+BAA+BA,CAAC,GAAGC,QAAuC,EAAE;IAC1E,KAAK,MAAMzB,OAAO,IAAIyB,QAAQ,EAAE;MAC9B,IAAI,CAAC3B,aAAa,CAAC,kBAAkB,EAAEE,OAAO,CAAC;IACjD;IACA,OAAO,IAAI;EACb;EAOA0B,4BAA4BA,CAAC,GAAGD,QAAuC,EAAE;IACvE,KAAK,MAAMzB,OAAO,IAAIyB,QAAQ,EAAE;MAC9B,IAAI,CAAC3B,aAAa,CAAC,eAAe,EAAEE,OAAO,CAAC;IAC9C;IACA,OAAO,IAAI;EACb;EAOA2B,qBAAqBA,CAAC,GAAGF,QAAuC,EAAE;IAChE,KAAK,MAAMzB,OAAO,IAAIyB,QAAQ,EAAE;MAC9B,IAAI,CAAC3B,aAAa,CAAC,gBAAgB,EAAEE,OAAO,CAAC;IAC/C;IACA,OAAO,IAAI;EACb;EAMA4B,UAAUA,CAACC,EAAU,EAAE;IACrB,IAAI,CAACnC,MAAM,CAACoC,MAAM,GAAGD,EAAE;IACvB,OAAO,IAAI;EACb;EAQAE,oBAAoBA,CAAC9B,KAAc,EAAE;IACnC,IAAI,CAACP,MAAM,CAACqC,oBAAoB,GAAG9B,KAAK;IACxC,OAAO,IAAI;EACb;EAEA+B,UAAUA,CAAA,EAAG;IACX,IAAI,CAACxC,UAAU,GAAGlB,iBAAiB,CAAC,CAAC;IAErC,IAAI,CAACqB,QAAQ,GAAAsC,MAAA,CAAAC,MAAA,KAAQ,IAAI,CAACvC,QAAQ;MAAEH,UAAU,EAAE,IAAI,CAACA;IAAA,EAAY;IAEjE,IAAI,IAAI,CAACE,MAAM,CAACW,GAAG,EAAE;MACnB,IAAI,CAACX,MAAM,CAACW,GAAG,CAAC8B,OAAO,GAAG,IAAmB;IAC/C;EACF;EAEAC,cAAcA,CAAA,EAAkB;IAC9B,OAAO,CAAC,IAAI,CAAgB;EAC9B;EAGAC,OAAOA,CAAA,EAAG,CAAC;EAEX,IAAIC,mBAAmBA,CAAA,EAAY;IAIjC,OACE,IAAI,CAAC5C,MAAM,CAAC6B,OAAO,KAAK,IAAI,IAC5B,CAAC,IAAI,CAAC5B,QAAQ,CAACC,SAAS,CAAC2C,QAAQ,CAAC,KAAK,CAAC,IACxC,CAAChE,wBAAwB,CAAC,CAAC;EAE/B;AACF;AAEA,OAAO,MAAeiE,oBAAoB,SAGhClD,WAAW,CAAgB;EAKnCmD,QAAQA,CAACnC,QAA4D,EAAE;IACrE,IAAI,CAACX,QAAQ,CAAC8C,QAAQ,GAAGnC,QAAQ;IACjC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACpB,aAAa,CAACI,MAAM,CAAC,GAAG,IAAI,CAACgB,SAAS,CAACU,QAAQ,CAAC;IACxE,OAAO,IAAI;EACb;EAOAoC,QAAQA,CACNpC,QAES,EACT;IACA,IAAI,CAACX,QAAQ,CAAC+C,QAAQ,GAAGpC,QAAQ;IACjC,IAAI,CAACX,QAAQ,CAACC,SAAS,CAACpB,aAAa,CAACK,MAAM,CAAC,GAAG,IAAI,CAACe,SAAS,CAACU,QAAQ,CAAC;IACxE,OAAO,IAAI;EACb;EAOAqC,gBAAgBA,CAACA,gBAAyB,EAAE;IAC1C,IAAI,CAACjD,MAAM,CAACiD,gBAAgB,GAAGA,gBAAgB;IAC/C,OAAO,IAAI;EACb;AACF","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}