{"ast":null,"code":"\"use strict\";\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { customDirectEventTypes } from './customDirectEventTypes';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport { handlerIDToTag, registerOldGestureHandler, unregisterOldGestureHandler } from './handlersRegistry';\nimport { getNextHandlerTag } from './getNextHandlerTag';\nimport { filterConfig, scheduleFlushOperations } from './utils';\nimport findNodeHandle from '../findNodeHandle';\nimport { deepEqual, isFabric, isReact19, isTestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\nimport { MountRegistry } from '../mountRegistry';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst UIManagerAny = UIManager;\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent'\n};\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nconst customGHEventsConfig = Object.assign({\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n}, isFabric() && Platform.OS === 'android' && customGHEventsConfigFabricAndroid);\nUIManagerAny.genericDirectEventTypes = Object.assign({}, UIManagerAny.genericDirectEventTypes, customGHEventsConfig);\nconst UIManagerConstants = UIManagerAny.getViewManagerConfig?.('getConstants');\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = Object.assign({}, UIManagerConstants.genericDirectEventTypes, customGHEventsConfig);\n}\nconst {\n  setJSResponder: oldSetJSResponder = () => {},\n  clearJSResponder: oldClearJSResponder = () => {}\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag, blockNativeResponder) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\nfunction hasUnresolvedRefs(props) {\n  const extract = refs => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(r => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded'\n};\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\nexport default function createHandler({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = []\n}) {\n  class Handler extends React.Component {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n    handlerTag = -1;\n    constructor(props) {\n      super(props);\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = {\n        allowTouches\n      };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n    componentDidMount() {\n      const props = this.props;\n      this.isMountedRef.current = true;\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener('toggleElementInspector', () => {\n          this.setState(_ => ({\n            allowTouches\n          }));\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n      if (hasUnresolvedRefs(props)) {\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n      this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [...allowedProps, ...customNativeProps], config));\n      if (!this.viewNode) {\n        throw new Error(`[Gesture Handler] Failed to obtain view for ${Handler.displayName}. Note that old API doesn't support functional components.`);\n      }\n      this.attachGestureHandler(findNodeHandle(this.viewNode));\n    }\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag);\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      if (Platform.OS !== 'web') {\n        unregisterOldGestureHandler(this.handlerTag);\n      }\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      const handlerID = this.props.id;\n      if (handlerID) {\n        delete handlerIDToTag[handlerID];\n      }\n      MountRegistry.gestureHandlerWillUnmount(this);\n    }\n    onGestureHandlerEvent = event => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n    onGestureHandlerStateChange = event => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n        const state = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n    refHandler = node => {\n      this.viewNode = node;\n      const child = React.Children.only(this.props.children);\n      const ref = isReact19() ? child.props?.ref : child?.ref;\n      if (!ref) {\n        return;\n      }\n      if (typeof ref === 'function') {\n        ref(node);\n      } else {\n        ref.current = node;\n      }\n    };\n    createGestureHandler = newConfig => {\n      this.handlerTag = getNextHandlerTag();\n      this.config = newConfig;\n      RNGestureHandlerModule.createGestureHandler(name, this.handlerTag, newConfig);\n    };\n    attachGestureHandler = newViewTag => {\n      this.viewTag = newViewTag;\n      if (Platform.OS === 'web') {\n        RNGestureHandlerModule.attachGestureHandler(this.handlerTag, newViewTag, ActionType.JS_FUNCTION_OLD_API, this.propsRef);\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange\n        });\n        const actionType = (() => {\n          const onGestureEvent = this.props?.onGestureEvent;\n          const isGestureHandlerWorklet = onGestureEvent && ('current' in onGestureEvent || 'workletEventHandler' in onGestureEvent);\n          const onHandlerStateChange = this.props?.onHandlerStateChange;\n          const isStateChangeHandlerWorklet = onHandlerStateChange && ('current' in onHandlerStateChange || 'workletEventHandler' in onHandlerStateChange);\n          const isReanimatedHandler = isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n          if (isReanimatedHandler) {\n            return ActionType.REANIMATED_WORKLET;\n          } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n        RNGestureHandlerModule.attachGestureHandler(this.handlerTag, newViewTag, actionType);\n      }\n      scheduleFlushOperations();\n      ghQueueMicrotask(() => {\n        MountRegistry.gestureHandlerWillMount(this);\n      });\n    };\n    updateGestureHandler = newConfig => {\n      this.config = newConfig;\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n    update(remainingTries) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n      const props = this.props;\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [...allowedProps, ...customNativeProps], config);\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n    setNativeProps(updates) {\n      const mergedProps = Object.assign({}, this.props, updates);\n      const newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [...allowedProps, ...customNativeProps], config);\n      this.updateGestureHandler(newConfig);\n    }\n    render() {\n      if (__DEV__ && !this.context && !isTestEnv() && Platform.OS !== 'web') {\n        throw new Error(name + ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/installation for more details.');\n      }\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent\n      } = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        if (onGestureHandlerEvent) {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n      }\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange\n      } = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        if (onGestureHandlerStateChange) {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n          throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n      };\n      this.propsRef.current = events;\n      let child = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(tagMessage(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));\n      }\n      let grandChildren = child.props.children;\n      if (__DEV__ && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(_jsx(PressabilityDebugView, {\n          color: \"mediumspringgreen\",\n          hitSlop: child.props.hitSlop\n        }, \"pressabilityDebugView\"));\n      }\n      return React.cloneElement(child, Object.assign({\n        ref: this.refHandler,\n        collapsable: false\n      }, isTestEnv() ? {\n        handlerType: name,\n        handlerTag: this.handlerTag,\n        enabled: this.props.enabled\n      } : {}, {\n        testID: this.props.testID ?? child.props.testID\n      }, events), grandChildren);\n    }\n  }\n  return Handler;\n}","map":{"version":3,"names":["React","Platform","UIManager","DeviceEventEmitter","customDirectEventTypes","RNGestureHandlerModule","State","handlerIDToTag","registerOldGestureHandler","unregisterOldGestureHandler","getNextHandlerTag","filterConfig","scheduleFlushOperations","findNodeHandle","deepEqual","isFabric","isReact19","isTestEnv","tagMessage","ActionType","PressabilityDebugView","GestureHandlerRootViewContext","ghQueueMicrotask","MountRegistry","jsx","_jsx","UIManagerAny","topGestureHandlerEvent","registrationName","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","topOnGestureHandlerStateChange","customGHEventsConfig","Object","assign","onGestureHandlerEvent","onGestureHandlerStateChange","OS","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","Component","displayName","contextType","handlerTag","constructor","propsRef","createRef","isMountedRef","state","id","Error","componentDidMount","inspectorToggleListener","setState","_","update","createGestureHandler","viewNode","attachGestureHandler","componentDidUpdate","viewTag","componentWillUnmount","remove","dropGestureHandler","handlerID","gestureHandlerWillUnmount","event","nativeEvent","onGestureEvent","onHandlerStateChange","stateEventName","eventHandler","refHandler","node","child","Children","only","children","ref","newConfig","newViewTag","JS_FUNCTION_OLD_API","onGestureStateChange","actionType","isGestureHandlerWorklet","isStateChangeHandlerWorklet","isReanimatedHandler","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","gestureHandlerWillMount","updateGestureHandler","remainingTries","setNativeProps","updates","mergedProps","render","context","gestureEventHandler","gestureStateEventHandler","events","e","grandChildren","type","toArray","push","color","hitSlop","cloneElement","collapsable","handlerType","enabled","testID"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\handlers\\createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\nimport { customDirectEventTypes } from './customDirectEventTypes';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  registerOldGestureHandler,\n  unregisterOldGestureHandler,\n} from './handlersRegistry';\nimport { getNextHandlerTag } from './getNextHandlerTag';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlerCommon';\nimport { filterConfig, scheduleFlushOperations } from './utils';\nimport findNodeHandle from '../findNodeHandle';\nimport { ValueOf } from '../typeUtils';\nimport {\n  deepEqual,\n  isFabric,\n  isReact19,\n  isTestEnv,\n  tagMessage,\n} from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\nimport { MountRegistry } from '../mountRegistry';\nimport { ReactElement } from 'react';\n\nconst UIManagerAny = UIManager as any;\n\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent',\n};\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n\nconst UIManagerConstants = UIManagerAny.getViewManagerConfig?.('getConstants');\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    // no-op\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    // no-op\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\ntype AttachGestureHandlerWeb = (\n  handlerTag: number,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  newView: any,\n  _actionType: ActionType,\n  propsRef: React.RefObject<unknown>\n) => void;\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>,\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag = -1;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      if (!this.viewNode) {\n        throw new Error(\n          `[Gesture Handler] Failed to obtain view for ${Handler.displayName}. Note that old API doesn't support functional components.`\n        );\n      }\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      if (Platform.OS !== 'web') {\n        unregisterOldGestureHandler(this.handlerTag);\n      }\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n\n      MountRegistry.gestureHandlerWillUnmount(this);\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // @ts-ignore Since React 19 ref is accessible as standard prop\n      // https://react.dev/blog/2024/04/25/react-19-upgrade-guide#deprecated-element-ref\n      const ref = isReact19() ? (child as ReactElement).props?.ref : child?.ref;\n\n      if (!ref) {\n        return;\n      }\n\n      if (typeof ref === 'function') {\n        ref(node);\n      } else {\n        ref.current = node;\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.handlerTag = getNextHandlerTag();\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // Typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as AttachGestureHandlerWeb\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          const onGestureEvent = this.props?.onGestureEvent;\n          const isGestureHandlerWorklet =\n            onGestureEvent &&\n            ('current' in onGestureEvent ||\n              'workletEventHandler' in onGestureEvent);\n          const onHandlerStateChange = this.props?.onHandlerStateChange;\n          const isStateChangeHandlerWorklet =\n            onHandlerStateChange &&\n            ('current' in onHandlerStateChange ||\n              'workletEventHandler' in onHandlerStateChange);\n          const isReanimatedHandler =\n            isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n          if (isReanimatedHandler) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n\n      ghQueueMicrotask(() => {\n        MountRegistry.gestureHandlerWillMount(this);\n      });\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isTestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/fundamentals/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isTestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n                enabled: this.props.enabled,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}