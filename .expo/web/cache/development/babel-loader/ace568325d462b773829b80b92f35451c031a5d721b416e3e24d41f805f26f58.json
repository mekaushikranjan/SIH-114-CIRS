{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  isAuthenticated: false,\n  user: null,\n  token: null,\n  refreshToken: null,\n  loading: false,\n  isInitialized: false,\n  sessionExpiry: null,\n  authMethod: null\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    loginStart: state => {\n      state.loading = true;\n    },\n    loginSuccess: (state, action) => {\n      state.isAuthenticated = true;\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.refreshToken = action.payload.refreshToken || null;\n      state.authMethod = action.payload.authMethod || null;\n      state.sessionExpiry = action.payload.sessionExpiry || null;\n      state.loading = false;\n    },\n    loginFailure: state => {\n      state.loading = false;\n    },\n    logout: state => {\n      state.isAuthenticated = false;\n      state.user = null;\n      state.token = null;\n      state.refreshToken = null;\n      state.authMethod = null;\n      state.sessionExpiry = null;\n      state.loading = false;\n    },\n    restoreAuthState: (state, action) => {\n      state.isAuthenticated = true;\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.refreshToken = action.payload.refreshToken || null;\n      state.authMethod = action.payload.authMethod || null;\n      state.sessionExpiry = action.payload.sessionExpiry || null;\n      state.loading = false;\n      state.isInitialized = true;\n    },\n    initializeAuthComplete: state => {\n      state.isInitialized = true;\n      state.loading = false;\n    },\n    updateProfile: (state, action) => {\n      if (state.user) {\n        state.user = Object.assign({}, state.user, action.payload);\n      }\n    },\n    updateVerificationStatus: (state, action) => {\n      if (state.user) {\n        state.user = Object.assign({}, state.user, {\n          emailVerified: action.payload.emailVerified ?? state.user.emailVerified,\n          phoneVerified: action.payload.phoneVerified ?? state.user.phoneVerified\n        });\n      }\n    },\n    refreshTokens: (state, action) => {\n      state.token = action.payload.token;\n      state.refreshToken = action.payload.refreshToken || state.refreshToken;\n      state.sessionExpiry = action.payload.sessionExpiry || state.sessionExpiry;\n    },\n    setSessionExpiry: (state, action) => {\n      state.sessionExpiry = action.payload;\n    }\n  }\n});\nexport const {\n  loginStart,\n  loginSuccess,\n  loginFailure,\n  logout,\n  restoreAuthState,\n  initializeAuthComplete,\n  updateProfile,\n  updateVerificationStatus,\n  refreshTokens,\n  setSessionExpiry\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","isAuthenticated","user","token","refreshToken","loading","isInitialized","sessionExpiry","authMethod","authSlice","name","reducers","loginStart","state","loginSuccess","action","payload","loginFailure","logout","restoreAuthState","initializeAuthComplete","updateProfile","Object","assign","updateVerificationStatus","emailVerified","phoneVerified","refreshTokens","setSessionExpiry","actions","reducer"],"sources":["C:/Users/prana/OneDrive/Desktop/civic-reporter-sih/frontend/src/store/slices/authSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n  address?: string;\r\n  emailVerified?: boolean;\r\n  phoneVerified?: boolean;\r\n  profilePicture?: string;\r\n\r\n  role: 'citizen' | 'admin' | 'worker';\r\n  // Worker-specific fields\r\n  workerId?: string;\r\n  department?: string;\r\n  skills?: string[];\r\n  assignedArea?: string;\r\n  rating?: number;\r\n  completedIssues?: number;\r\n}\r\n\r\ninterface AuthState {\r\n  isAuthenticated: boolean;\r\n  user: User | null;\r\n  token: string | null;\r\n  refreshToken: string | null;\r\n  loading: boolean;\r\n  isInitialized: boolean;\r\n  sessionExpiry: number | null;\r\n  authMethod: 'email' | 'phone' | 'google' | null;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n  isAuthenticated: false,\r\n  user: null,\r\n  token: null,\r\n  refreshToken: null,\r\n  loading: false,\r\n  isInitialized: false,\r\n  sessionExpiry: null,\r\n  authMethod: null,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    loginStart: (state) => {\r\n      state.loading = true;\r\n    },\r\n    loginSuccess: (state, action: PayloadAction<{ \r\n      user: User; \r\n      token: string; \r\n      refreshToken?: string; \r\n      authMethod?: 'email' | 'phone' | 'google';\r\n      sessionExpiry?: number;\r\n    }>) => {\r\n      state.isAuthenticated = true;\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.refreshToken = action.payload.refreshToken || null;\r\n      state.authMethod = action.payload.authMethod || null;\r\n      state.sessionExpiry = action.payload.sessionExpiry || null;\r\n      state.loading = false;\r\n    },\r\n    loginFailure: (state) => {\r\n      state.loading = false;\r\n    },\r\n    logout: (state) => {\r\n      state.isAuthenticated = false;\r\n      state.user = null;\r\n      state.token = null;\r\n      state.refreshToken = null;\r\n      state.authMethod = null;\r\n      state.sessionExpiry = null;\r\n      state.loading = false;\r\n    },\r\n    restoreAuthState: (state, action: PayloadAction<{ \r\n      user: User; \r\n      token: string; \r\n      refreshToken?: string; \r\n      authMethod?: 'email' | 'phone' | 'google';\r\n      sessionExpiry?: number;\r\n    }>) => {\r\n      state.isAuthenticated = true;\r\n      state.user = action.payload.user;\r\n      state.token = action.payload.token;\r\n      state.refreshToken = action.payload.refreshToken || null;\r\n      state.authMethod = action.payload.authMethod || null;\r\n      state.sessionExpiry = action.payload.sessionExpiry || null;\r\n      state.loading = false;\r\n      state.isInitialized = true;\r\n    },\r\n    initializeAuthComplete: (state) => {\r\n      state.isInitialized = true;\r\n      state.loading = false;\r\n    },\r\n    updateProfile: (state, action: PayloadAction<Partial<User>>) => {\r\n      if (state.user) {\r\n        state.user = { ...state.user, ...action.payload };\r\n      }\r\n    },\r\n    updateVerificationStatus: (state, action: PayloadAction<{ emailVerified?: boolean; phoneVerified?: boolean }>) => {\r\n      if (state.user) {\r\n        state.user = { \r\n          ...state.user, \r\n          emailVerified: action.payload.emailVerified ?? state.user.emailVerified,\r\n          phoneVerified: action.payload.phoneVerified ?? state.user.phoneVerified,\r\n        };\r\n      }\r\n    },\r\n    refreshTokens: (state, action: PayloadAction<{ token: string; refreshToken?: string; sessionExpiry?: number }>) => {\r\n      state.token = action.payload.token;\r\n      state.refreshToken = action.payload.refreshToken || state.refreshToken;\r\n      state.sessionExpiry = action.payload.sessionExpiry || state.sessionExpiry;\r\n    },\r\n    setSessionExpiry: (state, action: PayloadAction<number>) => {\r\n      state.sessionExpiry = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { \r\n  loginStart, \r\n  loginSuccess, \r\n  loginFailure, \r\n  logout, \r\n  restoreAuthState, \r\n  initializeAuthComplete, \r\n  updateProfile,\r\n  updateVerificationStatus,\r\n  refreshTokens,\r\n  setSessionExpiry\r\n} = authSlice.actions;\r\nexport default authSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}