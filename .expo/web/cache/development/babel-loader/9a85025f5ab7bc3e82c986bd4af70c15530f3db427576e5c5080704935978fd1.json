{"ast":null,"code":"\"use strict\";\nimport * as React from 'react';\nimport { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler } from '../handlers/PanGestureHandler';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nconst DRAG_TOSS = 0.05;\nexport default class Swipeable extends Component {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true\n  };\n  constructor(props) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n    this.updateAnimatedEvent(props, this.state);\n    this.onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: dragX\n      }\n    }], {\n      useNativeDriver: props.useNativeAnimations\n    });\n  }\n  shouldComponentUpdate(props, state) {\n    if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n      this.updateAnimatedEvent(props, state);\n    }\n    return true;\n  }\n  updateAnimatedEvent = (props, state) => {\n    const {\n      friction,\n      overshootFriction\n    } = props;\n    const {\n      dragX,\n      rowTranslation,\n      leftWidth = 0,\n      rowWidth = 0\n    } = state;\n    const {\n      rightOffset = rowWidth\n    } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n    const {\n      overshootLeft = leftWidth > 0,\n      overshootRight = rightWidth > 0\n    } = props;\n    const transX = Animated.add(rowTranslation, dragX.interpolate({\n      inputRange: [0, friction],\n      outputRange: [0, 1]\n    })).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [-rightWidth - (overshootRight ? 1 / overshootFriction : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 / overshootFriction : 0)]\n    });\n    this.transX = transX;\n    this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n      inputRange: [-1, 0, leftWidth],\n      outputRange: [0, 0, 1]\n    }) : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp'\n    });\n    this.showRightAction = rightWidth > 0 ? transX.interpolate({\n      inputRange: [-rightWidth, 0, 1],\n      outputRange: [1, 0, 0]\n    }) : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp'\n    });\n  };\n  onTapHandlerStateChange = ({\n    nativeEvent\n  }) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n  onHandlerStateChange = ev => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n    if (ev.nativeEvent.state === State.ACTIVE) {\n      const {\n        velocityX,\n        translationX: dragX\n      } = ev.nativeEvent;\n      const {\n        rowState\n      } = this.state;\n      const {\n        friction\n      } = this.props;\n      const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      const direction = rowState === -1 ? 'right' : rowState === 1 ? 'left' : translationX > 0 ? 'left' : 'right';\n      if (rowState === 0) {\n        this.props.onSwipeableOpenStartDrag?.(direction);\n      } else {\n        this.props.onSwipeableCloseStartDrag?.(direction);\n      }\n    }\n  };\n  handleRelease = ev => {\n    const {\n      velocityX,\n      translationX: dragX\n    } = ev.nativeEvent;\n    const {\n      leftWidth = 0,\n      rowWidth = 0,\n      rowState\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2\n    } = this.props;\n    const startOffsetX = this.currentOffset() + dragX / friction;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n    this.animateRow(startOffsetX, toValue, velocityX / friction);\n  };\n  animateRow = (fromValue, toValue, velocityX) => {\n    const {\n      dragX,\n      rowTranslation\n    } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n    this.setState({\n      rowState: Math.sign(toValue)\n    });\n    Animated.spring(rowTranslation, Object.assign({\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations\n    }, this.props.animationOptions)).start(({\n      finished\n    }) => {\n      if (finished) {\n        if (toValue > 0) {\n          this.props.onSwipeableLeftOpen?.();\n          this.props.onSwipeableOpen?.('left', this);\n        } else if (toValue < 0) {\n          this.props.onSwipeableRightOpen?.();\n          this.props.onSwipeableOpen?.('right', this);\n        } else {\n          const closingDirection = fromValue > 0 ? 'left' : 'right';\n          this.props.onSwipeableClose?.(closingDirection, this);\n        }\n      }\n    });\n    if (toValue > 0) {\n      this.props.onSwipeableLeftWillOpen?.();\n      this.props.onSwipeableWillOpen?.('left');\n    } else if (toValue < 0) {\n      this.props.onSwipeableRightWillOpen?.();\n      this.props.onSwipeableWillOpen?.('right');\n    } else {\n      const closingDirection = fromValue > 0 ? 'left' : 'right';\n      this.props.onSwipeableWillClose?.(closingDirection);\n    }\n  };\n  onRowLayout = ({\n    nativeEvent\n  }) => {\n    this.setState({\n      rowWidth: nativeEvent.layout.width\n    });\n  };\n  currentOffset = () => {\n    const {\n      leftWidth = 0,\n      rowWidth = 0,\n      rowState\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n  openLeft = () => {\n    const {\n      leftWidth = 0\n    } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n  openRight = () => {\n    const {\n      rowWidth = 0\n    } = this.state;\n    const {\n      rightOffset = rowWidth\n    } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n  reset = () => {\n    const {\n      dragX,\n      rowTranslation\n    } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(0);\n    this.setState({\n      rowState: 0\n    });\n  };\n  render() {\n    const {\n      rowState\n    } = this.state;\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      dragOffsetFromLeftEdge = 10,\n      dragOffsetFromRightEdge = 10\n    } = this.props;\n    const left = renderLeftActions && _jsxs(Animated.View, {\n      style: [styles.leftActions, {\n        transform: [{\n          translateX: this.leftActionTranslate\n        }]\n      }],\n      children: [renderLeftActions(this.showLeftAction, this.transX, this), _jsx(View, {\n        onLayout: ({\n          nativeEvent\n        }) => this.setState({\n          leftWidth: nativeEvent.layout.x\n        })\n      })]\n    });\n    const right = renderRightActions && _jsxs(Animated.View, {\n      style: [styles.rightActions, {\n        transform: [{\n          translateX: this.rightActionTranslate\n        }]\n      }],\n      children: [renderRightActions(this.showRightAction, this.transX, this), _jsx(View, {\n        onLayout: ({\n          nativeEvent\n        }) => this.setState({\n          rightOffset: nativeEvent.layout.x\n        })\n      })]\n    });\n    return _jsx(PanGestureHandler, Object.assign({\n      activeOffsetX: [-dragOffsetFromRightEdge, dragOffsetFromLeftEdge],\n      touchAction: \"pan-y\"\n    }, this.props, {\n      onGestureEvent: this.onGestureEvent,\n      onHandlerStateChange: this.onHandlerStateChange,\n      children: _jsxs(Animated.View, {\n        onLayout: this.onRowLayout,\n        style: [styles.container, this.props.containerStyle],\n        children: [left, right, _jsx(TapGestureHandler, {\n          enabled: rowState !== 0,\n          touchAction: \"pan-y\",\n          onHandlerStateChange: this.onTapHandlerStateChange,\n          children: _jsx(Animated.View, {\n            pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n            style: [{\n              transform: [{\n                translateX: this.transX\n              }]\n            }, this.props.childrenContainerStyle],\n            children: children\n          })\n        })]\n      })\n    }));\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: Object.assign({}, StyleSheet.absoluteFillObject, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: Object.assign({}, StyleSheet.absoluteFillObject, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"names":["React","Component","Animated","StyleSheet","View","I18nManager","PanGestureHandler","TapGestureHandler","State","jsx","_jsx","jsxs","_jsxs","DRAG_TOSS","Swipeable","defaultProps","friction","overshootFriction","useNativeAnimations","constructor","props","dragX","Value","state","rowTranslation","rowState","leftWidth","undefined","rightOffset","rowWidth","updateAnimatedEvent","onGestureEvent","event","nativeEvent","translationX","useNativeDriver","shouldComponentUpdate","overshootLeft","overshootRight","rightWidth","Math","max","transX","add","interpolate","inputRange","outputRange","showLeftAction","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","onTapHandlerStateChange","oldState","ACTIVE","close","onHandlerStateChange","ev","handleRelease","velocityX","direction","onSwipeableOpenStartDrag","onSwipeableCloseStartDrag","leftThreshold","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","setValue","setState","sign","spring","Object","assign","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","animationOptions","start","finished","onSwipeableLeftOpen","onSwipeableOpen","onSwipeableRightOpen","closingDirection","onSwipeableClose","onSwipeableLeftWillOpen","onSwipeableWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onRowLayout","layout","width","openLeft","openRight","reset","render","children","renderLeftActions","renderRightActions","dragOffsetFromLeftEdge","dragOffsetFromRightEdge","left","style","styles","leftActions","transform","translateX","onLayout","x","right","rightActions","activeOffsetX","touchAction","container","containerStyle","enabled","pointerEvents","childrenContainerStyle","create","overflow","absoluteFillObject","flexDirection","isRTL"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-gesture-handler\\src\\components\\Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerProps,\n} from '../handlers/PanGestureHandler';\nimport {\n  PanGestureHandlerEventPayload,\n  TapGestureHandlerEventPayload,\n} from '../handlers/GestureHandlerEventPayload';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Distance that the panel must be dragged from the left edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromLeftEdge?: number;\n\n  /**\n   * Distance that the panel must be dragged from the right edge to be considered\n   * a swipe. The default value is 10.\n   */\n  dragOffsetFromRightEdge?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when left action panel gets open.\n   */\n  onSwipeableLeftOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableOpen()\n   *\n   * Called when right action panel gets open.\n   */\n  onSwipeableRightOpen?: () => void;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: (direction: 'left' | 'right', swipeable: Swipeable) => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: (\n    direction: 'left' | 'right',\n    swipeable: Swipeable\n  ) => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when left action panel starts animating on open.\n   */\n  onSwipeableLeftWillOpen?: () => void;\n\n  /**\n   * @deprecated Use `direction` argument of onSwipeableWillOpen()\n   *\n   * Called when right action panel starts animating on open.\n   */\n  onSwipeableRightWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to open.\n   */\n  onSwipeableOpenStartDrag?: (direction: 'left' | 'right') => void;\n\n  /**\n   * Called when action panel starts being shown on dragging to close.\n   */\n  onSwipeableCloseStartDrag?: (direction: 'left' | 'right') => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: AnimatedInterpolation,\n    dragAnimatedValue: AnimatedInterpolation,\n    swipeable: Swipeable\n  ) => React.ReactNode;\n\n  useNativeAnimations?: boolean;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\n/**\n * @deprecated use Reanimated version of Swipeable instead\n *\n * This component allows for implementing swipeable rows or similar interaction.\n */\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  shouldComponentUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: AnimatedInterpolation;\n  private showLeftAction?: AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: AnimatedInterpolation;\n  private showRightAction?: AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const { overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0 } =\n      props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n\n    if (ev.nativeEvent.state === State.ACTIVE) {\n      const { velocityX, translationX: dragX } = ev.nativeEvent;\n      const { rowState } = this.state;\n      const { friction } = this.props;\n\n      const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n      const direction =\n        rowState === -1\n          ? 'right'\n          : rowState === 1\n            ? 'left'\n            : translationX > 0\n              ? 'left'\n              : 'right';\n\n      if (rowState === 0) {\n        this.props.onSwipeableOpenStartDrag?.(direction);\n      } else {\n        this.props.onSwipeableCloseStartDrag?.(direction);\n      }\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // Swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // Swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0) {\n          this.props.onSwipeableLeftOpen?.();\n          this.props.onSwipeableOpen?.('left', this);\n        } else if (toValue < 0) {\n          this.props.onSwipeableRightOpen?.();\n          this.props.onSwipeableOpen?.('right', this);\n        } else {\n          const closingDirection = fromValue > 0 ? 'left' : 'right';\n          this.props.onSwipeableClose?.(closingDirection, this);\n        }\n      }\n    });\n    if (toValue > 0) {\n      this.props.onSwipeableLeftWillOpen?.();\n      this.props.onSwipeableWillOpen?.('left');\n    } else if (toValue < 0) {\n      this.props.onSwipeableRightWillOpen?.();\n      this.props.onSwipeableWillOpen?.('right');\n    } else {\n      const closingDirection = fromValue > 0 ? 'left' : 'right';\n      this.props.onSwipeableWillClose?.(closingDirection);\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  // eslint-disable-next-line @eslint-react/no-unused-class-component-members\n  reset = () => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(0);\n    this.setState({ rowState: 0 });\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const {\n      children,\n      renderLeftActions,\n      renderRightActions,\n      dragOffsetFromLeftEdge = 10,\n      dragOffsetFromRightEdge = 10,\n    } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // All those and below parameters can have ! since they are all\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n          // it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!, this)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-dragOffsetFromRightEdge, dragOffsetFromLeftEdge]}\n        touchAction=\"pan-y\"\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            touchAction=\"pan-y\"\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}