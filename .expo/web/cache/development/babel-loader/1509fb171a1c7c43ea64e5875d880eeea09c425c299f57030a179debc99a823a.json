{"ast":null,"code":"import NativeVideoModule from './NativeVideoModule';\nexport function isPictureInPictureSupported() {\n  return NativeVideoModule.isPictureInPictureSupported();\n}\nexport function clearVideoCacheAsync() {\n  return NativeVideoModule.clearVideoCacheAsync();\n}\nexport function setVideoCacheSizeAsync(sizeBytes) {\n  return NativeVideoModule.setVideoCacheSizeAsync(sizeBytes);\n}\nexport function getCurrentVideoCacheSize() {\n  return NativeVideoModule.getCurrentVideoCacheSize();\n}","map":{"version":3,"names":["NativeVideoModule","isPictureInPictureSupported","clearVideoCacheAsync","setVideoCacheSizeAsync","sizeBytes","getCurrentVideoCacheSize"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\expo-video\\src\\VideoModule.ts"],"sourcesContent":["import NativeVideoModule from './NativeVideoModule';\n\n/**\n * Returns whether the current device supports Picture in Picture (PiP) mode.\n *\n * @returns A `boolean` which is `true` if the device supports PiP mode, and `false` otherwise.\n * @platform android\n * @platform ios\n */\nexport function isPictureInPictureSupported(): boolean {\n  return NativeVideoModule.isPictureInPictureSupported();\n}\n\n/**\n * Clears all video cache.\n * > This function can be called only if there are no existing `VideoPlayer` instances.\n *\n * @returns A promise that fulfills after the cache has been cleaned.\n * @platform android\n * @platform ios\n */\nexport function clearVideoCacheAsync(): Promise<void> {\n  return NativeVideoModule.clearVideoCacheAsync();\n}\n\n/**\n * Sets desired video cache size in bytes. The default video cache size is 1GB. Value set by this function is persistent.\n * The cache size is not guaranteed to be exact and the actual cache size may be slightly larger. The cache is evicted on a least-recently-used basis.\n * > This function can be called only if there are no existing `VideoPlayer` instances.\n *\n * @returns A promise that fulfills after the cache size has been set.\n * @platform android\n * @platform ios\n */\nexport function setVideoCacheSizeAsync(sizeBytes: number): Promise<void> {\n  return NativeVideoModule.setVideoCacheSizeAsync(sizeBytes);\n}\n\n/**\n * Returns the space currently occupied by the video cache in bytes.\n *\n * @platform android\n * @platform ios\n */\nexport function getCurrentVideoCacheSize(): number {\n  return NativeVideoModule.getCurrentVideoCacheSize();\n}\n"],"mappings":"AAAA,OAAOA,iBAAiB,MAAM,qBAAqB;AASnD,OAAM,SAAUC,2BAA2BA,CAAA;EACzC,OAAOD,iBAAiB,CAACC,2BAA2B,EAAE;AACxD;AAUA,OAAM,SAAUC,oBAAoBA,CAAA;EAClC,OAAOF,iBAAiB,CAACE,oBAAoB,EAAE;AACjD;AAWA,OAAM,SAAUC,sBAAsBA,CAACC,SAAiB;EACtD,OAAOJ,iBAAiB,CAACG,sBAAsB,CAACC,SAAS,CAAC;AAC5D;AAQA,OAAM,SAAUC,wBAAwBA,CAAA;EACtC,OAAOL,iBAAiB,CAACK,wBAAwB,EAAE;AACrD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}