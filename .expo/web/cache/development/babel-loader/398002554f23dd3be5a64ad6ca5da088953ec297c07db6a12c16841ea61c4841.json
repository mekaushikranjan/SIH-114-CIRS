{"ast":null,"code":"'use strict';\nexport let LayoutAnimationType = function (LayoutAnimationType) {\n  LayoutAnimationType[LayoutAnimationType[\"ENTERING\"] = 1] = \"ENTERING\";\n  LayoutAnimationType[LayoutAnimationType[\"EXITING\"] = 2] = \"EXITING\";\n  LayoutAnimationType[LayoutAnimationType[\"LAYOUT\"] = 3] = \"LAYOUT\";\n  return LayoutAnimationType;\n}({});\nexport let SensorType = function (SensorType) {\n  SensorType[SensorType[\"ACCELEROMETER\"] = 1] = \"ACCELEROMETER\";\n  SensorType[SensorType[\"GYROSCOPE\"] = 2] = \"GYROSCOPE\";\n  SensorType[SensorType[\"GRAVITY\"] = 3] = \"GRAVITY\";\n  SensorType[SensorType[\"MAGNETIC_FIELD\"] = 4] = \"MAGNETIC_FIELD\";\n  SensorType[SensorType[\"ROTATION\"] = 5] = \"ROTATION\";\n  return SensorType;\n}({});\nexport let IOSReferenceFrame = function (IOSReferenceFrame) {\n  IOSReferenceFrame[IOSReferenceFrame[\"XArbitraryZVertical\"] = 0] = \"XArbitraryZVertical\";\n  IOSReferenceFrame[IOSReferenceFrame[\"XArbitraryCorrectedZVertical\"] = 1] = \"XArbitraryCorrectedZVertical\";\n  IOSReferenceFrame[IOSReferenceFrame[\"XMagneticNorthZVertical\"] = 2] = \"XMagneticNorthZVertical\";\n  IOSReferenceFrame[IOSReferenceFrame[\"XTrueNorthZVertical\"] = 3] = \"XTrueNorthZVertical\";\n  IOSReferenceFrame[IOSReferenceFrame[\"Auto\"] = 4] = \"Auto\";\n  return IOSReferenceFrame;\n}({});\nexport let InterfaceOrientation = function (InterfaceOrientation) {\n  InterfaceOrientation[InterfaceOrientation[\"ROTATION_0\"] = 0] = \"ROTATION_0\";\n  InterfaceOrientation[InterfaceOrientation[\"ROTATION_90\"] = 90] = \"ROTATION_90\";\n  InterfaceOrientation[InterfaceOrientation[\"ROTATION_180\"] = 180] = \"ROTATION_180\";\n  InterfaceOrientation[InterfaceOrientation[\"ROTATION_270\"] = 270] = \"ROTATION_270\";\n  return InterfaceOrientation;\n}({});\nexport let KeyboardState = function (KeyboardState) {\n  KeyboardState[KeyboardState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  KeyboardState[KeyboardState[\"OPENING\"] = 1] = \"OPENING\";\n  KeyboardState[KeyboardState[\"OPEN\"] = 2] = \"OPEN\";\n  KeyboardState[KeyboardState[\"CLOSING\"] = 3] = \"CLOSING\";\n  KeyboardState[KeyboardState[\"CLOSED\"] = 4] = \"CLOSED\";\n  return KeyboardState;\n}({});\nexport let ReduceMotion = function (ReduceMotion) {\n  ReduceMotion[\"System\"] = \"system\";\n  ReduceMotion[\"Always\"] = \"always\";\n  ReduceMotion[\"Never\"] = \"never\";\n  return ReduceMotion;\n}({});","map":{"version":3,"names":["LayoutAnimationType","SensorType","IOSReferenceFrame","InterfaceOrientation","KeyboardState","ReduceMotion"],"sources":["C:\\Users\\prana\\OneDrive\\Desktop\\civic-reporter-sih\\frontend\\node_modules\\react-native-reanimated\\src\\commonTypes.ts"],"sourcesContent":["'use strict';\n\nimport type { ComponentRef, RefObject } from 'react';\nimport type {\n  ImageStyle,\n  NativeMethods,\n  ScrollResponderMixin,\n  ScrollViewComponent,\n  TextStyle,\n  TransformsStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport type { SerializableRef, WorkletFunction } from 'react-native-worklets';\n\nimport type { Maybe } from './common/types';\nimport type { CSSAnimationProperties, CSSTransitionProperties } from './css';\nimport type { AnyRecord } from './css/types';\nimport type { EasingFunctionFactory } from './Easing';\n\ntype LayoutAnimationOptions =\n  | 'originX'\n  | 'originY'\n  | 'width'\n  | 'height'\n  | 'borderRadius'\n  | 'globalOriginX'\n  | 'globalOriginY';\n\ntype CurrentLayoutAnimationValues = {\n  [K in LayoutAnimationOptions as `current${Capitalize<string & K>}`]: number;\n};\n\ntype TargetLayoutAnimationValues = {\n  [K in LayoutAnimationOptions as `target${Capitalize<string & K>}`]: number;\n};\n\ninterface WindowDimensions {\n  windowWidth: number;\n  windowHeight: number;\n}\n\nexport interface KeyframeProps extends StyleProps {\n  easing?: EasingFunction | EasingFunctionFactory;\n}\n\ntype FirstFrame =\n  | {\n      0: KeyframeProps & { easing?: never };\n      from?: never;\n    }\n  | {\n      0?: never;\n      from: KeyframeProps & { easing?: never };\n    };\n\ntype LastFrame =\n  | { 100?: KeyframeProps; to?: never }\n  | { 100?: never; to: KeyframeProps };\n\nexport type ValidKeyframeProps = FirstFrame &\n  LastFrame &\n  Record<number, KeyframeProps>;\n\nexport type MaybeInvalidKeyframeProps = Record<number, KeyframeProps> & {\n  to?: KeyframeProps;\n  from?: KeyframeProps;\n};\n\nexport type LayoutAnimation = {\n  initialValues: StyleProps;\n  animations: StyleProps;\n  callback?: (finished: boolean) => void;\n};\n\nexport type AnimationFunction = (a?: any, b?: any, c?: any) => any; // this is just a temporary mock\n\nexport type EntryAnimationsValues = TargetLayoutAnimationValues &\n  WindowDimensions;\n\nexport type ExitAnimationsValues = CurrentLayoutAnimationValues &\n  WindowDimensions;\n\nexport type EntryExitAnimationFunction =\n  | ((targetValues: EntryAnimationsValues) => LayoutAnimation)\n  | ((targetValues: ExitAnimationsValues) => LayoutAnimation)\n  | (() => LayoutAnimation);\n\nexport type AnimationConfigFunction<T> = (targetValues: T) => LayoutAnimation;\n\nexport type LayoutAnimationValues = CurrentLayoutAnimationValues &\n  TargetLayoutAnimationValues &\n  WindowDimensions;\n\nexport enum LayoutAnimationType {\n  ENTERING = 1,\n  EXITING = 2,\n  LAYOUT = 3,\n}\n\nexport type LayoutAnimationFunction = (\n  targetValues: LayoutAnimationValues\n) => LayoutAnimation;\n\nexport type LayoutAnimationStartFunction = (\n  tag: number,\n  type: LayoutAnimationType,\n  yogaValues: Partial<LayoutAnimationValues>,\n  config: (arg: Partial<LayoutAnimationValues>) => LayoutAnimation\n) => void;\n\nexport interface ILayoutAnimationBuilder {\n  build: () => LayoutAnimationFunction;\n}\n\nexport interface BaseLayoutAnimationConfig {\n  duration?: number;\n  easing?: EasingFunction | EasingFunctionFactory;\n  type?: AnimationFunction;\n  damping?: number;\n  dampingRatio?: number;\n  mass?: number;\n  stiffness?: number;\n  overshootClamping?: number;\n  energyThreshold?: number;\n}\n\nexport interface BaseBuilderAnimationConfig extends BaseLayoutAnimationConfig {\n  rotate?: number | string;\n}\n\nexport type LayoutAnimationAndConfig = [\n  AnimationFunction,\n  BaseBuilderAnimationConfig,\n];\n\nexport interface IEntryExitAnimationBuilder {\n  build: () => EntryExitAnimationFunction;\n}\n\nexport interface IEntryAnimationBuilder {\n  build: () => AnimationConfigFunction<EntryAnimationsValues>;\n}\n\nexport interface IExitAnimationBuilder {\n  build: () => AnimationConfigFunction<ExitAnimationsValues>;\n}\n\n/**\n * Used to configure the `.defaultTransitionType()` shared transition modifier.\n *\n * @experimental\n */\n\nexport type EntryExitAnimationsValues =\n  | EntryAnimationsValues\n  | ExitAnimationsValues;\n\nexport type StylePropsWithArrayTransform = StyleProps & {\n  transform?: TransformArrayItem[];\n};\n\nexport interface LayoutAnimationBatchItem {\n  viewTag: number;\n  type: LayoutAnimationType;\n  config: SerializableRef<Keyframe | LayoutAnimationFunction> | undefined;\n}\n\nexport type RequiredKeys<T, K extends keyof T> = T & Required<Pick<T, K>>;\nexport interface StyleProps extends ViewStyle, TextStyle {\n  originX?: number;\n  originY?: number;\n  [key: string]: any;\n}\n\n/**\n * A value that can be used both on the [JavaScript\n * thread](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#javascript-thread)\n * and the [UI\n * thread](https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/glossary#ui-thread).\n *\n * Shared values are defined using\n * [useSharedValue](https://docs.swmansion.com/react-native-reanimated/docs/core/useSharedValue)\n * hook. You access and modify shared values by their `.value` property.\n */\nexport interface SharedValue<Value = unknown> {\n  value: Value;\n  get(): Value;\n  set(value: Value | ((value: Value) => Value)): void;\n  addListener: (listenerID: number, listener: (value: Value) => void) => void;\n  removeListener: (listenerID: number) => void;\n  modify: (\n    modifier?: <T extends Value>(value: T) => T,\n    forceUpdate?: boolean\n  ) => void;\n}\n\n/**\n * Due to pattern of `MaybeSharedValue` type present in `AnimatedProps`\n * (`AnimatedStyle`), contravariance breaks types for animated styles etc.\n * Instead of refactoring the code with small chances of success, we just\n * disable contravariance for `SharedValue` in this problematic case.\n */\ntype SharedValueDisableContravariance<Value = unknown> = Omit<\n  SharedValue<Value>,\n  'set'\n>;\n\nexport interface Mutable<Value = unknown> extends SharedValue<Value> {\n  _isReanimatedSharedValue: true;\n  _animation?: AnimationObject<Value> | null; // only in Native\n  /**\n   * `_value` prop should only be accessed by the `valueSetter` implementation\n   * which may make the decision about updating the mutable value depending on\n   * the provided new value. All other places should only attempt to modify the\n   * mutable by assigning to `value` prop directly or by calling the `set`\n   * method.\n   */\n  _value: Value;\n  /**\n   * Defined only when enabled with a feature flag\n   * `USE_SYNCHRONIZABLE_FOR_MUTABLES`.\n   */\n  setDirty?: (dirty: boolean) => void;\n}\n\nexport type MapperRawInputs = unknown[];\n\nexport type MapperOutputs = SharedValue[];\n\nexport type MapperRegistry = {\n  start: (\n    mapperID: number,\n    worklet: (forceUpdate?: boolean) => void,\n    inputs: MapperRawInputs,\n    outputs?: MapperOutputs\n  ) => void;\n  stop: (mapperID: number) => void;\n};\n\nexport type AnimatedPropsAdapterFunction = (\n  props: Record<string, unknown>\n) => void;\n\nexport type AnimatedPropsAdapterWorklet = WorkletFunction<\n  [props: Record<string, unknown>],\n  void\n>;\n\nexport interface NestedObject<T> {\n  [key: string]: NestedObjectValues<T>;\n}\n\nexport type NestedObjectValues<T> =\n  | T\n  | Array<NestedObjectValues<T>>\n  | NestedObject<T>;\n\ntype Animatable = number | string | Array<number>;\n\nexport type AnimatableValueObject = { [key: string]: Animatable };\n\nexport type AnimatableValue = Animatable | AnimatableValueObject;\n\nexport interface AnimationObject<T = AnimatableValue> {\n  [key: string]: any;\n  callback?: AnimationCallback;\n  current?: T;\n  toValue?: AnimationObject<T>['current'];\n  startValue?: AnimationObject<T>['current'];\n  finished?: boolean;\n  strippedCurrent?: number;\n  cancelled?: boolean;\n  reduceMotion?: boolean;\n\n  __prefix?: string;\n  __suffix?: string;\n  onFrame: (animation: any, timestamp: Timestamp) => boolean;\n  onStart: (\n    nextAnimation: any,\n    current: any,\n    timestamp: Timestamp,\n    previousAnimation: any\n  ) => void;\n}\n\nexport interface Animation<T extends AnimationObject> extends AnimationObject {\n  onFrame: (animation: T, timestamp: Timestamp) => boolean;\n  onStart: (\n    nextAnimation: T,\n    current: AnimatableValue,\n    timestamp: Timestamp,\n    previousAnimation: Animation<any> | null | T\n  ) => void;\n}\n\nexport enum SensorType {\n  ACCELEROMETER = 1,\n  GYROSCOPE = 2,\n  GRAVITY = 3,\n  MAGNETIC_FIELD = 4,\n  ROTATION = 5,\n}\nexport enum IOSReferenceFrame {\n  XArbitraryZVertical,\n  XArbitraryCorrectedZVertical,\n  XMagneticNorthZVertical,\n  XTrueNorthZVertical,\n  Auto,\n}\n\nexport type SensorConfig = {\n  interval: number | 'auto';\n  adjustToInterfaceOrientation: boolean;\n  iosReferenceFrame: IOSReferenceFrame;\n};\n\nexport type AnimatedSensor<T extends Value3D | ValueRotation> = {\n  sensor: SharedValue<T>;\n  unregister: () => void;\n  isAvailable: boolean;\n  config: SensorConfig;\n};\n\n/**\n * A function called upon animation completion. If the animation is cancelled,\n * the callback will receive `false` as the argument; otherwise, it will receive\n * `true`.\n */\nexport type AnimationCallback = (\n  finished?: boolean,\n  current?: AnimatableValue\n) => void;\n\nexport type Timestamp = number;\n\nexport type Value3D = {\n  x: number;\n  y: number;\n  z: number;\n  interfaceOrientation: InterfaceOrientation;\n};\n\nexport type ValueRotation = {\n  qw: number;\n  qx: number;\n  qy: number;\n  qz: number;\n  yaw: number;\n  pitch: number;\n  roll: number;\n  interfaceOrientation: InterfaceOrientation;\n};\n\nexport enum InterfaceOrientation {\n  ROTATION_0 = 0,\n  ROTATION_90 = 90,\n  ROTATION_180 = 180,\n  ROTATION_270 = 270,\n}\n\nexport type ShadowNodeWrapper = {\n  __hostObjectShadowNodeWrapper: never;\n};\n\nexport enum KeyboardState {\n  UNKNOWN = 0,\n  OPENING = 1,\n  OPEN = 2,\n  CLOSING = 3,\n  CLOSED = 4,\n}\n\nexport type AnimatedKeyboardInfo = {\n  height: SharedValue<number>;\n  state: SharedValue<KeyboardState>;\n};\n\n/**\n * @param x - A number representing X coordinate relative to the parent\n *   component.\n * @param y - A number representing Y coordinate relative to the parent\n *   component.\n * @param width - A number representing the width of the component.\n * @param height - A number representing the height of the component.\n * @param pageX - A number representing X coordinate relative to the screen.\n * @param pageY - A number representing Y coordinate relative to the screen.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/advanced/measure#returns\n */\nexport interface MeasuredDimensions {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  pageX: number;\n  pageY: number;\n}\n\nexport interface AnimatedKeyboardOptions {\n  isStatusBarTranslucentAndroid?: boolean;\n  isNavigationBarTranslucentAndroid?: boolean;\n}\n\n/**\n * @param System - If the `Reduce motion` accessibility setting is enabled on\n *   the device, disable the animation. Otherwise, enable the animation.\n * @param Always - Disable the animation.\n * @param Never - Enable the animation.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/guides/accessibility\n */\nexport enum ReduceMotion {\n  System = 'system',\n  Always = 'always',\n  Never = 'never',\n}\n\nexport type EasingFunction = (t: number) => number;\n\nexport type TransformArrayItem = Extract<\n  TransformsStyle['transform'],\n  Array<unknown>\n>[number];\n\ntype MaybeSharedValue<Value> =\n  | Value\n  | (Value extends AnimatableValue\n      ? SharedValueDisableContravariance<Value>\n      : never);\n\ntype MaybeSharedValueRecursive<Value> = Value extends readonly (infer Item)[]\n  ?\n      | SharedValueDisableContravariance<Item[]>\n      | (MaybeSharedValueRecursive<Item> | Item)[]\n  : Value extends object\n    ?\n        | SharedValueDisableContravariance<Value>\n        | {\n            [Key in keyof Value]:\n              | MaybeSharedValueRecursive<Value[Key]>\n              | Value[Key];\n          }\n    : MaybeSharedValue<Value>;\n\ntype DefaultStyle = ViewStyle & ImageStyle & TextStyle;\n\n// Ideally we want AnimatedStyle to not be generic, but there are\n// so many dependencies on it being generic that it's not feasible at the moment.\nexport type AnimatedStyle<Style = DefaultStyle> =\n  | (Style & Partial<CSSAnimationProperties> & Partial<CSSTransitionProperties>) // TODO - maybe add css animation config somewhere else\n  | MaybeSharedValueRecursive<Style>;\n\nexport type AnimatedTransform = MaybeSharedValueRecursive<\n  TransformsStyle['transform']\n>;\n\nexport type StyleUpdaterContainer = RefObject<\n  ((forceUpdate: boolean) => void) | undefined\n>;\n\ntype NativeScrollRef = Maybe<\n  (\n    | ComponentRef<typeof View>\n    | ComponentRef<typeof ScrollViewComponent>\n    | NativeMethods\n  ) & {\n    __internalInstanceHandle?: AnyRecord;\n  }\n>;\n\ntype InstanceMethods = {\n  getScrollResponder?: () => Maybe<\n    (ScrollResponderMixin | React.JSX.Element) & {\n      getNativeScrollRef?: () => NativeScrollRef;\n    }\n  >;\n  getNativeScrollRef?: () => NativeScrollRef;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getScrollableNode?: () => any;\n  __internalInstanceHandle?: AnyRecord;\n};\n\nexport type WrapperRef = (React.Component & InstanceMethods) | InstanceMethods;\n"],"mappings":"AAAA,YAAY;AA8FZ,WAAYA,mBAAmB,aAAnBA,mBAAmB;EAAnBA,mBAAmB,CAAnBA,mBAAmB;EAAnBA,mBAAmB,CAAnBA,mBAAmB;EAAnBA,mBAAmB,CAAnBA,mBAAmB;EAAA,OAAnBA,mBAAmB;AAAA;AA0M/B,WAAYC,UAAU,aAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAOtB,WAAYC,iBAAiB,aAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAjBA,iBAAiB,CAAjBA,iBAAiB;EAAA,OAAjBA,iBAAiB;AAAA;AAmD7B,WAAYC,oBAAoB,aAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;EAApBA,oBAAoB,CAApBA,oBAAoB;EAAA,OAApBA,oBAAoB;AAAA;AAWhC,WAAYC,aAAa,aAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAbA,aAAa,CAAbA,aAAa;EAAA,OAAbA,aAAa;AAAA;AA6CzB,WAAYC,YAAY,aAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAZA,YAAY;EAAA,OAAZA,YAAY;AAAA","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}